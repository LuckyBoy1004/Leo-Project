{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bc/Desktop/New Nivid/Leo-Project/src/components/EarningChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport '../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, VerticalBarSeries, XAxis, YAxis } from 'react-vis';\nimport { useAuth } from '../context/userContext';\n\nconst EarningChart = ({\n  sales\n}) => {\n  _s();\n\n  const {\n    seller\n  } = useAuth();\n  const [yearSales, setYearSales] = useState([]);\n  const [dataGraph, setDataGraph] = useState([{\n    x: \"Jan\",\n    y: 0\n  }, {\n    x: \"Fev\",\n    y: 0\n  }, {\n    x: \"Mar\",\n    y: 0\n  }, {\n    x: \"Avr\",\n    y: 0\n  }, {\n    x: \"Mai\",\n    y: 0\n  }, {\n    x: \"Juin\",\n    y: 0\n  }, {\n    x: \"Juil\",\n    y: 0\n  }, {\n    x: \"Août\",\n    y: 0\n  }, {\n    x: \"Sept\",\n    y: 0\n  }, {\n    x: \"Oct\",\n    y: 0\n  }, {\n    x: \"Nov\",\n    y: 0\n  }, {\n    x: \"Dec\",\n    y: 0\n  }]);\n  useEffect(() => {\n    const rectList = document.querySelectorAll('rect');\n    rectList.forEach(rect => {\n      rect.setAttributeNS(null, \"ry\", \"20\");\n    });\n    return getSalesAndMountGraphData();\n  }, []);\n\n  function getSalesAndMountGraphData() {\n    const yearStart = new Date(new Date().getFullYear(), 0, 1);\n    const yearSalesArray = sales.filter(sale => sale.date > yearStart && sale.status !== \"rejected\"); // && sale.status === \"validated\"\n\n    setYearSales(yearSalesArray);\n    let newDataGraph = [...dataGraph];\n    yearSalesArray.forEach(sale => {\n      const month = new Date(sale.date).getMonth();\n      newDataGraph[month].y = newDataGraph[month].y + sale.total;\n    }, () => setDataGraph(newDataGraph));\n  }\n\n  return yearSales.length > 0 ? /*#__PURE__*/_jsxDEV(XYPlot, {\n    xType: \"ordinal\",\n    xDistance: 0,\n    color: \"rgb(159, 232, 184)\",\n    height: 300,\n    width: window.innerWidth * 0.9,\n    children: [/*#__PURE__*/_jsxDEV(XAxis, {\n      hideLine: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n      hideLine: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(VerticalBarSeries, {\n      style: {\n        transform: `translate(${window.innerWidth * .02}px)`,\n        width: `${window.innerWidth * .02}px`\n      },\n      data: dataGraph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"textInEmptyQuery\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Aucune commande valid\\xE9e cette ann\\xE9e\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 45\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 11\n  }, this);\n};\n\n_s(EarningChart, \"1vKM1GaAvB9sqh4gbWfFgT1nyzU=\", false, function () {\n  return [useAuth];\n});\n\n_c = EarningChart;\nexport default EarningChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"EarningChart\");","map":{"version":3,"sources":["/Users/bc/Desktop/New Nivid/Leo-Project/src/components/EarningChart.js"],"names":["React","useEffect","useState","XYPlot","VerticalBarSeries","XAxis","YAxis","useAuth","EarningChart","sales","seller","yearSales","setYearSales","dataGraph","setDataGraph","x","y","rectList","document","querySelectorAll","forEach","rect","setAttributeNS","getSalesAndMountGraphData","yearStart","Date","getFullYear","yearSalesArray","filter","sale","date","status","newDataGraph","month","getMonth","total","length","window","innerWidth","transform","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport '../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, VerticalBarSeries, XAxis, YAxis } from 'react-vis';\nimport { useAuth } from '../context/userContext'\n\nconst EarningChart = ({ sales }) => {\n\n    const { seller } = useAuth()\n    const [yearSales, setYearSales] = useState([])\n\n\n    const [dataGraph, setDataGraph] = useState([\n        { x: \"Jan\", y: 0 },\n        { x: \"Fev\", y: 0 },\n        { x: \"Mar\", y: 0 },\n        { x: \"Avr\", y: 0 },\n        { x: \"Mai\", y: 0 },\n        { x: \"Juin\", y: 0 },\n        { x: \"Juil\", y: 0 },\n        { x: \"Août\", y: 0 },\n        { x: \"Sept\", y: 0 },\n        { x: \"Oct\", y: 0 },\n        { x: \"Nov\", y: 0 },\n        { x: \"Dec\", y: 0 }\n    ])\n\n    useEffect(() => {\n        const rectList = document.querySelectorAll('rect')\n        rectList.forEach(rect => {\n            rect.setAttributeNS(null, \"ry\", \"20\");\n        })\n        return getSalesAndMountGraphData()\n    }, [])\n\n    function getSalesAndMountGraphData() {\n        const yearStart = new Date(new Date().getFullYear(), 0, 1);\n        const yearSalesArray = sales.filter(sale => sale.date > yearStart && sale.status !== \"rejected\") // && sale.status === \"validated\"\n\n        setYearSales(yearSalesArray)\n\n        let newDataGraph = [...dataGraph]\n        yearSalesArray.forEach(sale => {\n            const month = new Date(sale.date).getMonth()\n            newDataGraph[month].y = newDataGraph[month].y + sale.total\n        }, () => setDataGraph(newDataGraph))\n\n    }\n\n    return yearSales.length > 0 ? (\n        <XYPlot xType=\"ordinal\" xDistance={0} color=\"rgb(159, 232, 184)\" height={300} width={window.innerWidth * 0.9}>\n            <XAxis hideLine />\n            <YAxis hideLine />\n            <VerticalBarSeries\n                style={{ transform: `translate(${window.innerWidth * .02}px)`, width: `${window.innerWidth * .02}px` }}\n                data={dataGraph} />\n        </XYPlot>\n    )\n        : <div className=\"textInEmptyQuery\"><p>Aucune commande validée cette année</p></div>\n}\n\nexport default EarningChart"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/BlockDomain', 'model/CreateModel', 'model/CreateSmtpEmail', 'model/CreateSmtpTemplate', 'model/DeleteHardbounces', 'model/ErrorModel', 'model/GetAggregatedReport', 'model/GetBlockedDomains', 'model/GetEmailEventReport', 'model/GetReports', 'model/GetSmtpTemplateOverview', 'model/GetSmtpTemplates', 'model/GetTransacBlockedContacts', 'model/GetTransacEmailContent', 'model/GetTransacEmailsList', 'model/PostSendFailed', 'model/SendEmail', 'model/SendSmtpEmail', 'model/SendTemplateEmail', 'model/SendTestEmail', 'model/UpdateSmtpTemplate'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/BlockDomain'), require('../model/CreateModel'), require('../model/CreateSmtpEmail'), require('../model/CreateSmtpTemplate'), require('../model/DeleteHardbounces'), require('../model/ErrorModel'), require('../model/GetAggregatedReport'), require('../model/GetBlockedDomains'), require('../model/GetEmailEventReport'), require('../model/GetReports'), require('../model/GetSmtpTemplateOverview'), require('../model/GetSmtpTemplates'), require('../model/GetTransacBlockedContacts'), require('../model/GetTransacEmailContent'), require('../model/GetTransacEmailsList'), require('../model/PostSendFailed'), require('../model/SendEmail'), require('../model/SendSmtpEmail'), require('../model/SendTemplateEmail'), require('../model/SendTestEmail'), require('../model/UpdateSmtpTemplate'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n\n    root.SibApiV3Sdk.TransactionalEmailsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.BlockDomain, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateSmtpEmail, root.SibApiV3Sdk.CreateSmtpTemplate, root.SibApiV3Sdk.DeleteHardbounces, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetAggregatedReport, root.SibApiV3Sdk.GetBlockedDomains, root.SibApiV3Sdk.GetEmailEventReport, root.SibApiV3Sdk.GetReports, root.SibApiV3Sdk.GetSmtpTemplateOverview, root.SibApiV3Sdk.GetSmtpTemplates, root.SibApiV3Sdk.GetTransacBlockedContacts, root.SibApiV3Sdk.GetTransacEmailContent, root.SibApiV3Sdk.GetTransacEmailsList, root.SibApiV3Sdk.PostSendFailed, root.SibApiV3Sdk.SendEmail, root.SibApiV3Sdk.SendSmtpEmail, root.SibApiV3Sdk.SendTemplateEmail, root.SibApiV3Sdk.SendTestEmail, root.SibApiV3Sdk.UpdateSmtpTemplate);\n  }\n})(this, function (ApiClient, BlockDomain, CreateModel, CreateSmtpEmail, CreateSmtpTemplate, DeleteHardbounces, ErrorModel, GetAggregatedReport, GetBlockedDomains, GetEmailEventReport, GetReports, GetSmtpTemplateOverview, GetSmtpTemplates, GetTransacBlockedContacts, GetTransacEmailContent, GetTransacEmailsList, PostSendFailed, SendEmail, SendSmtpEmail, SendTemplateEmail, SendTestEmail, UpdateSmtpTemplate) {\n  'use strict';\n  /**\n   * TransactionalEmails service.\n   * @module api/TransactionalEmailsApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new TransactionalEmailsApi. \n   * @alias module:api/TransactionalEmailsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n\n  var exports = function exports(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n    /**\n     * Add a new domain to the list of blocked domains\n     * Blocks a new domain in order to avoid messages being sent to the same\n     * @param {module:model/BlockDomain} blockDomain \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n    this.blockNewDomainWithHttpInfo = function (blockDomain) {\n      var postBody = blockDomain; // verify the required parameter 'blockDomain' is set\n\n      if (blockDomain === undefined || blockDomain === null) {\n        throw new Error(\"Missing the required parameter 'blockDomain' when calling blockNewDomain\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smtp/blockedDomains', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Add a new domain to the list of blocked domains\n     * Blocks a new domain in order to avoid messages being sent to the same\n     * @param {module:model/BlockDomain} blockDomain \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.blockNewDomain = function (blockDomain) {\n      return this.blockNewDomainWithHttpInfo(blockDomain).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Create an email template\n     * @param {module:model/CreateSmtpTemplate} smtpTemplate values to update in transactional email template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n\n\n    this.createSmtpTemplateWithHttpInfo = function (smtpTemplate) {\n      var postBody = smtpTemplate; // verify the required parameter 'smtpTemplate' is set\n\n      if (smtpTemplate === undefined || smtpTemplate === null) {\n        throw new Error(\"Missing the required parameter 'smtpTemplate' when calling createSmtpTemplate\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n      return this.apiClient.callApi('/smtp/templates', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Create an email template\n     * @param {module:model/CreateSmtpTemplate} smtpTemplate values to update in transactional email template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n\n\n    this.createSmtpTemplate = function (smtpTemplate) {\n      return this.createSmtpTemplateWithHttpInfo(smtpTemplate).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Unblock an existing domain from the list of blocked domains\n     * Unblocks an existing domain from the list of blocked domains\n     * @param {String} domain The name of the domain to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteBlockedDomainWithHttpInfo = function (domain) {\n      var postBody = null; // verify the required parameter 'domain' is set\n\n      if (domain === undefined || domain === null) {\n        throw new Error(\"Missing the required parameter 'domain' when calling deleteBlockedDomain\");\n      }\n\n      var pathParams = {\n        'domain': domain\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smtp/blockedDomains/{domain}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Unblock an existing domain from the list of blocked domains\n     * Unblocks an existing domain from the list of blocked domains\n     * @param {String} domain The name of the domain to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteBlockedDomain = function (domain) {\n      return this.deleteBlockedDomainWithHttpInfo(domain).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete hardbounces\n     * Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)\n     * @param {Object} opts Optional parameters\n     * @param {module:model/DeleteHardbounces} opts.deleteHardbounces values to delete hardbounces\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteHardbouncesWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = opts['deleteHardbounces'];\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smtp/deleteHardbounces', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete hardbounces\n     * Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)\n     * @param {Object} opts Optional parameters\n     * @param {module:model/DeleteHardbounces} opts.deleteHardbounces values to delete hardbounces\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteHardbounces = function (opts) {\n      return this.deleteHardbouncesWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete an inactive email template\n     * @param {Number} templateId id of the template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteSmtpTemplateWithHttpInfo = function (templateId) {\n      var postBody = null; // verify the required parameter 'templateId' is set\n\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling deleteSmtpTemplate\");\n      }\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smtp/templates/{templateId}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete an inactive email template\n     * @param {Number} templateId id of the template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteSmtpTemplate = function (templateId) {\n      return this.deleteSmtpTemplateWithHttpInfo(templateId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get your transactional email activity aggregated over a period of time\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;\n     * @param {String} opts.tag Tag of the emails\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAggregatedReport} and HTTP response\n     */\n\n\n    this.getAggregatedSmtpReportWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'days': opts['days'],\n        'tag': opts['tag']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetAggregatedReport;\n      return this.apiClient.callApi('/smtp/statistics/aggregatedReport', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get your transactional email activity aggregated over a period of time\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;\n     * @param {String} opts.tag Tag of the emails\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAggregatedReport}\n     */\n\n\n    this.getAggregatedSmtpReport = function (opts) {\n      return this.getAggregatedSmtpReportWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get the list of blocked domains\n     * Get the list of blocked domains\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetBlockedDomains} and HTTP response\n     */\n\n\n    this.getBlockedDomainsWithHttpInfo = function () {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetBlockedDomains;\n      return this.apiClient.callApi('/smtp/blockedDomains', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get the list of blocked domains\n     * Get the list of blocked domains\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetBlockedDomains}\n     */\n\n\n    this.getBlockedDomains = function () {\n      return this.getBlockedDomainsWithHttpInfo().then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get all your transactional email activity (unaggregated events)\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number limitation for the result returned (default to 50)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;\n     * @param {String} opts.email Filter the report for a specific email addresses\n     * @param {module:model/String} opts.event Filter the report for a specific event type\n     * @param {String} opts.tags Filter the report for tags (serialized and urlencoded array)\n     * @param {String} opts.messageId Filter on a specific message id\n     * @param {Number} opts.templateId Filter on a specific template id\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEmailEventReport} and HTTP response\n     */\n\n\n    this.getEmailEventReportWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'days': opts['days'],\n        'email': opts['email'],\n        'event': opts['event'],\n        'tags': opts['tags'],\n        'messageId': opts['messageId'],\n        'templateId': opts['templateId'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetEmailEventReport;\n      return this.apiClient.callApi('/smtp/statistics/events', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get all your transactional email activity (unaggregated events)\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number limitation for the result returned (default to 50)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;\n     * @param {String} opts.email Filter the report for a specific email addresses\n     * @param {module:model/String} opts.event Filter the report for a specific event type\n     * @param {String} opts.tags Filter the report for tags (serialized and urlencoded array)\n     * @param {String} opts.messageId Filter on a specific message id\n     * @param {Number} opts.templateId Filter on a specific template id\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEmailEventReport}\n     */\n\n\n    this.getEmailEventReport = function (opts) {\n      return this.getEmailEventReportWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get your transactional email activity aggregated per day\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents returned per page (default to 10)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;\n     * @param {String} opts.tag Tag of the emails\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetReports} and HTTP response\n     */\n\n\n    this.getSmtpReportWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'days': opts['days'],\n        'tag': opts['tag'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetReports;\n      return this.apiClient.callApi('/smtp/statistics/reports', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get your transactional email activity aggregated per day\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents returned per page (default to 10)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;\n     * @param {String} opts.tag Tag of the emails\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetReports}\n     */\n\n\n    this.getSmtpReport = function (opts) {\n      return this.getSmtpReportWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Returns the template information\n     * @param {Number} templateId id of the template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmtpTemplateOverview} and HTTP response\n     */\n\n\n    this.getSmtpTemplateWithHttpInfo = function (templateId) {\n      var postBody = null; // verify the required parameter 'templateId' is set\n\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling getSmtpTemplate\");\n      }\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmtpTemplateOverview;\n      return this.apiClient.callApi('/smtp/templates/{templateId}', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Returns the template information\n     * @param {Number} templateId id of the template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmtpTemplateOverview}\n     */\n\n\n    this.getSmtpTemplate = function (templateId) {\n      return this.getSmtpTemplateWithHttpInfo(templateId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get the list of email templates\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.templateStatus Filter on the status of the template. Active &#x3D; true, inactive &#x3D; false\n     * @param {Number} opts.limit Number of documents returned per page (default to 50)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmtpTemplates} and HTTP response\n     */\n\n\n    this.getSmtpTemplatesWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'templateStatus': opts['templateStatus'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmtpTemplates;\n      return this.apiClient.callApi('/smtp/templates', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get the list of email templates\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.templateStatus Filter on the status of the template. Active &#x3D; true, inactive &#x3D; false\n     * @param {Number} opts.limit Number of documents returned per page (default to 50)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmtpTemplates}\n     */\n\n\n    this.getSmtpTemplates = function (opts) {\n      return this.getSmtpTemplatesWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get the list of blocked or unsubscribed transactional contacts\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts\n     * @param {Number} opts.limit Number of documents returned per page (default to 50)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {Array.<String>} opts.senders Comma separated list of emails of the senders from which contacts are blocked or unsubscribed\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransacBlockedContacts} and HTTP response\n     */\n\n\n    this.getTransacBlockedContactsWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {\n        'senders': {\n          value: opts['senders'],\n          collectionFormat: 'csv'\n        }\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetTransacBlockedContacts;\n      return this.apiClient.callApi('/smtp/blockedContacts', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get the list of blocked or unsubscribed transactional contacts\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts\n     * @param {Number} opts.limit Number of documents returned per page (default to 50)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {Array.<String>} opts.senders Comma separated list of emails of the senders from which contacts are blocked or unsubscribed\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransacBlockedContacts}\n     */\n\n\n    this.getTransacBlockedContacts = function (opts) {\n      return this.getTransacBlockedContactsWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get the personalized content of a sent transactional email\n     * @param {String} uuid Unique id of the transactional email that has been sent to a particular contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransacEmailContent} and HTTP response\n     */\n\n\n    this.getTransacEmailContentWithHttpInfo = function (uuid) {\n      var postBody = null; // verify the required parameter 'uuid' is set\n\n      if (uuid === undefined || uuid === null) {\n        throw new Error(\"Missing the required parameter 'uuid' when calling getTransacEmailContent\");\n      }\n\n      var pathParams = {\n        'uuid': uuid\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetTransacEmailContent;\n      return this.apiClient.callApi('/smtp/emails/{uuid}', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get the personalized content of a sent transactional email\n     * @param {String} uuid Unique id of the transactional email that has been sent to a particular contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransacEmailContent}\n     */\n\n\n    this.getTransacEmailContent = function (uuid) {\n      return this.getTransacEmailContentWithHttpInfo(uuid).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get the list of transactional emails on the basis of allowed filters\n     * This endpoint will show the list of emails for past 30 days by default. To retrieve emails before that time, please pass startDate and endDate in query filters.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.email Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.\n     * @param {Number} opts.templateId Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.\n     * @param {String} opts.messageId Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransacEmailsList} and HTTP response\n     */\n\n\n    this.getTransacEmailsListWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'email': opts['email'],\n        'templateId': opts['templateId'],\n        'messageId': opts['messageId'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetTransacEmailsList;\n      return this.apiClient.callApi('/smtp/emails', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get the list of transactional emails on the basis of allowed filters\n     * This endpoint will show the list of emails for past 30 days by default. To retrieve emails before that time, please pass startDate and endDate in query filters.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.email Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.\n     * @param {Number} opts.templateId Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.\n     * @param {String} opts.messageId Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransacEmailsList}\n     */\n\n\n    this.getTransacEmailsList = function (opts) {\n      return this.getTransacEmailsListWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Send a template\n     * This endpoint is deprecated. Prefer v3/smtp/email instead.\n     * @param {Number} templateId Id of the template\n     * @param {module:model/SendEmail} sendEmail \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendTemplateEmail} and HTTP response\n     */\n\n\n    this.sendTemplateWithHttpInfo = function (templateId, sendEmail) {\n      var postBody = sendEmail; // verify the required parameter 'templateId' is set\n\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling sendTemplate\");\n      } // verify the required parameter 'sendEmail' is set\n\n\n      if (sendEmail === undefined || sendEmail === null) {\n        throw new Error(\"Missing the required parameter 'sendEmail' when calling sendTemplate\");\n      }\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = SendTemplateEmail;\n      return this.apiClient.callApi('/smtp/templates/{templateId}/send', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Send a template\n     * This endpoint is deprecated. Prefer v3/smtp/email instead.\n     * @param {Number} templateId Id of the template\n     * @param {module:model/SendEmail} sendEmail \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendTemplateEmail}\n     */\n\n\n    this.sendTemplate = function (templateId, sendEmail) {\n      return this.sendTemplateWithHttpInfo(templateId, sendEmail).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Send a template to your test list\n     * @param {Number} templateId Id of the template\n     * @param {module:model/SendTestEmail} sendTestEmail \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.sendTestTemplateWithHttpInfo = function (templateId, sendTestEmail) {\n      var postBody = sendTestEmail; // verify the required parameter 'templateId' is set\n\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling sendTestTemplate\");\n      } // verify the required parameter 'sendTestEmail' is set\n\n\n      if (sendTestEmail === undefined || sendTestEmail === null) {\n        throw new Error(\"Missing the required parameter 'sendTestEmail' when calling sendTestTemplate\");\n      }\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smtp/templates/{templateId}/sendTest', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Send a template to your test list\n     * @param {Number} templateId Id of the template\n     * @param {module:model/SendTestEmail} sendTestEmail \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.sendTestTemplate = function (templateId, sendTestEmail) {\n      return this.sendTestTemplateWithHttpInfo(templateId, sendTestEmail).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Send a transactional email\n     * @param {module:model/SendSmtpEmail} sendSmtpEmail Values to send a transactional email\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSmtpEmail} and HTTP response\n     */\n\n\n    this.sendTransacEmailWithHttpInfo = function (sendSmtpEmail) {\n      var postBody = sendSmtpEmail; // verify the required parameter 'sendSmtpEmail' is set\n\n      if (sendSmtpEmail === undefined || sendSmtpEmail === null) {\n        throw new Error(\"Missing the required parameter 'sendSmtpEmail' when calling sendTransacEmail\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateSmtpEmail;\n      return this.apiClient.callApi('/smtp/email', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Send a transactional email\n     * @param {module:model/SendSmtpEmail} sendSmtpEmail Values to send a transactional email\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSmtpEmail}\n     */\n\n\n    this.sendTransacEmail = function (sendSmtpEmail) {\n      return this.sendTransacEmailWithHttpInfo(sendSmtpEmail).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Unblock or resubscribe a transactional contact\n     * @param {String} email contact email (urlencoded) to unblock.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.smtpBlockedContactsEmailDeleteWithHttpInfo = function (email) {\n      var postBody = null; // verify the required parameter 'email' is set\n\n      if (email === undefined || email === null) {\n        throw new Error(\"Missing the required parameter 'email' when calling smtpBlockedContactsEmailDelete\");\n      }\n\n      var pathParams = {\n        'email': email\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smtp/blockedContacts/{email}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Unblock or resubscribe a transactional contact\n     * @param {String} email contact email (urlencoded) to unblock.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.smtpBlockedContactsEmailDelete = function (email) {\n      return this.smtpBlockedContactsEmailDeleteWithHttpInfo(email).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete an SMTP transactional log\n     * @param {String} messageId MessageId of the transactional log to delete\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.smtpLogMessageIdDeleteWithHttpInfo = function (messageId) {\n      var postBody = null; // verify the required parameter 'messageId' is set\n\n      if (messageId === undefined || messageId === null) {\n        throw new Error(\"Missing the required parameter 'messageId' when calling smtpLogMessageIdDelete\");\n      }\n\n      var pathParams = {\n        'messageId': messageId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smtp/log/{messageId}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete an SMTP transactional log\n     * @param {String} messageId MessageId of the transactional log to delete\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.smtpLogMessageIdDelete = function (messageId) {\n      return this.smtpLogMessageIdDeleteWithHttpInfo(messageId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update an email template\n     * @param {Number} templateId id of the template\n     * @param {module:model/UpdateSmtpTemplate} smtpTemplate values to update in transactional email template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateSmtpTemplateWithHttpInfo = function (templateId, smtpTemplate) {\n      var postBody = smtpTemplate; // verify the required parameter 'templateId' is set\n\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling updateSmtpTemplate\");\n      } // verify the required parameter 'smtpTemplate' is set\n\n\n      if (smtpTemplate === undefined || smtpTemplate === null) {\n        throw new Error(\"Missing the required parameter 'smtpTemplate' when calling updateSmtpTemplate\");\n      }\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smtp/templates/{templateId}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update an email template\n     * @param {Number} templateId id of the template\n     * @param {module:model/UpdateSmtpTemplate} smtpTemplate values to update in transactional email template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateSmtpTemplate = function (templateId, smtpTemplate) {\n      return this.updateSmtpTemplateWithHttpInfo(templateId, smtpTemplate).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n  };\n\n  return exports;\n});","map":{"version":3,"sources":["F:/My Project/Leo/Nivid/node_modules/sib-api-v3-sdk/src/api/TransactionalEmailsApi.js"],"names":["root","factory","define","amd","module","exports","require","SibApiV3Sdk","TransactionalEmailsApi","ApiClient","BlockDomain","CreateModel","CreateSmtpEmail","CreateSmtpTemplate","DeleteHardbounces","ErrorModel","GetAggregatedReport","GetBlockedDomains","GetEmailEventReport","GetReports","GetSmtpTemplateOverview","GetSmtpTemplates","GetTransacBlockedContacts","GetTransacEmailContent","GetTransacEmailsList","PostSendFailed","SendEmail","SendSmtpEmail","SendTemplateEmail","SendTestEmail","UpdateSmtpTemplate","apiClient","instance","blockNewDomainWithHttpInfo","blockDomain","postBody","undefined","Error","pathParams","queryParams","collectionQueryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","blockNewDomain","then","response_and_data","data","createSmtpTemplateWithHttpInfo","smtpTemplate","createSmtpTemplate","deleteBlockedDomainWithHttpInfo","domain","deleteBlockedDomain","deleteHardbouncesWithHttpInfo","opts","deleteHardbounces","deleteSmtpTemplateWithHttpInfo","templateId","deleteSmtpTemplate","getAggregatedSmtpReportWithHttpInfo","getAggregatedSmtpReport","getBlockedDomainsWithHttpInfo","getBlockedDomains","getEmailEventReportWithHttpInfo","getEmailEventReport","getSmtpReportWithHttpInfo","getSmtpReport","getSmtpTemplateWithHttpInfo","getSmtpTemplate","getSmtpTemplatesWithHttpInfo","getSmtpTemplates","getTransacBlockedContactsWithHttpInfo","value","collectionFormat","getTransacBlockedContacts","getTransacEmailContentWithHttpInfo","uuid","getTransacEmailContent","getTransacEmailsListWithHttpInfo","getTransacEmailsList","sendTemplateWithHttpInfo","sendEmail","sendTemplate","sendTestTemplateWithHttpInfo","sendTestEmail","sendTestTemplate","sendTransacEmailWithHttpInfo","sendSmtpEmail","sendTransacEmail","smtpBlockedContactsEmailDeleteWithHttpInfo","email","smtpBlockedContactsEmailDelete","smtpLogMessageIdDeleteWithHttpInfo","messageId","smtpLogMessageIdDelete","updateSmtpTemplateWithHttpInfo","updateSmtpTemplate"],"mappings":"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","sourcesContent":["/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/BlockDomain', 'model/CreateModel', 'model/CreateSmtpEmail', 'model/CreateSmtpTemplate', 'model/DeleteHardbounces', 'model/ErrorModel', 'model/GetAggregatedReport', 'model/GetBlockedDomains', 'model/GetEmailEventReport', 'model/GetReports', 'model/GetSmtpTemplateOverview', 'model/GetSmtpTemplates', 'model/GetTransacBlockedContacts', 'model/GetTransacEmailContent', 'model/GetTransacEmailsList', 'model/PostSendFailed', 'model/SendEmail', 'model/SendSmtpEmail', 'model/SendTemplateEmail', 'model/SendTestEmail', 'model/UpdateSmtpTemplate'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/BlockDomain'), require('../model/CreateModel'), require('../model/CreateSmtpEmail'), require('../model/CreateSmtpTemplate'), require('../model/DeleteHardbounces'), require('../model/ErrorModel'), require('../model/GetAggregatedReport'), require('../model/GetBlockedDomains'), require('../model/GetEmailEventReport'), require('../model/GetReports'), require('../model/GetSmtpTemplateOverview'), require('../model/GetSmtpTemplates'), require('../model/GetTransacBlockedContacts'), require('../model/GetTransacEmailContent'), require('../model/GetTransacEmailsList'), require('../model/PostSendFailed'), require('../model/SendEmail'), require('../model/SendSmtpEmail'), require('../model/SendTemplateEmail'), require('../model/SendTestEmail'), require('../model/UpdateSmtpTemplate'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.TransactionalEmailsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.BlockDomain, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateSmtpEmail, root.SibApiV3Sdk.CreateSmtpTemplate, root.SibApiV3Sdk.DeleteHardbounces, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetAggregatedReport, root.SibApiV3Sdk.GetBlockedDomains, root.SibApiV3Sdk.GetEmailEventReport, root.SibApiV3Sdk.GetReports, root.SibApiV3Sdk.GetSmtpTemplateOverview, root.SibApiV3Sdk.GetSmtpTemplates, root.SibApiV3Sdk.GetTransacBlockedContacts, root.SibApiV3Sdk.GetTransacEmailContent, root.SibApiV3Sdk.GetTransacEmailsList, root.SibApiV3Sdk.PostSendFailed, root.SibApiV3Sdk.SendEmail, root.SibApiV3Sdk.SendSmtpEmail, root.SibApiV3Sdk.SendTemplateEmail, root.SibApiV3Sdk.SendTestEmail, root.SibApiV3Sdk.UpdateSmtpTemplate);\n  }\n}(this, function(ApiClient, BlockDomain, CreateModel, CreateSmtpEmail, CreateSmtpTemplate, DeleteHardbounces, ErrorModel, GetAggregatedReport, GetBlockedDomains, GetEmailEventReport, GetReports, GetSmtpTemplateOverview, GetSmtpTemplates, GetTransacBlockedContacts, GetTransacEmailContent, GetTransacEmailsList, PostSendFailed, SendEmail, SendSmtpEmail, SendTemplateEmail, SendTestEmail, UpdateSmtpTemplate) {\n  'use strict';\n\n  /**\n   * TransactionalEmails service.\n   * @module api/TransactionalEmailsApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new TransactionalEmailsApi. \n   * @alias module:api/TransactionalEmailsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Add a new domain to the list of blocked domains\n     * Blocks a new domain in order to avoid messages being sent to the same\n     * @param {module:model/BlockDomain} blockDomain \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.blockNewDomainWithHttpInfo = function(blockDomain) {\n      var postBody = blockDomain;\n\n      // verify the required parameter 'blockDomain' is set\n      if (blockDomain === undefined || blockDomain === null) {\n        throw new Error(\"Missing the required parameter 'blockDomain' when calling blockNewDomain\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/blockedDomains', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Add a new domain to the list of blocked domains\n     * Blocks a new domain in order to avoid messages being sent to the same\n     * @param {module:model/BlockDomain} blockDomain \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.blockNewDomain = function(blockDomain) {\n      return this.blockNewDomainWithHttpInfo(blockDomain)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create an email template\n     * @param {module:model/CreateSmtpTemplate} smtpTemplate values to update in transactional email template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createSmtpTemplateWithHttpInfo = function(smtpTemplate) {\n      var postBody = smtpTemplate;\n\n      // verify the required parameter 'smtpTemplate' is set\n      if (smtpTemplate === undefined || smtpTemplate === null) {\n        throw new Error(\"Missing the required parameter 'smtpTemplate' when calling createSmtpTemplate\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/smtp/templates', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create an email template\n     * @param {module:model/CreateSmtpTemplate} smtpTemplate values to update in transactional email template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createSmtpTemplate = function(smtpTemplate) {\n      return this.createSmtpTemplateWithHttpInfo(smtpTemplate)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Unblock an existing domain from the list of blocked domains\n     * Unblocks an existing domain from the list of blocked domains\n     * @param {String} domain The name of the domain to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteBlockedDomainWithHttpInfo = function(domain) {\n      var postBody = null;\n\n      // verify the required parameter 'domain' is set\n      if (domain === undefined || domain === null) {\n        throw new Error(\"Missing the required parameter 'domain' when calling deleteBlockedDomain\");\n      }\n\n\n      var pathParams = {\n        'domain': domain\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/blockedDomains/{domain}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Unblock an existing domain from the list of blocked domains\n     * Unblocks an existing domain from the list of blocked domains\n     * @param {String} domain The name of the domain to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteBlockedDomain = function(domain) {\n      return this.deleteBlockedDomainWithHttpInfo(domain)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete hardbounces\n     * Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)\n     * @param {Object} opts Optional parameters\n     * @param {module:model/DeleteHardbounces} opts.deleteHardbounces values to delete hardbounces\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteHardbouncesWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = opts['deleteHardbounces'];\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/deleteHardbounces', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete hardbounces\n     * Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)\n     * @param {Object} opts Optional parameters\n     * @param {module:model/DeleteHardbounces} opts.deleteHardbounces values to delete hardbounces\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteHardbounces = function(opts) {\n      return this.deleteHardbouncesWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an inactive email template\n     * @param {Number} templateId id of the template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteSmtpTemplateWithHttpInfo = function(templateId) {\n      var postBody = null;\n\n      // verify the required parameter 'templateId' is set\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling deleteSmtpTemplate\");\n      }\n\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/templates/{templateId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an inactive email template\n     * @param {Number} templateId id of the template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteSmtpTemplate = function(templateId) {\n      return this.deleteSmtpTemplateWithHttpInfo(templateId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get your transactional email activity aggregated over a period of time\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;\n     * @param {String} opts.tag Tag of the emails\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAggregatedReport} and HTTP response\n     */\n    this.getAggregatedSmtpReportWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'days': opts['days'],\n        'tag': opts['tag'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetAggregatedReport;\n\n      return this.apiClient.callApi(\n        '/smtp/statistics/aggregatedReport', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get your transactional email activity aggregated over a period of time\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;\n     * @param {String} opts.tag Tag of the emails\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAggregatedReport}\n     */\n    this.getAggregatedSmtpReport = function(opts) {\n      return this.getAggregatedSmtpReportWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of blocked domains\n     * Get the list of blocked domains\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetBlockedDomains} and HTTP response\n     */\n    this.getBlockedDomainsWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetBlockedDomains;\n\n      return this.apiClient.callApi(\n        '/smtp/blockedDomains', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of blocked domains\n     * Get the list of blocked domains\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetBlockedDomains}\n     */\n    this.getBlockedDomains = function() {\n      return this.getBlockedDomainsWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all your transactional email activity (unaggregated events)\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number limitation for the result returned (default to 50)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;\n     * @param {String} opts.email Filter the report for a specific email addresses\n     * @param {module:model/String} opts.event Filter the report for a specific event type\n     * @param {String} opts.tags Filter the report for tags (serialized and urlencoded array)\n     * @param {String} opts.messageId Filter on a specific message id\n     * @param {Number} opts.templateId Filter on a specific template id\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEmailEventReport} and HTTP response\n     */\n    this.getEmailEventReportWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'days': opts['days'],\n        'email': opts['email'],\n        'event': opts['event'],\n        'tags': opts['tags'],\n        'messageId': opts['messageId'],\n        'templateId': opts['templateId'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetEmailEventReport;\n\n      return this.apiClient.callApi(\n        '/smtp/statistics/events', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all your transactional email activity (unaggregated events)\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number limitation for the result returned (default to 50)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;\n     * @param {String} opts.email Filter the report for a specific email addresses\n     * @param {module:model/String} opts.event Filter the report for a specific event type\n     * @param {String} opts.tags Filter the report for tags (serialized and urlencoded array)\n     * @param {String} opts.messageId Filter on a specific message id\n     * @param {Number} opts.templateId Filter on a specific template id\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEmailEventReport}\n     */\n    this.getEmailEventReport = function(opts) {\n      return this.getEmailEventReportWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get your transactional email activity aggregated per day\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents returned per page (default to 10)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;\n     * @param {String} opts.tag Tag of the emails\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetReports} and HTTP response\n     */\n    this.getSmtpReportWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'days': opts['days'],\n        'tag': opts['tag'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetReports;\n\n      return this.apiClient.callApi(\n        '/smtp/statistics/reports', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get your transactional email activity aggregated per day\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents returned per page (default to 10)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;\n     * @param {String} opts.tag Tag of the emails\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetReports}\n     */\n    this.getSmtpReport = function(opts) {\n      return this.getSmtpReportWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Returns the template information\n     * @param {Number} templateId id of the template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmtpTemplateOverview} and HTTP response\n     */\n    this.getSmtpTemplateWithHttpInfo = function(templateId) {\n      var postBody = null;\n\n      // verify the required parameter 'templateId' is set\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling getSmtpTemplate\");\n      }\n\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmtpTemplateOverview;\n\n      return this.apiClient.callApi(\n        '/smtp/templates/{templateId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Returns the template information\n     * @param {Number} templateId id of the template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmtpTemplateOverview}\n     */\n    this.getSmtpTemplate = function(templateId) {\n      return this.getSmtpTemplateWithHttpInfo(templateId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of email templates\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.templateStatus Filter on the status of the template. Active &#x3D; true, inactive &#x3D; false\n     * @param {Number} opts.limit Number of documents returned per page (default to 50)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmtpTemplates} and HTTP response\n     */\n    this.getSmtpTemplatesWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'templateStatus': opts['templateStatus'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmtpTemplates;\n\n      return this.apiClient.callApi(\n        '/smtp/templates', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of email templates\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.templateStatus Filter on the status of the template. Active &#x3D; true, inactive &#x3D; false\n     * @param {Number} opts.limit Number of documents returned per page (default to 50)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmtpTemplates}\n     */\n    this.getSmtpTemplates = function(opts) {\n      return this.getSmtpTemplatesWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of blocked or unsubscribed transactional contacts\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts\n     * @param {Number} opts.limit Number of documents returned per page (default to 50)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {Array.<String>} opts.senders Comma separated list of emails of the senders from which contacts are blocked or unsubscribed\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransacBlockedContacts} and HTTP response\n     */\n    this.getTransacBlockedContactsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n        'senders': {\n          value: opts['senders'],\n          collectionFormat: 'csv'\n        },\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetTransacBlockedContacts;\n\n      return this.apiClient.callApi(\n        '/smtp/blockedContacts', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of blocked or unsubscribed transactional contacts\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts\n     * @param {Number} opts.limit Number of documents returned per page (default to 50)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {Array.<String>} opts.senders Comma separated list of emails of the senders from which contacts are blocked or unsubscribed\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransacBlockedContacts}\n     */\n    this.getTransacBlockedContacts = function(opts) {\n      return this.getTransacBlockedContactsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the personalized content of a sent transactional email\n     * @param {String} uuid Unique id of the transactional email that has been sent to a particular contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransacEmailContent} and HTTP response\n     */\n    this.getTransacEmailContentWithHttpInfo = function(uuid) {\n      var postBody = null;\n\n      // verify the required parameter 'uuid' is set\n      if (uuid === undefined || uuid === null) {\n        throw new Error(\"Missing the required parameter 'uuid' when calling getTransacEmailContent\");\n      }\n\n\n      var pathParams = {\n        'uuid': uuid\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetTransacEmailContent;\n\n      return this.apiClient.callApi(\n        '/smtp/emails/{uuid}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the personalized content of a sent transactional email\n     * @param {String} uuid Unique id of the transactional email that has been sent to a particular contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransacEmailContent}\n     */\n    this.getTransacEmailContent = function(uuid) {\n      return this.getTransacEmailContentWithHttpInfo(uuid)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of transactional emails on the basis of allowed filters\n     * This endpoint will show the list of emails for past 30 days by default. To retrieve emails before that time, please pass startDate and endDate in query filters.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.email Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.\n     * @param {Number} opts.templateId Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.\n     * @param {String} opts.messageId Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransacEmailsList} and HTTP response\n     */\n    this.getTransacEmailsListWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'email': opts['email'],\n        'templateId': opts['templateId'],\n        'messageId': opts['messageId'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetTransacEmailsList;\n\n      return this.apiClient.callApi(\n        '/smtp/emails', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of transactional emails on the basis of allowed filters\n     * This endpoint will show the list of emails for past 30 days by default. To retrieve emails before that time, please pass startDate and endDate in query filters.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.email Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.\n     * @param {Number} opts.templateId Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.\n     * @param {String} opts.messageId Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransacEmailsList}\n     */\n    this.getTransacEmailsList = function(opts) {\n      return this.getTransacEmailsListWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send a template\n     * This endpoint is deprecated. Prefer v3/smtp/email instead.\n     * @param {Number} templateId Id of the template\n     * @param {module:model/SendEmail} sendEmail \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendTemplateEmail} and HTTP response\n     */\n    this.sendTemplateWithHttpInfo = function(templateId, sendEmail) {\n      var postBody = sendEmail;\n\n      // verify the required parameter 'templateId' is set\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling sendTemplate\");\n      }\n\n      // verify the required parameter 'sendEmail' is set\n      if (sendEmail === undefined || sendEmail === null) {\n        throw new Error(\"Missing the required parameter 'sendEmail' when calling sendTemplate\");\n      }\n\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = SendTemplateEmail;\n\n      return this.apiClient.callApi(\n        '/smtp/templates/{templateId}/send', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send a template\n     * This endpoint is deprecated. Prefer v3/smtp/email instead.\n     * @param {Number} templateId Id of the template\n     * @param {module:model/SendEmail} sendEmail \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendTemplateEmail}\n     */\n    this.sendTemplate = function(templateId, sendEmail) {\n      return this.sendTemplateWithHttpInfo(templateId, sendEmail)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send a template to your test list\n     * @param {Number} templateId Id of the template\n     * @param {module:model/SendTestEmail} sendTestEmail \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendTestTemplateWithHttpInfo = function(templateId, sendTestEmail) {\n      var postBody = sendTestEmail;\n\n      // verify the required parameter 'templateId' is set\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling sendTestTemplate\");\n      }\n\n      // verify the required parameter 'sendTestEmail' is set\n      if (sendTestEmail === undefined || sendTestEmail === null) {\n        throw new Error(\"Missing the required parameter 'sendTestEmail' when calling sendTestTemplate\");\n      }\n\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/templates/{templateId}/sendTest', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send a template to your test list\n     * @param {Number} templateId Id of the template\n     * @param {module:model/SendTestEmail} sendTestEmail \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendTestTemplate = function(templateId, sendTestEmail) {\n      return this.sendTestTemplateWithHttpInfo(templateId, sendTestEmail)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send a transactional email\n     * @param {module:model/SendSmtpEmail} sendSmtpEmail Values to send a transactional email\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSmtpEmail} and HTTP response\n     */\n    this.sendTransacEmailWithHttpInfo = function(sendSmtpEmail) {\n      var postBody = sendSmtpEmail;\n\n      // verify the required parameter 'sendSmtpEmail' is set\n      if (sendSmtpEmail === undefined || sendSmtpEmail === null) {\n        throw new Error(\"Missing the required parameter 'sendSmtpEmail' when calling sendTransacEmail\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateSmtpEmail;\n\n      return this.apiClient.callApi(\n        '/smtp/email', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send a transactional email\n     * @param {module:model/SendSmtpEmail} sendSmtpEmail Values to send a transactional email\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSmtpEmail}\n     */\n    this.sendTransacEmail = function(sendSmtpEmail) {\n      return this.sendTransacEmailWithHttpInfo(sendSmtpEmail)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Unblock or resubscribe a transactional contact\n     * @param {String} email contact email (urlencoded) to unblock.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.smtpBlockedContactsEmailDeleteWithHttpInfo = function(email) {\n      var postBody = null;\n\n      // verify the required parameter 'email' is set\n      if (email === undefined || email === null) {\n        throw new Error(\"Missing the required parameter 'email' when calling smtpBlockedContactsEmailDelete\");\n      }\n\n\n      var pathParams = {\n        'email': email\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/blockedContacts/{email}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Unblock or resubscribe a transactional contact\n     * @param {String} email contact email (urlencoded) to unblock.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.smtpBlockedContactsEmailDelete = function(email) {\n      return this.smtpBlockedContactsEmailDeleteWithHttpInfo(email)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an SMTP transactional log\n     * @param {String} messageId MessageId of the transactional log to delete\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.smtpLogMessageIdDeleteWithHttpInfo = function(messageId) {\n      var postBody = null;\n\n      // verify the required parameter 'messageId' is set\n      if (messageId === undefined || messageId === null) {\n        throw new Error(\"Missing the required parameter 'messageId' when calling smtpLogMessageIdDelete\");\n      }\n\n\n      var pathParams = {\n        'messageId': messageId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/log/{messageId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an SMTP transactional log\n     * @param {String} messageId MessageId of the transactional log to delete\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.smtpLogMessageIdDelete = function(messageId) {\n      return this.smtpLogMessageIdDeleteWithHttpInfo(messageId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update an email template\n     * @param {Number} templateId id of the template\n     * @param {module:model/UpdateSmtpTemplate} smtpTemplate values to update in transactional email template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateSmtpTemplateWithHttpInfo = function(templateId, smtpTemplate) {\n      var postBody = smtpTemplate;\n\n      // verify the required parameter 'templateId' is set\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling updateSmtpTemplate\");\n      }\n\n      // verify the required parameter 'smtpTemplate' is set\n      if (smtpTemplate === undefined || smtpTemplate === null) {\n        throw new Error(\"Missing the required parameter 'smtpTemplate' when calling updateSmtpTemplate\");\n      }\n\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/templates/{templateId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update an email template\n     * @param {Number} templateId id of the template\n     * @param {module:model/UpdateSmtpTemplate} smtpTemplate values to update in transactional email template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateSmtpTemplate = function(templateId, smtpTemplate) {\n      return this.updateSmtpTemplateWithHttpInfo(templateId, smtpTemplate)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"]},"metadata":{},"sourceType":"script"}
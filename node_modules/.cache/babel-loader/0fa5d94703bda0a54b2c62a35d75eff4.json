{"ast":null,"code":"/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/CreateSender', 'model/CreateSenderModel', 'model/ErrorModel', 'model/GetIps', 'model/GetIpsFromSender', 'model/GetSendersList', 'model/UpdateSender'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/CreateSender'), require('../model/CreateSenderModel'), require('../model/ErrorModel'), require('../model/GetIps'), require('../model/GetIpsFromSender'), require('../model/GetSendersList'), require('../model/UpdateSender'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n\n    root.SibApiV3Sdk.SendersApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateSender, root.SibApiV3Sdk.CreateSenderModel, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetIps, root.SibApiV3Sdk.GetIpsFromSender, root.SibApiV3Sdk.GetSendersList, root.SibApiV3Sdk.UpdateSender);\n  }\n})(this, function (ApiClient, CreateSender, CreateSenderModel, ErrorModel, GetIps, GetIpsFromSender, GetSendersList, UpdateSender) {\n  'use strict';\n  /**\n   * Senders service.\n   * @module api/SendersApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new SendersApi. \n   * @alias module:api/SendersApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n\n  var exports = function (apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n    /**\n     * Create a new sender\n     * @param {Object} opts Optional parameters\n     * @param {module:model/CreateSender} opts.sender sender&#39;s name\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSenderModel} and HTTP response\n     */\n\n    this.createSenderWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = opts['sender'];\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateSenderModel;\n      return this.apiClient.callApi('/senders', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Create a new sender\n     * @param {Object} opts Optional parameters\n     * @param {module:model/CreateSender} opts.sender sender&#39;s name\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSenderModel}\n     */\n\n\n    this.createSender = function (opts) {\n      return this.createSenderWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete a sender\n     * @param {Number} senderId Id of the sender\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteSenderWithHttpInfo = function (senderId) {\n      var postBody = null; // verify the required parameter 'senderId' is set\n\n      if (senderId === undefined || senderId === null) {\n        throw new Error(\"Missing the required parameter 'senderId' when calling deleteSender\");\n      }\n\n      var pathParams = {\n        'senderId': senderId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/senders/{senderId}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete a sender\n     * @param {Number} senderId Id of the sender\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteSender = function (senderId) {\n      return this.deleteSenderWithHttpInfo(senderId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get all the dedicated IPs for your account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetIps} and HTTP response\n     */\n\n\n    this.getIpsWithHttpInfo = function () {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetIps;\n      return this.apiClient.callApi('/senders/ips', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get all the dedicated IPs for your account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetIps}\n     */\n\n\n    this.getIps = function () {\n      return this.getIpsWithHttpInfo().then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get all the dedicated IPs for a sender\n     * @param {Number} senderId Id of the sender\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetIpsFromSender} and HTTP response\n     */\n\n\n    this.getIpsFromSenderWithHttpInfo = function (senderId) {\n      var postBody = null; // verify the required parameter 'senderId' is set\n\n      if (senderId === undefined || senderId === null) {\n        throw new Error(\"Missing the required parameter 'senderId' when calling getIpsFromSender\");\n      }\n\n      var pathParams = {\n        'senderId': senderId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetIpsFromSender;\n      return this.apiClient.callApi('/senders/{senderId}/ips', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get all the dedicated IPs for a sender\n     * @param {Number} senderId Id of the sender\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetIpsFromSender}\n     */\n\n\n    this.getIpsFromSender = function (senderId) {\n      return this.getIpsFromSenderWithHttpInfo(senderId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get the list of all your senders\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.ip Filter your senders for a specific ip (available for dedicated IP usage only)\n     * @param {String} opts.domain Filter your senders for a specific domain\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSendersList} and HTTP response\n     */\n\n\n    this.getSendersWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'ip': opts['ip'],\n        'domain': opts['domain']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSendersList;\n      return this.apiClient.callApi('/senders', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get the list of all your senders\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.ip Filter your senders for a specific ip (available for dedicated IP usage only)\n     * @param {String} opts.domain Filter your senders for a specific domain\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSendersList}\n     */\n\n\n    this.getSenders = function (opts) {\n      return this.getSendersWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update a sender\n     * @param {Number} senderId Id of the sender\n     * @param {Object} opts Optional parameters\n     * @param {module:model/UpdateSender} opts.sender sender&#39;s name\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateSenderWithHttpInfo = function (senderId, opts) {\n      opts = opts || {};\n      var postBody = opts['sender']; // verify the required parameter 'senderId' is set\n\n      if (senderId === undefined || senderId === null) {\n        throw new Error(\"Missing the required parameter 'senderId' when calling updateSender\");\n      }\n\n      var pathParams = {\n        'senderId': senderId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/senders/{senderId}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update a sender\n     * @param {Number} senderId Id of the sender\n     * @param {Object} opts Optional parameters\n     * @param {module:model/UpdateSender} opts.sender sender&#39;s name\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateSender = function (senderId, opts) {\n      return this.updateSenderWithHttpInfo(senderId, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n  };\n\n  return exports;\n});","map":{"version":3,"sources":["/Users/bonnieclyde/Desktop/Nivid/node_modules/sib-api-v3-sdk/src/api/SendersApi.js"],"names":["root","factory","define","amd","module","exports","require","SibApiV3Sdk","SendersApi","ApiClient","CreateSender","CreateSenderModel","ErrorModel","GetIps","GetIpsFromSender","GetSendersList","UpdateSender","apiClient","instance","createSenderWithHttpInfo","opts","postBody","pathParams","queryParams","collectionQueryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","createSender","then","response_and_data","data","deleteSenderWithHttpInfo","senderId","undefined","Error","deleteSender","getIpsWithHttpInfo","getIps","getIpsFromSenderWithHttpInfo","getIpsFromSender","getSendersWithHttpInfo","getSenders","updateSenderWithHttpInfo","updateSender"],"mappings":"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","sourcesContent":["/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/CreateSender', 'model/CreateSenderModel', 'model/ErrorModel', 'model/GetIps', 'model/GetIpsFromSender', 'model/GetSendersList', 'model/UpdateSender'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/CreateSender'), require('../model/CreateSenderModel'), require('../model/ErrorModel'), require('../model/GetIps'), require('../model/GetIpsFromSender'), require('../model/GetSendersList'), require('../model/UpdateSender'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.SendersApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateSender, root.SibApiV3Sdk.CreateSenderModel, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetIps, root.SibApiV3Sdk.GetIpsFromSender, root.SibApiV3Sdk.GetSendersList, root.SibApiV3Sdk.UpdateSender);\n  }\n}(this, function(ApiClient, CreateSender, CreateSenderModel, ErrorModel, GetIps, GetIpsFromSender, GetSendersList, UpdateSender) {\n  'use strict';\n\n  /**\n   * Senders service.\n   * @module api/SendersApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new SendersApi. \n   * @alias module:api/SendersApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Create a new sender\n     * @param {Object} opts Optional parameters\n     * @param {module:model/CreateSender} opts.sender sender&#39;s name\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSenderModel} and HTTP response\n     */\n    this.createSenderWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = opts['sender'];\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateSenderModel;\n\n      return this.apiClient.callApi(\n        '/senders', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a new sender\n     * @param {Object} opts Optional parameters\n     * @param {module:model/CreateSender} opts.sender sender&#39;s name\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSenderModel}\n     */\n    this.createSender = function(opts) {\n      return this.createSenderWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a sender\n     * @param {Number} senderId Id of the sender\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteSenderWithHttpInfo = function(senderId) {\n      var postBody = null;\n\n      // verify the required parameter 'senderId' is set\n      if (senderId === undefined || senderId === null) {\n        throw new Error(\"Missing the required parameter 'senderId' when calling deleteSender\");\n      }\n\n\n      var pathParams = {\n        'senderId': senderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/senders/{senderId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a sender\n     * @param {Number} senderId Id of the sender\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteSender = function(senderId) {\n      return this.deleteSenderWithHttpInfo(senderId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all the dedicated IPs for your account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetIps} and HTTP response\n     */\n    this.getIpsWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetIps;\n\n      return this.apiClient.callApi(\n        '/senders/ips', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all the dedicated IPs for your account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetIps}\n     */\n    this.getIps = function() {\n      return this.getIpsWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all the dedicated IPs for a sender\n     * @param {Number} senderId Id of the sender\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetIpsFromSender} and HTTP response\n     */\n    this.getIpsFromSenderWithHttpInfo = function(senderId) {\n      var postBody = null;\n\n      // verify the required parameter 'senderId' is set\n      if (senderId === undefined || senderId === null) {\n        throw new Error(\"Missing the required parameter 'senderId' when calling getIpsFromSender\");\n      }\n\n\n      var pathParams = {\n        'senderId': senderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetIpsFromSender;\n\n      return this.apiClient.callApi(\n        '/senders/{senderId}/ips', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all the dedicated IPs for a sender\n     * @param {Number} senderId Id of the sender\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetIpsFromSender}\n     */\n    this.getIpsFromSender = function(senderId) {\n      return this.getIpsFromSenderWithHttpInfo(senderId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of all your senders\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.ip Filter your senders for a specific ip (available for dedicated IP usage only)\n     * @param {String} opts.domain Filter your senders for a specific domain\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSendersList} and HTTP response\n     */\n    this.getSendersWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'ip': opts['ip'],\n        'domain': opts['domain'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSendersList;\n\n      return this.apiClient.callApi(\n        '/senders', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of all your senders\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.ip Filter your senders for a specific ip (available for dedicated IP usage only)\n     * @param {String} opts.domain Filter your senders for a specific domain\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSendersList}\n     */\n    this.getSenders = function(opts) {\n      return this.getSendersWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a sender\n     * @param {Number} senderId Id of the sender\n     * @param {Object} opts Optional parameters\n     * @param {module:model/UpdateSender} opts.sender sender&#39;s name\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateSenderWithHttpInfo = function(senderId, opts) {\n      opts = opts || {};\n      var postBody = opts['sender'];\n\n      // verify the required parameter 'senderId' is set\n      if (senderId === undefined || senderId === null) {\n        throw new Error(\"Missing the required parameter 'senderId' when calling updateSender\");\n      }\n\n\n      var pathParams = {\n        'senderId': senderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/senders/{senderId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a sender\n     * @param {Number} senderId Id of the sender\n     * @param {Object} opts Optional parameters\n     * @param {module:model/UpdateSender} opts.sender sender&#39;s name\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateSender = function(senderId, opts) {\n      return this.updateSenderWithHttpInfo(senderId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/AddContactToList', 'model/CreateList', 'model/CreateModel', 'model/ErrorModel', 'model/GetContacts', 'model/GetExtendedList', 'model/GetFolderLists', 'model/GetLists', 'model/PostContactInfo', 'model/RemoveContactFromList', 'model/UpdateList'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/AddContactToList'), require('../model/CreateList'), require('../model/CreateModel'), require('../model/ErrorModel'), require('../model/GetContacts'), require('../model/GetExtendedList'), require('../model/GetFolderLists'), require('../model/GetLists'), require('../model/PostContactInfo'), require('../model/RemoveContactFromList'), require('../model/UpdateList'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n\n    root.SibApiV3Sdk.ListsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AddContactToList, root.SibApiV3Sdk.CreateList, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetContacts, root.SibApiV3Sdk.GetExtendedList, root.SibApiV3Sdk.GetFolderLists, root.SibApiV3Sdk.GetLists, root.SibApiV3Sdk.PostContactInfo, root.SibApiV3Sdk.RemoveContactFromList, root.SibApiV3Sdk.UpdateList);\n  }\n})(this, function (ApiClient, AddContactToList, CreateList, CreateModel, ErrorModel, GetContacts, GetExtendedList, GetFolderLists, GetLists, PostContactInfo, RemoveContactFromList, UpdateList) {\n  'use strict';\n  /**\n   * Lists service.\n   * @module api/ListsApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new ListsApi. \n   * @alias module:api/ListsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n\n  var exports = function exports(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n    /**\n     * Add existing contacts to a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/AddContactToList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostContactInfo} and HTTP response\n     */\n\n    this.addContactToListWithHttpInfo = function (listId, contactEmails) {\n      var postBody = contactEmails; // verify the required parameter 'listId' is set\n\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling addContactToList\");\n      } // verify the required parameter 'contactEmails' is set\n\n\n      if (contactEmails === undefined || contactEmails === null) {\n        throw new Error(\"Missing the required parameter 'contactEmails' when calling addContactToList\");\n      }\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = PostContactInfo;\n      return this.apiClient.callApi('/contacts/lists/{listId}/contacts/add', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Add existing contacts to a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/AddContactToList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostContactInfo}\n     */\n\n\n    this.addContactToList = function (listId, contactEmails) {\n      return this.addContactToListWithHttpInfo(listId, contactEmails).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Create a list\n     * @param {module:model/CreateList} createList Values to create a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n\n\n    this.createListWithHttpInfo = function (createList) {\n      var postBody = createList; // verify the required parameter 'createList' is set\n\n      if (createList === undefined || createList === null) {\n        throw new Error(\"Missing the required parameter 'createList' when calling createList\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n      return this.apiClient.callApi('/contacts/lists', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Create a list\n     * @param {module:model/CreateList} createList Values to create a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n\n\n    this.createList = function (createList) {\n      return this.createListWithHttpInfo(createList).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete a list\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteListWithHttpInfo = function (listId) {\n      var postBody = null; // verify the required parameter 'listId' is set\n\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling deleteList\");\n      }\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/lists/{listId}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete a list\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteList = function (listId) {\n      return this.deleteListWithHttpInfo(listId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get contacts in a list\n     * @param {Number} listId Id of the list\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetContacts} and HTTP response\n     */\n\n\n    this.getContactsFromListWithHttpInfo = function (listId, opts) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'listId' is set\n\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling getContactsFromList\");\n      }\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n        'modifiedSince': opts['modifiedSince'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetContacts;\n      return this.apiClient.callApi('/contacts/lists/{listId}/contacts', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get contacts in a list\n     * @param {Number} listId Id of the list\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetContacts}\n     */\n\n\n    this.getContactsFromList = function (listId, opts) {\n      return this.getContactsFromListWithHttpInfo(listId, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolderLists} and HTTP response\n     */\n\n\n    this.getFolderListsWithHttpInfo = function (folderId, opts) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'folderId' is set\n\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling getFolderLists\");\n      }\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolderLists;\n      return this.apiClient.callApi('/contacts/folders/{folderId}/lists', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolderLists}\n     */\n\n\n    this.getFolderLists = function (folderId, opts) {\n      return this.getFolderListsWithHttpInfo(folderId, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get a list&#39;s details\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExtendedList} and HTTP response\n     */\n\n\n    this.getListWithHttpInfo = function (listId) {\n      var postBody = null; // verify the required parameter 'listId' is set\n\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling getList\");\n      }\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetExtendedList;\n      return this.apiClient.callApi('/contacts/lists/{listId}', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get a list&#39;s details\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExtendedList}\n     */\n\n\n    this.getList = function (listId) {\n      return this.getListWithHttpInfo(listId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get all the lists\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetLists} and HTTP response\n     */\n\n\n    this.getListsWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetLists;\n      return this.apiClient.callApi('/contacts/lists', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get all the lists\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetLists}\n     */\n\n\n    this.getLists = function (opts) {\n      return this.getListsWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete a contact from a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/RemoveContactFromList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostContactInfo} and HTTP response\n     */\n\n\n    this.removeContactFromListWithHttpInfo = function (listId, contactEmails) {\n      var postBody = contactEmails; // verify the required parameter 'listId' is set\n\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling removeContactFromList\");\n      } // verify the required parameter 'contactEmails' is set\n\n\n      if (contactEmails === undefined || contactEmails === null) {\n        throw new Error(\"Missing the required parameter 'contactEmails' when calling removeContactFromList\");\n      }\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = PostContactInfo;\n      return this.apiClient.callApi('/contacts/lists/{listId}/contacts/remove', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete a contact from a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/RemoveContactFromList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostContactInfo}\n     */\n\n\n    this.removeContactFromList = function (listId, contactEmails) {\n      return this.removeContactFromListWithHttpInfo(listId, contactEmails).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/UpdateList} updateList Values to update a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateListWithHttpInfo = function (listId, updateList) {\n      var postBody = updateList; // verify the required parameter 'listId' is set\n\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling updateList\");\n      } // verify the required parameter 'updateList' is set\n\n\n      if (updateList === undefined || updateList === null) {\n        throw new Error(\"Missing the required parameter 'updateList' when calling updateList\");\n      }\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/lists/{listId}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/UpdateList} updateList Values to update a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateList = function (listId, updateList) {\n      return this.updateListWithHttpInfo(listId, updateList).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n  };\n\n  return exports;\n});","map":{"version":3,"sources":["F:/My Project/Leo/Nivid/node_modules/sib-api-v3-sdk/src/api/ListsApi.js"],"names":["root","factory","define","amd","module","exports","require","SibApiV3Sdk","ListsApi","ApiClient","AddContactToList","CreateList","CreateModel","ErrorModel","GetContacts","GetExtendedList","GetFolderLists","GetLists","PostContactInfo","RemoveContactFromList","UpdateList","apiClient","instance","addContactToListWithHttpInfo","listId","contactEmails","postBody","undefined","Error","pathParams","queryParams","collectionQueryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","addContactToList","then","response_and_data","data","createListWithHttpInfo","createList","deleteListWithHttpInfo","deleteList","getContactsFromListWithHttpInfo","opts","getContactsFromList","getFolderListsWithHttpInfo","folderId","getFolderLists","getListWithHttpInfo","getList","getListsWithHttpInfo","getLists","removeContactFromListWithHttpInfo","removeContactFromList","updateListWithHttpInfo","updateList"],"mappings":"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","sourcesContent":["/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/AddContactToList', 'model/CreateList', 'model/CreateModel', 'model/ErrorModel', 'model/GetContacts', 'model/GetExtendedList', 'model/GetFolderLists', 'model/GetLists', 'model/PostContactInfo', 'model/RemoveContactFromList', 'model/UpdateList'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/AddContactToList'), require('../model/CreateList'), require('../model/CreateModel'), require('../model/ErrorModel'), require('../model/GetContacts'), require('../model/GetExtendedList'), require('../model/GetFolderLists'), require('../model/GetLists'), require('../model/PostContactInfo'), require('../model/RemoveContactFromList'), require('../model/UpdateList'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.ListsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AddContactToList, root.SibApiV3Sdk.CreateList, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetContacts, root.SibApiV3Sdk.GetExtendedList, root.SibApiV3Sdk.GetFolderLists, root.SibApiV3Sdk.GetLists, root.SibApiV3Sdk.PostContactInfo, root.SibApiV3Sdk.RemoveContactFromList, root.SibApiV3Sdk.UpdateList);\n  }\n}(this, function(ApiClient, AddContactToList, CreateList, CreateModel, ErrorModel, GetContacts, GetExtendedList, GetFolderLists, GetLists, PostContactInfo, RemoveContactFromList, UpdateList) {\n  'use strict';\n\n  /**\n   * Lists service.\n   * @module api/ListsApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new ListsApi. \n   * @alias module:api/ListsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Add existing contacts to a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/AddContactToList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostContactInfo} and HTTP response\n     */\n    this.addContactToListWithHttpInfo = function(listId, contactEmails) {\n      var postBody = contactEmails;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling addContactToList\");\n      }\n\n      // verify the required parameter 'contactEmails' is set\n      if (contactEmails === undefined || contactEmails === null) {\n        throw new Error(\"Missing the required parameter 'contactEmails' when calling addContactToList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = PostContactInfo;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}/contacts/add', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Add existing contacts to a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/AddContactToList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostContactInfo}\n     */\n    this.addContactToList = function(listId, contactEmails) {\n      return this.addContactToListWithHttpInfo(listId, contactEmails)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a list\n     * @param {module:model/CreateList} createList Values to create a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createListWithHttpInfo = function(createList) {\n      var postBody = createList;\n\n      // verify the required parameter 'createList' is set\n      if (createList === undefined || createList === null) {\n        throw new Error(\"Missing the required parameter 'createList' when calling createList\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/contacts/lists', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a list\n     * @param {module:model/CreateList} createList Values to create a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createList = function(createList) {\n      return this.createListWithHttpInfo(createList)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a list\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteListWithHttpInfo = function(listId) {\n      var postBody = null;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling deleteList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a list\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteList = function(listId) {\n      return this.deleteListWithHttpInfo(listId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get contacts in a list\n     * @param {Number} listId Id of the list\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetContacts} and HTTP response\n     */\n    this.getContactsFromListWithHttpInfo = function(listId, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling getContactsFromList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n        'modifiedSince': opts['modifiedSince'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetContacts;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}/contacts', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get contacts in a list\n     * @param {Number} listId Id of the list\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetContacts}\n     */\n    this.getContactsFromList = function(listId, opts) {\n      return this.getContactsFromListWithHttpInfo(listId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolderLists} and HTTP response\n     */\n    this.getFolderListsWithHttpInfo = function(folderId, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling getFolderLists\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolderLists;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}/lists', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolderLists}\n     */\n    this.getFolderLists = function(folderId, opts) {\n      return this.getFolderListsWithHttpInfo(folderId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a list&#39;s details\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExtendedList} and HTTP response\n     */\n    this.getListWithHttpInfo = function(listId) {\n      var postBody = null;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling getList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetExtendedList;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a list&#39;s details\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExtendedList}\n     */\n    this.getList = function(listId) {\n      return this.getListWithHttpInfo(listId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all the lists\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetLists} and HTTP response\n     */\n    this.getListsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetLists;\n\n      return this.apiClient.callApi(\n        '/contacts/lists', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all the lists\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetLists}\n     */\n    this.getLists = function(opts) {\n      return this.getListsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a contact from a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/RemoveContactFromList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostContactInfo} and HTTP response\n     */\n    this.removeContactFromListWithHttpInfo = function(listId, contactEmails) {\n      var postBody = contactEmails;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling removeContactFromList\");\n      }\n\n      // verify the required parameter 'contactEmails' is set\n      if (contactEmails === undefined || contactEmails === null) {\n        throw new Error(\"Missing the required parameter 'contactEmails' when calling removeContactFromList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = PostContactInfo;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}/contacts/remove', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a contact from a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/RemoveContactFromList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostContactInfo}\n     */\n    this.removeContactFromList = function(listId, contactEmails) {\n      return this.removeContactFromListWithHttpInfo(listId, contactEmails)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/UpdateList} updateList Values to update a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateListWithHttpInfo = function(listId, updateList) {\n      var postBody = updateList;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling updateList\");\n      }\n\n      // verify the required parameter 'updateList' is set\n      if (updateList === undefined || updateList === null) {\n        throw new Error(\"Missing the required parameter 'updateList' when calling updateList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/UpdateList} updateList Values to update a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateList = function(listId, updateList) {\n      return this.updateListWithHttpInfo(listId, updateList)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bc/Desktop/New Nivid/Leo-Project/src/context/userContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect, useContext } from \"react\";\nimport firebase from \"firebase/app\";\nimport { useFirebase } from \"../assets/base-context\";\nimport publicIp from \"public-ip\";\nimport Stripe from \"stripe\";\nimport functions from \"firebase/firebase-functions\";\nimport { inputAdornmentClasses } from \"@mui/material\";\n\nvar SibApiV3Sdk = require(\"sib-api-v3-sdk\");\n\nvar defaultClient = SibApiV3Sdk.ApiClient.instance;\nlet myAPIKey = process.env.REACT_APP_SENDINBLUE_APIKEY;\nvar apiKey = defaultClient.authentications[\"api-key\"];\napiKey.apiKey = myAPIKey;\nvar partnerKey = defaultClient.authentications[\"partner-key\"];\npartnerKey.apiKey = process.env.REACT_APP_SENDINBLUE_APIKEY;\nvar apiInstance = new SibApiV3Sdk.ContactsApi();\nvar createContact = new SibApiV3Sdk.CreateContact();\nvar apiInstanceSend = new SibApiV3Sdk.TransactionalEmailsApi();\nvar sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail(); // Ce fichier comporte toutes les fonctions d'appels et de traitement bdd, et du context global.\n// Il englobe l'app dans App.js\n\nexport const UserContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n\n  return useContext(UserContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const UserProvider = ({\n  children\n}) => {\n  _s2();\n\n  const firebaseContext = useFirebase();\n  const auth = firebaseContext.auth();\n  const provider = firebaseContext.provider();\n  const storage = firebaseContext.storage();\n  const firestore = firebaseContext.firestore();\n  let datePlusYear = new Date();\n  datePlusYear.setFullYear(datePlusYear.getFullYear());\n  const initialEvent = {\n    name: \"\",\n    date: datePlusYear,\n    startAt: 0,\n    endAt: 86360,\n    people: 50,\n    placeSize: 250,\n    place: \"\",\n    latLng: [],\n    budget: 50,\n    budgetLeft: 0,\n    status: null,\n    id: null,\n    choosedServices: []\n  };\n  const initialSeller = {\n    companyName: \"\",\n    adress: \"\",\n    siret: \"\",\n    website: \"\",\n    firstName: \"\",\n    holiday: \"\",\n    lastName: \"\",\n    phone: \"\",\n    description: \"\",\n    category: \"\",\n    subcategory: \"\",\n    status: \"\",\n    image_path: \"\"\n  };\n  const [user, setUser] = useState();\n  const [seller, setSeller] = useState(initialSeller);\n  const [event, setEvent] = useState(initialEvent);\n  const [loading, setLoading] = useState(true);\n  const [currentStepProcess, setCurrentStepProcess] = useState(0);\n  const [loadingButtonAddToCard, setLoadingButtonAddToCard] = useState(true);\n  const refUsers = firestore.collection(\"users\");\n  const refEvents = firestore.collection(\"events\");\n  const refSellers = firestore.collection(\"sellers\");\n  const refSales = firestore.collection(\"sales\");\n  const [homeSellersDisplay, setHomeSellersDisplay] = useState([]);\n  const [isCardWidgetOpen, setIsCardWidgetOpen] = useState(false);\n  const createStripeCheckout = user ? firebase.functions().httpsCallable(\"createStripeCheckout\") : null;\n  const createStripeSubscribe = firebase.functions().httpsCallable(\"createStripeSubscribe\");\n  const stripe = user || seller ? window.Stripe(\"pk_test_51InLbZBwyEuW61Pj3yTYQlp31JobhK9vIKh32GColDUhXcdtzaKhWF5mVRDa9SGw7HujSuEDPCwvh40GEuo6uJxA00iqmaUXQp\") : null;\n  const checkStripeReturn = user || seller ? firebase.functions().httpsCallable(\"checkStripeReturn\") : null;\n  useEffect(() => {\n    auth.onAuthStateChanged(data => {\n      return handleAuthChanged(data);\n    });\n  }, []);\n\n  async function handleAuthChanged(data) {\n    if (data) {\n      const isSeller = await isThisUserSeller(data.uid);\n      const isUser = await isThisUserUser(data.uid);\n\n      if (isSeller && !isUser) {\n        const sellerData = await getSellerDataFromDB(data.uid);\n        const sellerServices = await getServicesOfCurrentSellerFromDB();\n        setSeller({ ...initialSeller,\n          ...data,\n          ...sellerData,\n          services: sellerServices\n        });\n        setUser();\n        setLoading(false);\n      } else if (isUser && !isSeller) {\n        if (data.emailVerified === false) {\n          setUser();\n          setSeller();\n          setLoading(false);\n          return;\n        }\n\n        setUser(data);\n        setSeller();\n        const eventData = await getEvent(data.uid);\n        eventData && eventData !== null ? await getChoosedServices(eventData) : setEvent(initialEvent);\n        setLoading(false);\n      } else if (isSeller && isUser) {\n        const sellerData = await getSellerDataFromDB(data.uid);\n        setSeller({ ...initialSeller,\n          ...data,\n          ...sellerData\n        });\n        setUser(data);\n        const eventData = await getEvent(data.uid);\n        eventData && eventData !== null ? await getChoosedServices(eventData) : setEvent(initialEvent);\n        setLoading(false);\n      }\n    } else {\n      setSeller();\n      setUser();\n      setLoading(false);\n    }\n  }\n\n  async function getSellerDataFromDB(id) {\n    const query = await refSellers.doc(id).get();\n    const result = query.data();\n    return result;\n  }\n\n  async function isThisUserSeller(id) {\n    const doc = await refSellers.doc(id).get();\n    if (doc.exists) return true;\n    return false;\n  }\n\n  async function isThisUserUser(id) {\n    const doc = await refUsers.doc(id).get();\n    if (doc.exists) return true;\n    return false;\n  }\n\n  async function getEvent(uid) {\n    const getEvent = await refEvents.where(\"user\", \"==\", uid).get();\n\n    if (getEvent.docs.length > 0) {\n      let item = {};\n      getEvent.docs.forEach(doc => {\n        const data = doc.data();\n\n        if (data.status && data.status !== \"passed\") {\n          item = { ...data\n          };\n          item.date = data.date.toMillis();\n          item.id = doc.id;\n        }\n      });\n      return item && item.status && item.status !== \"passed\" ? item : null;\n    } else {\n      return null;\n    }\n  }\n\n  async function addEvent(item) {\n    const myEvent = { ...item\n    };\n    delete myEvent.id;\n    let myNewEvent;\n\n    if (item.status !== \"creating\") {\n      myNewEvent = await createEvent(myEvent);\n    }\n\n    if (item.status === \"creating\") {\n      // event existant\n      myNewEvent = await updateEvent(item, myEvent);\n    }\n\n    await getChoosedServices(myNewEvent);\n  }\n\n  async function createEvent(myEvent) {\n    const req = await refUsers.doc(myEvent.user).get();\n    const res = req.data();\n    var identifier = res.email;\n    var updateContact = {\n      attributes: {\n        NOTIF_DATE: new Date(myEvent.date),\n        EVENTID: event.id\n      }\n    };\n    apiInstance.updateContact(identifier, updateContact).then(() => {}, error => {\n      console.error(error);\n    });\n    myEvent.status = \"creating\";\n    const docRef = await refEvents.add({ ...myEvent,\n      date: new Date(myEvent.date)\n    });\n    myEvent.id = docRef.id;\n    return myEvent;\n  }\n\n  async function updateEvent(item, myEvent) {\n    if (item.place !== event.place) {\n      const getServices = await refEvents.doc(item.id).collection(\"services\").get();\n      getServices.docs.forEach(async doc => {\n        await refEvents.doc(item.id).collection(\"services\").doc(doc.id).delete();\n      });\n    }\n\n    await refEvents.doc(item.id).update({ ...myEvent,\n      date: new Date(myEvent.date)\n    });\n    myEvent.id = item.id;\n    return myEvent;\n  }\n\n  async function getBudgetLeft(budget, choosedServices) {\n    let totalPrice = 0;\n    choosedServices.forEach(item => {\n      if (item.variations && item.variations.length > 0) {\n        totalPrice += item.variations.filter(vari => vari.name === item.variation)[0].price * item.quantity;\n      } else totalPrice += item.price * item.quantity;\n    });\n    const result = budget - totalPrice;\n    return result;\n  }\n\n  async function getChoosedServices(item) {\n    let choosedServices = [];\n    const services = await refEvents.doc(item.id).collection(\"services\").get();\n    services.forEach(doc => {\n      choosedServices.push({ ...doc.data(),\n        uid: doc.id\n      });\n    });\n    const queryPrice = await getBudgetLeft(item.budget, choosedServices);\n    const neWObject = { ...item,\n      budgetLeft: queryPrice,\n      choosedServices: choosedServices\n    };\n    return setEvent(neWObject);\n  }\n\n  async function login(email, password) {\n    return await auth.signInWithEmailAndPassword(email, password).then(data => {\n      if (data.user.emailVerified === false) {\n        setSeller();\n        setUser();\n        return false;\n      }\n\n      setUser(data.user);\n      return true;\n    });\n  }\n\n  async function verifyLogin(email, password) {\n    const data = await auth.signInWithEmailAndPassword(email, password);\n    return data;\n  }\n\n  async function subscribe(email, password, firstName, name, tel, gender, birthDate) {\n    return auth.createUserWithEmailAndPassword(email, password).then(async userData => {\n      await userData.user.updateProfile({\n        displayName: firstName\n      });\n      await refUsers.doc(userData.user.uid).set({\n        firstName: firstName,\n        name: name,\n        tel: tel,\n        gender: gender,\n        birthDate: birthDate,\n        email: email\n      }).catch(error => {\n        return console.log(error);\n      });\n      userData.user.sendEmailVerification();\n      setUser();\n      setSeller();\n      sendInBlue_addContactSubscribe(email, firstName);\n      return true;\n    }).catch(error => {\n      return error.code;\n    });\n  }\n\n  async function sellerSubscribe(companyName, adress, siret, website, firstName, holiday, lastName, email, phone, password, latLng, referral) {\n    const referralToken = Date.now().toString().substr(0, 5) + Math.random().toString().substr(2, 7);\n    return auth.createUserWithEmailAndPassword(email, password).then(async userData => {\n      await userData.user.updateProfile({\n        displayName: firstName\n      });\n      await refSellers.doc(userData.user.uid).set({\n        companyName: companyName,\n        adress: adress,\n        latLng: latLng,\n        siret: siret,\n        website: website,\n        firstName: firstName,\n        holiday: [],\n        lastName: lastName,\n        phone: phone,\n        email: email,\n        image_path: \"\",\n        status: \"subscribing\",\n        referralToken: referralToken,\n        referral: referral\n      }).catch(error => {\n        return console.log(error);\n      });\n\n      if (referral.length === 12) {\n        await updateSellerAfterReferralNewSeller(referral, userData.user.uid);\n        sendInBlue_sendToParrainAboutNewReferral(referral);\n      }\n\n      sendInBlue_addContactSubscribe(email, firstName, lastName, userData.user.uid);\n      setUser();\n      setSeller({\n        companyName: companyName,\n        adress: adress,\n        latLng: latLng,\n        siret: siret,\n        website: website,\n        firstName: firstName,\n        holiday: [],\n        lastName: lastName,\n        phone: phone,\n        email: email,\n        image_path: \"\",\n        status: \"subscribing\",\n        referralToken: referralToken,\n        referral: referral,\n        uid: userData.user.uid\n      });\n      userData.user.sendEmailVerification();\n      return true;\n    }).catch(error => {\n      return error.code;\n    });\n  }\n\n  async function saveHoliday(id, holi, year, month) {\n    await deleteHoliday(id, year, month);\n\n    for (let i = 0; i < holi.length; i++) {\n      refSellers.doc(id).update({\n        holiday: firebase.firestore.FieldValue.arrayUnion(holi[i])\n      }).catch(error => {\n        return console.log(error);\n      });\n    }\n\n    return true;\n  }\n\n  async function deleteHoliday(id, year, month) {\n    const selectMonth = await refSellers.doc(id).get();\n    const updateMonth = selectMonth.data().holiday;\n\n    if (updateMonth != undefined) {\n      for (let i = 0; i < updateMonth.length; i++) {\n        var monthArray = updateMonth[i].split('.');\n\n        if (monthArray[0] == year && monthArray[1] == month) {\n          updateMonth.splice(i, 1);\n          i--;\n        }\n      }\n\n      refSellers.doc(id).update({\n        holiday: updateMonth\n      }).catch(error => {\n        return console.log(error);\n      });\n    }\n  }\n\n  async function updateSellerAfterReferralNewSeller(referral, newSellerUid) {\n    const docs = await refSellers.where(\"referralToken\", \"==\", referral).get();\n    let docSeller = {};\n    docs.forEach(doc => {\n      docSeller = { ...doc.data(),\n        uid: doc.id\n      };\n    });\n\n    if (docSeller.uid !== undefined && docSeller.uid !== null && docSeller.uid.length > 10) {\n      refSellers.doc(docSeller.uid).collection(\"referral\").add({\n        newSeller: newSellerUid,\n        date: Date.now()\n      }).catch(error => {\n        return console.log(error);\n      });\n    }\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  async function signInWithGoogle() {\n    const result = await auth.signInWithPopup(provider);\n    /** @type {firebase.auth.OAuthCredential} */\n\n    var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n    var token = credential.accessToken; // The signed-in user info.\n\n    var user = result.user;\n    var doc = await refUsers.doc(user.uid).get();\n\n    if (doc.exists) {\n      setUser(auth.currentUser);\n    } else {\n      await refUsers.doc(user.uid).set({\n        firstName: user.displayName,\n        email: user.email\n      });\n      setUser(auth.currentUser);\n    }\n  } // Ajouter un service au panier ( BBD et state )\n\n\n  async function addToCard(sellerID, item, quantity) {\n    // Checkons si ce service est deja present dans la liste de cette event\n    const newEvent = { ...event\n    };\n    const refCurrentService = refEvents.doc(event.id).collection(\"services\");\n    const doc = await refCurrentService.where(\"id\", \"==\", item.id).where(\"variation\", \"==\", item.variation).get();\n    const refService = doc.exists && doc.data(); // Si le service existe dans les service séléctionnés pour cet event, on actualise juste en renseignant la nouvelle quantity ( BBD et state )\n\n    if (doc.docs.length > 0) {\n      await refCurrentService.doc(doc.docs[0].id).update({\n        quantity: quantity\n      }); //Ici on chope le service concerné dans le state, puis on le modifie pour ajouter la quantity, et on actualise le state\n\n      const services = [...event.choosedServices];\n      const service = services.find(service => service.variation === item.variation && service.id === item.id);\n      service.quantity = quantity;\n      newEvent.choosedServices = services;\n      getChoosedServices(newEvent);\n      setLoadingButtonAddToCard(false);\n    } // Mais si le service n'existe pas, on l'ajoute completement ( BBD et state )\n    else {\n        const itemCopy = { ...item\n        };\n        itemCopy.quantity = quantity;\n        const newService = [];\n        await refCurrentService.add(itemCopy);\n        newService.push(item);\n        newEvent.choosedServices.push(newService[0]);\n        getChoosedServices(newEvent);\n        setLoadingButtonAddToCard(false);\n      }\n\n    setIsCardWidgetOpen(true);\n  }\n\n  function getServiceQuantityInCard(id) {\n    const services = [...event.choosedServices];\n    const servicefiltered = services.filter(service => service.id === id);\n    let count = 0;\n    if (servicefiltered.length > 1) servicefiltered.forEach(service => count += service.quantity);else if (servicefiltered.length > 0) count += servicefiltered[0].quantity;\n    return count;\n  }\n\n  async function updateQuantityService(serviceID, quantity) {\n    if (quantity === undefined) return;\n    quantity = parseInt(quantity);\n\n    if (quantity !== 0) {\n      await refEvents.doc(event.id).collection(\"services\").doc(serviceID).update({\n        quantity: quantity\n      });\n    } else {\n      await refEvents.doc(event.id).collection(\"services\").doc(serviceID).delete();\n    }\n\n    const eventData = await getEvent(auth.currentUser.uid);\n    await getChoosedServices(eventData);\n    setLoading(false);\n    return;\n  }\n\n  function formatLabelTimePicker(secs) {\n    if (secs === 86400) secs = 86360;\n    var minutes = Math.floor(secs / 60);\n    var hours = Math.floor(minutes / 60);\n    minutes = minutes % 60;\n    return `${hours}:${(\"0\" + minutes).slice(-2)}`;\n  }\n\n  async function getAuthUserFromHisEmail(email) {\n    return auth.sendPasswordResetEmail(email).then(() => {\n      return true;\n    }).catch(function (error) {\n      if (error.code === \"auth/invalid-email\") {\n        return \"invalid\";\n      } else if (error.code === \"auth/user-not-found\") {\n        return \"notexist\";\n      }\n    });\n  }\n\n  async function updateUserEmail(email) {\n    var user = auth.currentUser;\n    await user.updateEmail(email);\n    await refUsers.doc(user.uid).update({\n      email: email\n    });\n    await user.sendEmailVerification();\n    return true;\n  }\n\n  async function getCurrentUserProfil() {\n    var uid = auth.currentUser.uid;\n    const doc = await refUsers.doc(uid).get();\n    return doc.exists ? doc.data() : null;\n  }\n\n  async function updateCurrentUserProfil(data) {\n    var uid = auth.currentUser.uid;\n    refUsers.doc(uid).update(data);\n    user.updateProfile({\n      displayName: data.firstName\n    });\n  }\n\n  async function setImageSellerDB(url, token) {\n    await refSellers.doc(auth.currentUser.uid).update({\n      image_path: {\n        url: url,\n        token: token\n      }\n    });\n  }\n\n  async function addSellerDescription(data, imgURL) {\n    await refSellers.doc(auth.currentUser.uid).update({\n      description: data.description,\n      category: data.category,\n      subcategory: data.subcategory\n    });\n    setSeller({ ...seller,\n      description: data.description,\n      category: data.category,\n      subcategory: data.subcategory,\n      image_path: imgURL !== null && imgURL\n    });\n  }\n\n  async function addSellerServices(services) {\n    setSeller({ ...seller,\n      services: services\n    });\n    services.forEach(async service => {\n      if (service.id.length > 2) {\n        return await refSellers.doc(auth.currentUser.uid).collection(\"services\").doc(service.id).update(service);\n      }\n\n      return await refSellers.doc(auth.currentUser.uid).collection(\"services\").add(service);\n    });\n  }\n\n  async function addOneSellerService(service) {\n    if (service.id.length > 2) {\n      return await refSellers.doc(auth.currentUser.uid).collection(\"services\").doc(service.id).update(service);\n    }\n\n    const docRef = await refSellers.doc(auth.currentUser.uid).collection(\"services\").add(service);\n    return docRef.id;\n  }\n\n  async function getServicesOfCurrentSellerFromDB() {\n    const services = await refSellers.doc(auth.currentUser.uid).collection(\"services\").get();\n    var result = [];\n    services.docs.forEach(doc => {\n      const newResult = { ...doc.data(),\n        id: doc.id\n      };\n      result.push(newResult);\n    });\n    return result;\n  }\n\n  async function addSellerDocuments(documents) {\n    return await refSellers.doc(auth.currentUser.uid).update({\n      documents: documents\n    });\n  }\n\n  async function getSellerDocumentsFromDB() {\n    const query = await refSellers.doc(auth.currentUser.uid).get();\n    const doc = query.data();\n    const result = doc.documents && doc.documents;\n    if (result === undefined) return null;\n    return result;\n  }\n\n  async function setSellerStatus(sellerId, status) {\n    await refSellers.doc(sellerId).update({\n      status: status\n    });\n    return setSeller({ ...seller,\n      status: status\n    });\n  }\n\n  async function updateSellerDocumentsStatus(sellerId, newDocumentsArray) {\n    await refSellers.doc(sellerId).update({\n      documents: newDocumentsArray\n    });\n    newDocumentsArray.status === \"rejected\" && (await refSellers.doc(sellerId).update({\n      status: \"subscribing\"\n    }));\n  }\n\n  async function getSellersInDbWithUids(ids) {\n    let sellers = [];\n\n    for (const id in ids) {\n      const req = await refSellers.doc(ids[id]).get();\n      let result = req.data();\n      result.uid = req.id;\n      sellers = [...sellers, result];\n\n      if (sellers.length === ids.length) {\n        return sellers;\n      }\n    }\n  } // TODO ICi on a la fonction pour delete la photo de profil qu'on ecrase en a remplaceant, faudra faire la meme avec les autres endroits du site avec uploda de picture\n\n\n  async function deleteOldSellerPicture(tokens, type) {\n    tokens.forEach(token => {\n      var imageRef = type && type === \"services\" ? storage.ref(\"services\").child(token) : storage.ref(\"sellers\").child(token);\n      imageRef.delete().catch(error => console.log(error));\n    });\n  }\n\n  async function addSalesInDB(sales) {\n    return sales.map(async sale => await refSales.add(sale));\n  }\n\n  async function getSalesOfEventIdFromDB(eventId) {\n    const req = await refSales.where(\"eventID\", \"==\", eventId).get();\n    let salesOfEvent = [];\n    req.forEach(doc => salesOfEvent.push(doc.data()));\n    return salesOfEvent;\n  }\n\n  async function getSalesOfSellerIdFromDB(sellerId) {\n    const req = await refSales.where(\"sellerID\", \"==\", sellerId).get();\n    let salesOfSeller = [];\n    req.forEach(doc => salesOfSeller.push(doc.data()));\n    return salesOfSeller;\n  }\n\n  async function updateEventStatus(status) {\n    await refEvents.doc(event.id).update({\n      status: status\n    });\n    return setEvent({ ...event,\n      status: status\n    });\n  }\n\n  async function clearEvent() {\n    setEvent(initialEvent);\n  }\n\n  async function getEventOfSaleFromDB(eventId) {\n    const req = await refEvents.doc(eventId).get();\n    let newEvent = req.data();\n    newEvent.choosedServices = [];\n    const reqServices = await refEvents.doc(eventId).collection(\"services\").get();\n    reqServices.forEach(doc => {\n      newEvent.choosedServices = [...newEvent.choosedServices, doc.data()];\n    });\n    return newEvent;\n  }\n\n  function formateToDate(timestamp) {\n    const date = new Date(timestamp);\n    const year = date.getUTCFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    return `${day}/${month < 10 ? \"0\" : \"\"}${month}/${year}`;\n  }\n\n  function formateToDateWithWords(timestamp) {\n    const date = new Date(timestamp.seconds ? timestamp.seconds * 1000 : timestamp);\n    const year = date.getUTCFullYear();\n    let month = date.getMonth() + 1;\n    const day = date.getDate();\n    month = month === 1 ? \"janv\" : month === 2 ? \"févr\" : month === 3 ? \"mars\" : month === 4 ? \"avril\" : month === 5 ? \"mai\" : month === 6 ? \"juin\" : month === 7 ? \"juil\" : month === 8 ? \"aout\" : month === 9 ? \"sept\" : month === 10 ? \"oct\" : month === 11 ? \"nov\" : month === 12 && \"déc\";\n    return `${day} ${month} ${year}`;\n  }\n\n  function formateToDateWithFullWords(timestamp) {\n    const date = new Date(timestamp);\n    const year = date.getUTCFullYear();\n    let month = date.getMonth() + 1;\n    const day = date.getDate();\n    month = month === 1 ? \"janvier\" : month === 2 ? \"février\" : month === 3 ? \"mars\" : month === 4 ? \"avril\" : month === 5 ? \"mai\" : month === 6 ? \"juin\" : month === 7 ? \"juillet\" : month === 8 ? \"aout\" : month === 9 ? \"septembre\" : month === 10 ? \"octobre\" : month === 11 ? \"novembre\" : month === 12 && \"décembre\";\n    return `${day} ${month} ${year}`;\n  }\n\n  async function updateSaleStatusInDB(saleID, sellerID, status) {\n    const req = await refSales.where(\"sellerID\", \"==\", sellerID).where(\"id\", \"==\", saleID).get();\n    let saleUID;\n    let userID;\n    let sale;\n    req.forEach(doc => {\n      sale = doc.data();\n      saleUID = doc.id;\n      userID = sale.userID;\n    });\n    const req2 = await refUsers.doc(userID).get();\n    const user = req2.data();\n    await refSales.doc(saleUID).update({\n      status\n    });\n    sendInBlue_sendNotificationToUserOfSaleStatus(user, seller.companyName, sale);\n  }\n\n  async function updateSaleNote(saleID, note) {\n    const req = await refSales.where(\"sellerID\", \"==\", auth.currentUser.uid).where(\"id\", \"==\", saleID).get();\n    let saleUID;\n    req.forEach(doc => saleUID = doc.id);\n    await refSales.doc(saleUID).update({\n      note\n    });\n    return;\n  }\n\n  function dateTodayMinusByDay(day) {\n    const date = new Date();\n    date.setHours(date.getHours() - 24 * day);\n    return date;\n  }\n\n  async function addViewsOfSeller(sellerID) {\n    const visitorIP = await publicIp.v4();\n    const reqViews = await refSellers.doc(sellerID).collection(\"views\").get();\n    let recentViews = [];\n    reqViews.forEach(async doc => {\n      const view = doc.data();\n\n      if (view.ip === visitorIP && view.date.seconds * 1000 > dateTodayMinusByDay(1)) {\n        recentViews = [...recentViews, view];\n      }\n    });\n\n    if (recentViews.length === 0) {\n      await refSellers.doc(sellerID).collection(\"views\").add({\n        date: new Date(Date.now()),\n        ip: visitorIP\n      });\n    }\n  }\n\n  async function getViewsOfSeller(sellerID) {\n    const reqViews = await refSellers.doc(sellerID).collection(\"views\").get();\n    let res = [];\n    reqViews.forEach(doc => res.push(doc.data()));\n    return res;\n  }\n\n  async function isSellerAllowedToModifyAndDeleteService(serviceID) {\n    const req = await refSales.where(\"sellerID\", \"==\", auth.currentUser.uid).get();\n    let sellerSales = [];\n    req.forEach(doc => sellerSales.push(doc.data()));\n    let isAllowed = true;\n    sellerSales.forEach(sale => {\n      if (sale.status !== \"passed\" && sale.status !== \"rejected\") {\n        sale.choosedServices.forEach(service => {\n          if (service.id === serviceID) isAllowed = false;\n        });\n      }\n    });\n    return isAllowed;\n  }\n\n  async function deleteServiceOfSeller(serviceID) {\n    return await refSellers.doc(auth.currentUser.uid).collection(\"services\").doc(serviceID).delete();\n  }\n\n  async function updateSellerProfil(data) {\n    await auth.currentUser.updateProfile({\n      displayName: data.firstName\n    });\n    await refSellers.doc(auth.currentUser.uid).update({\n      companyName: data.companyName,\n      website: data.website,\n      firstName: data.firstName,\n      lastName: data.lastName,\n      phone: data.phone\n    });\n    return setSeller({ ...seller,\n      companyName: data.companyName,\n      website: data.website,\n      firstName: data.firstName,\n      lastName: data.lastName,\n      phone: data.phone\n    });\n  }\n\n  async function getSellerReferralCountFromDB() {\n    const res = await refSellers.doc(auth.currentUser.uid).collection(\"referral\").get();\n    let newArray = [];\n    res.forEach(doc => newArray.push(doc.data()));\n    let finalArray = [];\n\n    for (const item of newArray) {\n      const req = await refSellers.doc(item.newSeller).get();\n      const res = req.data();\n      if (res.status === \"opened\") finalArray = [...finalArray, res];\n    }\n\n    return finalArray.length;\n  }\n\n  async function getEventFromUid(uid) {\n    const req = await refEvents.doc(uid).get();\n    return req.data();\n  }\n\n  async function getReviewsOfSellerUid(uid) {\n    const req = await refSellers.doc(uid).collection(\"reviews\").get();\n    let reviews = [];\n    req.forEach(doc => reviews.push(doc.data()));\n    return reviews;\n  }\n\n  async function addReviewOfSellerUid(sellerUID, eventID, note, comment, name) {\n    return await refSellers.doc(sellerUID).collection(\"reviews\").add({\n      eventID: eventID,\n      note: note,\n      comment: comment,\n      name: name,\n      date: new Date(),\n      eventDate: event.date\n    }).then(res => {\n      setTotalNoteOfSeller(sellerUID);\n      return true;\n    }).catch(error => console.log(error));\n  }\n\n  async function setTotalNoteOfSeller(sellerUID) {\n    const reqReviews = await refSellers.doc(sellerUID).collection(\"reviews\").get();\n    const reviewsCount = reqReviews.docs.length;\n    let totalNote = 0;\n    reqReviews.forEach(doc => {\n      const data = doc.data();\n      totalNote += data.note;\n    });\n    let sellerNote = totalNote / reviewsCount;\n    sellerNote = sellerNote.toFixed();\n    await refSellers.doc(sellerUID).update({\n      note: sellerNote\n    });\n    return true;\n  }\n\n  async function getSellerPosition(sellerUID) {\n    const reqSellers = await refSellers.get();\n    let sellersWithNote = [];\n    reqSellers.forEach(doc => {\n      const data = doc.data();\n      if (data.note === undefined) return;\n      const seller = {\n        note: data.note,\n        id: doc.id\n      };\n      sellersWithNote.push(seller);\n    });\n    sellersWithNote.sort((a, b) => {\n      if (a.note > b.note) return -1;\n      if (a.note < b.note) return 1;\n      return 0;\n    });\n    const index = sellersWithNote.findIndex(item => item.id === sellerUID);\n    return index + 1;\n  }\n\n  async function getSellersCount() {\n    const req = await refSellers.get();\n    return req.docs.length;\n  }\n\n  async function sendInBlue_addContactSubscribe(email, firstName, lastName, uid) {\n    createContact = {\n      email: email,\n      listIds: [4],\n      attributes: {\n        PRENOM: firstName,\n        NOM: lastName && lastName,\n        UID: uid ? uid : 0\n      }\n    };\n    apiInstance.createContact(createContact).then(function (data) {\n      console.log(\"API called successfully.\");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  async function sendInBlue_sendRecapToUserAfterPayment(email, sales, event) {\n    let newSales = [];\n    let paid = 0;\n    let total = 0;\n    sales.forEach(sale => {\n      refSellers.doc(sale.sellerID).get().then(doc => {\n        const seller = doc.data();\n        const newSale = { ...sale,\n          name: seller.companyName\n        };\n        newSales = [...newSales, newSale];\n        total = total + sale.total;\n        paid = paid + sale.paid;\n      });\n    });\n    sendSmtpEmail = {\n      to: [{\n        email: email\n      }],\n      params: {\n        sales: newSales,\n        event: event,\n        paid: paid,\n        total: total\n      },\n      templateId: 10,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  async function sendInBlue_sendNewSaleToSeller(email, services, event) {\n    sendSmtpEmail = {\n      to: [{\n        email: email\n      }],\n      params: {\n        services: services,\n        event: event\n      },\n      templateId: 12,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  async function sendInBlue_sendNotificationToSellerOfReview(email, name) {\n    sendSmtpEmail = {\n      to: [{\n        email: email\n      }],\n      params: {\n        name: name\n      },\n      templateId: 4,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  async function sendInBlue_sendNotificationToUserOfSaleStatus(user, prestName, sale) {\n    sendSmtpEmail = {\n      to: [{\n        email: user.email\n      }],\n      params: {\n        prestName: prestName,\n        userName: user.firstName,\n        services: sale.choosedServices\n      },\n      templateId: sale.status === \"rejected\" ? 8 : sale.status === \"validated\" && 9,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  async function getTotalAmountDueToSeller(sellerId) {\n    const req = await refSales.where(\"sellerID\", \"==\", sellerId !== undefined ? sellerId : auth.currentUser.uid).get();\n    let salesOfSeller = [];\n    req.forEach(doc => {\n      salesOfSeller = [...salesOfSeller, doc.data()];\n    });\n    const validSales = salesOfSeller.filter(sale => sale.total === sale.paid && sale.status === \"validated\"); // à mettre en passed je pense\n\n    const prices = validSales.map(sale => sale.price);\n    let finalAmount = 0;\n    prices.forEach(price => {\n      finalAmount = finalAmount + price;\n    });\n    return finalAmount;\n  }\n\n  async function sendInBlue_sendPaymentRequestToAdmin(sellerId) {\n    const amount = await getTotalAmountDueToSeller(sellerId);\n    sendSmtpEmail = {\n      to: [{\n        email: process.env.REACT_APP_ADMIN_EMAIL\n      }],\n      params: {\n        sellerId: sellerId,\n        amount: amount\n      },\n      templateId: 16,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  async function sendInBlue_sendBillRequestToAdmin(transactionID, sellerID) {\n    sendSmtpEmail = {\n      to: [{\n        email: process.env.REACT_APP_ADMIN_EMAIL\n      }],\n      params: {\n        sellerId: sellerID,\n        transactionId: transactionID\n      },\n      templateId: 17,\n      headers: {\n        \"X-Mailin-custom\": \"Content-Type:application/json|custom_header_2:custom_value_2\"\n      }\n    };\n    return apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n      return true;\n    }, function (error) {\n      console.error(error);\n      return false;\n    });\n  }\n\n  async function sendInBlue_addContactToNewsletter(email) {\n    createContact = {\n      email: email,\n      listIds: [5]\n    };\n    return apiInstance.createContact(createContact).then(function (data) {\n      return true;\n    }, function (error) {\n      console.log(error);\n      return false;\n    });\n  }\n\n  async function sendInBlue_sendInvitations(emails, message, user, event) {\n    let emailsArray = [];\n    let emailsArrayWithList = [];\n    emails.forEach(email => {\n      const newEntry = {\n        email: email\n      };\n      const newEntryList = {\n        email: email,\n        listIds: [6],\n        attributes: {\n          EVENT_DATE: new Date(event.date)\n        }\n      };\n      emailsArray = [...emailsArray, newEntry];\n      emailsArrayWithList = [...emailsArrayWithList, newEntryList];\n    });\n    const eventDate = formateToDateWithFullWords(event.date);\n    const startAt = formatLabelTimePicker(event.startAt);\n    const endAt = formatLabelTimePicker(event.endAt);\n    const creneaux = startAt + \" et \" + endAt;\n    sendSmtpEmail = {\n      to: emailsArray,\n      params: {\n        prenom: user.displayName,\n        message: message,\n        nomEvent: event.name,\n        adresse: event.place,\n        invites: event.people,\n        date: eventDate,\n        creneaux: creneaux\n      },\n      templateId: 7,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    return apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      return true;\n    }, function (error) {\n      return false;\n    });\n  }\n\n  async function getWishList(userID) {\n    const req = await refUsers.doc(userID).get();\n    const res = req.data();\n    return res.wishlist || [];\n  }\n\n  async function deleteItemFromWishList(sellerID) {\n    let newWishList = await getWishList(auth.currentUser.uid);\n    newWishList = newWishList.filter(item => item !== sellerID);\n    await refUsers.doc(auth.currentUser.uid).update({\n      wishlist: newWishList\n    });\n    return newWishList;\n  }\n\n  async function addItemToWishListOfUser(sellerID) {\n    let newWishList = await getWishList(auth.currentUser.uid);\n    newWishList = [...newWishList, sellerID];\n    refUsers.doc(auth.currentUser.uid).update({\n      wishlist: newWishList\n    });\n    return;\n  }\n\n  async function getWishListCountOfSeller(sellerID) {\n    const users = await refUsers.where(\"wishlist\", \"array-contains\", sellerID).get();\n    return users.docs.length;\n  }\n\n  async function isSellerInWishListOfUser(id) {\n    const currentWishList = await getWishList(auth.currentUser.uid);\n    const isSellerInList = currentWishList.filter(item => item === id);\n    return isSellerInList.length > 0 ? true : false;\n  }\n\n  async function getEmailOfSellerWithUid(sellerID) {\n    const query = await refSellers.doc(sellerID).get();\n    const result = query.data();\n    return result.email;\n  }\n\n  async function sendInBlue_sendToParrainAboutNewReferral(referralCode) {\n    // Aller choper en bdd le seller correspondant au referral code\n    const query = await refSellers.where(\"referralToken\", \"==\", referralCode).get();\n    const result = query[0].data();\n    const email = result.email; // Puis envoyer à ce seller le mail de new referral\n\n    sendSmtpEmail = {\n      to: [{\n        email: email\n      }],\n      params: {\n        name: \"a\"\n      },\n      templateId: 14,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  function checkoutStart(price) {\n    const saleToken = Date.now().toString().substr(0, 9) + Math.random().toString().substr(2, 9);\n    refEvents.doc(event.id).update({\n      saleToken: saleToken\n    });\n    createStripeCheckout({\n      price: price,\n      eventId: event.id,\n      saleToken: saleToken\n    }).then(response => {\n      const sessionId = response.data.id;\n      stripe.redirectToCheckout({\n        sessionId: sessionId\n      });\n    }).catch(error => console.log(error));\n  }\n\n  function checkoutSubscription() {\n    const saleToken = Date.now().toString().substr(0, 9) + Math.random().toString().substr(2, 9);\n    refSellers.doc(seller.uid).update({\n      saleToken: saleToken\n    });\n    createStripeSubscribe({\n      sellerID: seller.uid,\n      saleToken: saleToken\n    }).then(response => {\n      const sessionId = response.data.id;\n      stripe.redirectToCheckout({\n        sessionId: sessionId\n      });\n    }).catch(error => console.log(error));\n  }\n\n  async function getSaleTokenOfEventFromDb() {\n    const req = await refEvents.doc(event.id).get();\n    const res = req.data();\n    return res.saleToken;\n  }\n\n  async function checkoutCheck(session_id) {\n    return checkStripeReturn({\n      session_id: session_id\n    }).then(result => {\n      return {\n        status: result.data.payment_status,\n        amount: result.data.amount_total,\n        id: result.data.payment_intent || result.data.subscription\n      };\n    });\n  }\n\n  async function addFoodTypeToSeller(type) {\n    if (type === \"Aucun\") return;\n    let newSeller = { ...seller\n    };\n    let newFoodTypes = [];\n\n    if (seller.foodTypes === undefined) {\n      newFoodTypes.push(type);\n    } else {\n      newFoodTypes = seller.foodTypes;\n      newFoodTypes.push(type);\n    }\n\n    newSeller[\"foodTypes\"] = newFoodTypes;\n    await refSellers.doc(auth.currentUser.uid).update({\n      foodTypes: newFoodTypes\n    });\n    setSeller(newSeller);\n  }\n\n  async function deleteFoodTypeToSeller(serviceID) {\n    const req = await refSellers.doc(auth.currentUser.uid).collection(\"services\").doc(serviceID).get();\n    const data = req.data();\n    const type = data.foodType;\n    if (type === \"Aucun\") return;\n    let newSeller = { ...seller\n    };\n    let newFoodTypes = [];\n    if (seller.foodTypes === undefined) return;else {\n      newFoodTypes = seller.foodTypes;\n      let indexes = seller.foodTypes.map((item, index) => item === type ? index : \"\").filter(String);\n      if (indexes[0] === -1) return;else if (newFoodTypes.length > 1) {\n        newFoodTypes.splice(indexes[0], 1);\n      } else newFoodTypes = [];\n      newSeller[\"foodTypes\"] = newFoodTypes;\n      await refSellers.doc(auth.currentUser.uid).update({\n        foodTypes: newFoodTypes\n      });\n      setSeller(newSeller);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      login,\n      subscribe,\n      sellerSubscribe,\n      saveHoliday,\n      logout,\n      user,\n      seller,\n      event,\n      setUser,\n      setSeller,\n      addEvent,\n      addToCard,\n      getServiceQuantityInCard,\n      loadingButtonAddToCard,\n      setLoadingButtonAddToCard,\n      setCurrentStepProcess,\n      currentStepProcess,\n      formatLabelTimePicker,\n      getAuthUserFromHisEmail,\n      updateUserEmail,\n      updateQuantityService,\n      signInWithGoogle,\n      getCurrentUserProfil,\n      verifyLogin,\n      updateCurrentUserProfil,\n      addSellerDescription,\n      setImageSellerDB,\n      addSellerServices,\n      addOneSellerService,\n      getServicesOfCurrentSellerFromDB,\n      addSellerDocuments,\n      getSellerDocumentsFromDB,\n      setSellerStatus,\n      updateSellerDocumentsStatus,\n      getSellersInDbWithUids,\n      deleteOldSellerPicture,\n      addSalesInDB,\n      updateEventStatus,\n      getSalesOfEventIdFromDB,\n      clearEvent,\n      getSalesOfSellerIdFromDB,\n      getEventOfSaleFromDB,\n      formateToDate,\n      formateToDateWithWords,\n      updateSaleStatusInDB,\n      updateSaleNote,\n      addViewsOfSeller,\n      getViewsOfSeller,\n      isSellerAllowedToModifyAndDeleteService,\n      deleteServiceOfSeller,\n      updateSellerProfil,\n      getSellerReferralCountFromDB,\n      getEventFromUid,\n      getReviewsOfSellerUid,\n      addReviewOfSellerUid,\n      sendInBlue_sendNotificationToSellerOfReview,\n      sendInBlue_addContactToNewsletter,\n      sendInBlue_sendInvitations,\n      sendInBlue_sendRecapToUserAfterPayment,\n      sendInBlue_sendNewSaleToSeller,\n      sendInBlue_sendToParrainAboutNewReferral,\n      sendInBlue_sendPaymentRequestToAdmin,\n      getWishList,\n      deleteItemFromWishList,\n      addItemToWishListOfUser,\n      isSellerInWishListOfUser,\n      getEmailOfSellerWithUid,\n      checkoutStart,\n      getSaleTokenOfEventFromDb,\n      checkoutCheck,\n      getTotalAmountDueToSeller,\n      homeSellersDisplay,\n      setHomeSellersDisplay,\n      getWishListCountOfSeller,\n      getSellerPosition,\n      getSellersCount,\n      sendInBlue_sendBillRequestToAdmin,\n      addFoodTypeToSeller,\n      deleteFoodTypeToSeller,\n      isCardWidgetOpen,\n      setIsCardWidgetOpen,\n      checkoutSubscription,\n      refSellers\n    },\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1583,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(UserProvider, \"ijKh/7xLhKwz+rLIrfaDJHXVGUc=\", false, function () {\n  return [useFirebase];\n});\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/Users/bc/Desktop/New Nivid/Leo-Project/src/context/userContext.js"],"names":["React","createContext","useState","useEffect","useContext","firebase","useFirebase","publicIp","Stripe","functions","inputAdornmentClasses","SibApiV3Sdk","require","defaultClient","ApiClient","instance","myAPIKey","process","env","REACT_APP_SENDINBLUE_APIKEY","apiKey","authentications","partnerKey","apiInstance","ContactsApi","createContact","CreateContact","apiInstanceSend","TransactionalEmailsApi","sendSmtpEmail","SendSmtpEmail","UserContext","useAuth","UserProvider","children","firebaseContext","auth","provider","storage","firestore","datePlusYear","Date","setFullYear","getFullYear","initialEvent","name","date","startAt","endAt","people","placeSize","place","latLng","budget","budgetLeft","status","id","choosedServices","initialSeller","companyName","adress","siret","website","firstName","holiday","lastName","phone","description","category","subcategory","image_path","user","setUser","seller","setSeller","event","setEvent","loading","setLoading","currentStepProcess","setCurrentStepProcess","loadingButtonAddToCard","setLoadingButtonAddToCard","refUsers","collection","refEvents","refSellers","refSales","homeSellersDisplay","setHomeSellersDisplay","isCardWidgetOpen","setIsCardWidgetOpen","createStripeCheckout","httpsCallable","createStripeSubscribe","stripe","window","checkStripeReturn","onAuthStateChanged","data","handleAuthChanged","isSeller","isThisUserSeller","uid","isUser","isThisUserUser","sellerData","getSellerDataFromDB","sellerServices","getServicesOfCurrentSellerFromDB","services","emailVerified","eventData","getEvent","getChoosedServices","query","doc","get","result","exists","where","docs","length","item","forEach","toMillis","addEvent","myEvent","myNewEvent","createEvent","updateEvent","req","res","identifier","email","updateContact","attributes","NOTIF_DATE","EVENTID","then","error","console","docRef","add","getServices","delete","update","getBudgetLeft","totalPrice","variations","filter","vari","variation","price","quantity","push","queryPrice","neWObject","login","password","signInWithEmailAndPassword","verifyLogin","subscribe","tel","gender","birthDate","createUserWithEmailAndPassword","userData","updateProfile","displayName","set","catch","log","sendEmailVerification","sendInBlue_addContactSubscribe","code","sellerSubscribe","referral","referralToken","now","toString","substr","Math","random","updateSellerAfterReferralNewSeller","sendInBlue_sendToParrainAboutNewReferral","saveHoliday","holi","year","month","deleteHoliday","i","FieldValue","arrayUnion","selectMonth","updateMonth","undefined","monthArray","split","splice","newSellerUid","docSeller","newSeller","logout","signOut","signInWithGoogle","signInWithPopup","credential","token","accessToken","currentUser","addToCard","sellerID","newEvent","refCurrentService","refService","service","find","itemCopy","newService","getServiceQuantityInCard","servicefiltered","count","updateQuantityService","serviceID","parseInt","formatLabelTimePicker","secs","minutes","floor","hours","slice","getAuthUserFromHisEmail","sendPasswordResetEmail","updateUserEmail","updateEmail","getCurrentUserProfil","updateCurrentUserProfil","setImageSellerDB","url","addSellerDescription","imgURL","addSellerServices","addOneSellerService","newResult","addSellerDocuments","documents","getSellerDocumentsFromDB","setSellerStatus","sellerId","updateSellerDocumentsStatus","newDocumentsArray","getSellersInDbWithUids","ids","sellers","deleteOldSellerPicture","tokens","type","imageRef","ref","child","addSalesInDB","sales","map","sale","getSalesOfEventIdFromDB","eventId","salesOfEvent","getSalesOfSellerIdFromDB","salesOfSeller","updateEventStatus","clearEvent","getEventOfSaleFromDB","reqServices","formateToDate","timestamp","getUTCFullYear","getMonth","day","getDate","formateToDateWithWords","seconds","formateToDateWithFullWords","updateSaleStatusInDB","saleID","saleUID","userID","req2","sendInBlue_sendNotificationToUserOfSaleStatus","updateSaleNote","note","dateTodayMinusByDay","setHours","getHours","addViewsOfSeller","visitorIP","v4","reqViews","recentViews","view","ip","getViewsOfSeller","isSellerAllowedToModifyAndDeleteService","sellerSales","isAllowed","deleteServiceOfSeller","updateSellerProfil","getSellerReferralCountFromDB","newArray","finalArray","getEventFromUid","getReviewsOfSellerUid","reviews","addReviewOfSellerUid","sellerUID","eventID","comment","eventDate","setTotalNoteOfSeller","reqReviews","reviewsCount","totalNote","sellerNote","toFixed","getSellerPosition","reqSellers","sellersWithNote","sort","a","b","index","findIndex","getSellersCount","listIds","PRENOM","NOM","UID","sendInBlue_sendRecapToUserAfterPayment","newSales","paid","total","newSale","to","params","templateId","headers","sendTransacEmail","sendInBlue_sendNewSaleToSeller","sendInBlue_sendNotificationToSellerOfReview","prestName","userName","getTotalAmountDueToSeller","validSales","prices","finalAmount","sendInBlue_sendPaymentRequestToAdmin","amount","REACT_APP_ADMIN_EMAIL","sendInBlue_sendBillRequestToAdmin","transactionID","transactionId","sendInBlue_addContactToNewsletter","sendInBlue_sendInvitations","emails","message","emailsArray","emailsArrayWithList","newEntry","newEntryList","EVENT_DATE","creneaux","prenom","nomEvent","adresse","invites","getWishList","wishlist","deleteItemFromWishList","newWishList","addItemToWishListOfUser","getWishListCountOfSeller","users","isSellerInWishListOfUser","currentWishList","isSellerInList","getEmailOfSellerWithUid","referralCode","checkoutStart","saleToken","response","sessionId","redirectToCheckout","checkoutSubscription","getSaleTokenOfEventFromDb","checkoutCheck","session_id","payment_status","amount_total","payment_intent","subscription","addFoodTypeToSeller","newFoodTypes","foodTypes","deleteFoodTypeToSeller","foodType","indexes","String"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect, useContext } from \"react\";\nimport firebase from \"firebase/app\";\nimport { useFirebase } from \"../assets/base-context\";\nimport publicIp from \"public-ip\";\n\nimport Stripe from \"stripe\";\nimport functions from \"firebase/firebase-functions\";\nimport { inputAdornmentClasses } from \"@mui/material\";\n\nvar SibApiV3Sdk = require(\"sib-api-v3-sdk\");\n\nvar defaultClient = SibApiV3Sdk.ApiClient.instance;\n\nlet myAPIKey = process.env.REACT_APP_SENDINBLUE_APIKEY;\nvar apiKey = defaultClient.authentications[\"api-key\"];\napiKey.apiKey = myAPIKey;\n\nvar partnerKey = defaultClient.authentications[\"partner-key\"];\npartnerKey.apiKey = process.env.REACT_APP_SENDINBLUE_APIKEY;\n\nvar apiInstance = new SibApiV3Sdk.ContactsApi();\nvar createContact = new SibApiV3Sdk.CreateContact();\n\nvar apiInstanceSend = new SibApiV3Sdk.TransactionalEmailsApi();\nvar sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\n\n// Ce fichier comporte toutes les fonctions d'appels et de traitement bdd, et du context global.\n// Il englobe l'app dans App.js\n\nexport const UserContext = createContext();\n\nexport function useAuth() {\n  return useContext(UserContext);\n}\n\nexport const UserProvider = ({ children }) => {\n  const firebaseContext = useFirebase();\n  const auth = firebaseContext.auth();\n  const provider = firebaseContext.provider();\n  const storage = firebaseContext.storage();\n  const firestore = firebaseContext.firestore();\n\n  let datePlusYear = new Date();\n  datePlusYear.setFullYear(datePlusYear.getFullYear());\n\n  const initialEvent = {\n    name: \"\",\n    date: datePlusYear,\n    startAt: 0,\n    endAt: 86360,\n    people: 50,\n    placeSize: 250,\n    place: \"\",\n    latLng: [],\n    budget: 50,\n    budgetLeft: 0,\n    status: null,\n    id: null,\n    choosedServices: [],\n  };\n\n  const initialSeller = {\n    companyName: \"\",\n    adress: \"\",\n    siret: \"\",\n    website: \"\",\n    firstName: \"\",\n    holiday: \"\",\n    lastName: \"\",\n    phone: \"\",\n    description: \"\",\n    category: \"\",\n    subcategory: \"\",\n    status: \"\",\n    image_path: \"\",\n  };\n\n  const [user, setUser] = useState();\n  const [seller, setSeller] = useState(initialSeller);\n  const [event, setEvent] = useState(initialEvent);\n\n  const [loading, setLoading] = useState(true);\n  const [currentStepProcess, setCurrentStepProcess] = useState(0);\n  const [loadingButtonAddToCard, setLoadingButtonAddToCard] = useState(true);\n\n  const refUsers = firestore.collection(\"users\");\n  const refEvents = firestore.collection(\"events\");\n  const refSellers = firestore.collection(\"sellers\");\n  const refSales = firestore.collection(\"sales\");\n\n  const [homeSellersDisplay, setHomeSellersDisplay] = useState([]);\n\n  const [isCardWidgetOpen, setIsCardWidgetOpen] = useState(false);\n\n  const createStripeCheckout = user\n    ? firebase.functions().httpsCallable(\"createStripeCheckout\")\n    : null;\n  const createStripeSubscribe = firebase\n    .functions()\n    .httpsCallable(\"createStripeSubscribe\");\n  const stripe =\n    user || seller\n      ? window.Stripe(\n          \"pk_test_51InLbZBwyEuW61Pj3yTYQlp31JobhK9vIKh32GColDUhXcdtzaKhWF5mVRDa9SGw7HujSuEDPCwvh40GEuo6uJxA00iqmaUXQp\"\n        )\n      : null;\n\n  const checkStripeReturn =\n    user || seller\n      ? firebase.functions().httpsCallable(\"checkStripeReturn\")\n      : null;\n\n  useEffect(() => {\n    auth.onAuthStateChanged((data) => {\n      return handleAuthChanged(data);\n    });\n  }, []);\n\n  async function handleAuthChanged(data) {\n    if (data) {\n      const isSeller = await isThisUserSeller(data.uid);\n      const isUser = await isThisUserUser(data.uid);\n      if (isSeller && !isUser) {\n        const sellerData = await getSellerDataFromDB(data.uid);\n        const sellerServices = await getServicesOfCurrentSellerFromDB();\n        setSeller({\n          ...initialSeller,\n          ...data,\n          ...sellerData,\n          services: sellerServices,\n        });\n        setUser();\n        setLoading(false);\n      } else if (isUser && !isSeller) {\n        if (data.emailVerified === false) {\n          setUser();\n          setSeller();\n          setLoading(false);\n          return;\n        }\n        setUser(data);\n        setSeller();\n        const eventData = await getEvent(data.uid);\n        eventData && eventData !== null\n          ? await getChoosedServices(eventData)\n          : setEvent(initialEvent);\n        setLoading(false);\n      } else if (isSeller && isUser) {\n        const sellerData = await getSellerDataFromDB(data.uid);\n        setSeller({ ...initialSeller, ...data, ...sellerData });\n        setUser(data);\n        const eventData = await getEvent(data.uid);\n        eventData && eventData !== null\n          ? await getChoosedServices(eventData)\n          : setEvent(initialEvent);\n        setLoading(false);\n      }\n    } else {\n      setSeller();\n      setUser();\n      setLoading(false);\n    }\n  }\n\n  async function getSellerDataFromDB(id) {\n    const query = await refSellers.doc(id).get();\n    const result = query.data();\n    return result;\n  }\n\n  async function isThisUserSeller(id) {\n    const doc = await refSellers.doc(id).get();\n    if (doc.exists) return true;\n    return false;\n  }\n\n  async function isThisUserUser(id) {\n    const doc = await refUsers.doc(id).get();\n    if (doc.exists) return true;\n    return false;\n  }\n\n  async function getEvent(uid) {\n    const getEvent = await refEvents.where(\"user\", \"==\", uid).get();\n    if (getEvent.docs.length > 0) {\n      let item = {};\n      getEvent.docs.forEach((doc) => {\n        const data = doc.data();\n        if (data.status && data.status !== \"passed\") {\n          item = { ...data };\n          item.date = data.date.toMillis();\n          item.id = doc.id;\n        }\n      });\n      return item && item.status && item.status !== \"passed\" ? item : null;\n    } else {\n      return null;\n    }\n  }\n\n  async function addEvent(item) {\n    const myEvent = { ...item };\n    delete myEvent.id;\n    let myNewEvent;\n\n    if (item.status !== \"creating\") {\n      myNewEvent = await createEvent(myEvent);\n    }\n\n    if (item.status === \"creating\") {\n      // event existant\n      myNewEvent = await updateEvent(item, myEvent);\n    }\n    await getChoosedServices(myNewEvent);\n  }\n\n  async function createEvent(myEvent) {\n    const req = await refUsers.doc(myEvent.user).get();\n    const res = req.data();\n    var identifier = res.email;\n\n    var updateContact = {\n      attributes: {\n        NOTIF_DATE: new Date(myEvent.date),\n        EVENTID: event.id,\n      },\n    };\n\n    apiInstance.updateContact(identifier, updateContact).then(\n      () => {},\n      (error) => {\n        console.error(error);\n      }\n    );\n\n    myEvent.status = \"creating\";\n    const docRef = await refEvents.add({\n      ...myEvent,\n      date: new Date(myEvent.date),\n    });\n    myEvent.id = docRef.id;\n    return myEvent;\n  }\n\n  async function updateEvent(item, myEvent) {\n    if (item.place !== event.place) {\n      const getServices = await refEvents\n        .doc(item.id)\n        .collection(\"services\")\n        .get();\n      getServices.docs.forEach(async (doc) => {\n        await refEvents\n          .doc(item.id)\n          .collection(\"services\")\n          .doc(doc.id)\n          .delete();\n      });\n    }\n\n    await refEvents.doc(item.id).update({\n      ...myEvent,\n      date: new Date(myEvent.date),\n    });\n    myEvent.id = item.id;\n    return myEvent;\n  }\n\n  async function getBudgetLeft(budget, choosedServices) {\n    let totalPrice = 0;\n    choosedServices.forEach((item) => {\n      if (item.variations && item.variations.length > 0) {\n        totalPrice +=\n          item.variations.filter((vari) => vari.name === item.variation)[0]\n            .price * item.quantity;\n      } else totalPrice += item.price * item.quantity;\n    });\n    const result = budget - totalPrice;\n    return result;\n  }\n\n  async function getChoosedServices(item) {\n    let choosedServices = [];\n    const services = await refEvents.doc(item.id).collection(\"services\").get();\n    services.forEach((doc) => {\n      choosedServices.push({ ...doc.data(), uid: doc.id });\n    });\n    const queryPrice = await getBudgetLeft(item.budget, choosedServices);\n    const neWObject = {\n      ...item,\n      budgetLeft: queryPrice,\n      choosedServices: choosedServices,\n    };\n    return setEvent(neWObject);\n  }\n\n  async function login(email, password) {\n    return await auth\n      .signInWithEmailAndPassword(email, password)\n      .then((data) => {\n        if (data.user.emailVerified === false) {\n          setSeller();\n          setUser();\n          return false;\n        }\n        setUser(data.user);\n        return true;\n      });\n  }\n\n  async function verifyLogin(email, password) {\n    const data = await auth.signInWithEmailAndPassword(email, password);\n    return data;\n  }\n\n  async function subscribe(\n    email,\n    password,\n    firstName,\n    name,\n    tel,\n    gender,\n    birthDate\n  ) {\n    return auth\n      .createUserWithEmailAndPassword(email, password)\n      .then(async (userData) => {\n        await userData.user.updateProfile({\n          displayName: firstName,\n        });\n        await refUsers\n          .doc(userData.user.uid)\n          .set({\n            firstName: firstName,\n            name: name,\n            tel: tel,\n            gender: gender,\n            birthDate: birthDate,\n            email: email,\n          })\n          .catch((error) => {\n            return console.log(error);\n          });\n        userData.user.sendEmailVerification();\n        setUser();\n        setSeller();\n        sendInBlue_addContactSubscribe(email, firstName);\n        return true;\n      })\n      .catch((error) => {\n        return error.code;\n      });\n  }\n\n  async function sellerSubscribe(\n    companyName,\n    adress,\n    siret,\n    website,\n    firstName,\n    holiday,\n    lastName,\n    email,\n    phone,\n    password,\n    latLng,\n    referral\n  ) {\n    const referralToken =\n      Date.now().toString().substr(0, 5) +\n      Math.random().toString().substr(2, 7);\n    return auth\n      .createUserWithEmailAndPassword(email, password)\n      .then(async (userData) => {\n        await userData.user.updateProfile({\n          displayName: firstName,\n        });\n        await refSellers\n          .doc(userData.user.uid)\n          .set({\n            companyName: companyName,\n            adress: adress,\n            latLng: latLng,\n            siret: siret,\n            website: website,\n            firstName: firstName,\n            holiday: [],\n            lastName: lastName,\n            phone: phone,\n            email: email,\n            image_path: \"\",\n            status: \"subscribing\",\n            referralToken: referralToken,\n            referral: referral,\n          })\n          .catch((error) => {\n            return console.log(error);\n          });\n        if (referral.length === 12) {\n          await updateSellerAfterReferralNewSeller(referral, userData.user.uid);\n          sendInBlue_sendToParrainAboutNewReferral(referral);\n        }\n        sendInBlue_addContactSubscribe(\n          email,\n          firstName,\n          lastName,\n          userData.user.uid\n        );\n        setUser();\n        setSeller({\n          companyName: companyName,\n          adress: adress,\n          latLng: latLng,\n          siret: siret,\n          website: website,\n          firstName: firstName,\n          holiday: [],\n          lastName: lastName,\n          phone: phone,\n          email: email,\n          image_path: \"\",\n          status: \"subscribing\",\n          referralToken: referralToken,\n          referral: referral,\n          uid: userData.user.uid\n        });\n        userData.user.sendEmailVerification();\n        return true;\n      })\n      .catch((error) => {\n        return error.code;\n      });\n  }\n\n  async function saveHoliday(id, holi, year, month) {\n    await deleteHoliday(id, year, month)\n    for (let i = 0; i < holi.length; i++) {\n      refSellers\n      .doc(id)\n      .update({\n        holiday: firebase.firestore.FieldValue.arrayUnion(holi[i]),\n      })\n      .catch((error) => {\n        return console.log(error);\n      });\n    }\n    return true;\n  }\n\n  async function deleteHoliday(id, year, month) {\n\n    const selectMonth = await refSellers.doc(id).get();\n    const updateMonth = selectMonth.data().holiday;\n    if (updateMonth!=undefined) {\n      for (let i = 0; i < updateMonth.length; i++) {\n        var monthArray = updateMonth[i].split('.');\n        if (monthArray[0] == year && monthArray[1] == month) {\n          updateMonth.splice(i,1);\n          i--;\n        }\n      } \n      refSellers\n      .doc(id)\n      .update({\n        holiday: updateMonth,\n      })\n      .catch((error) => {\n        return console.log(error);\n      });\n    }\n  }\n\n  async function updateSellerAfterReferralNewSeller(referral, newSellerUid) {\n    const docs = await refSellers.where(\"referralToken\", \"==\", referral).get();\n    let docSeller = {};\n    docs.forEach((doc) => {\n      docSeller = { ...doc.data(), uid: doc.id };\n    });\n    if (\n      docSeller.uid !== undefined &&\n      docSeller.uid !== null &&\n      docSeller.uid.length > 10\n    ) {\n      refSellers\n        .doc(docSeller.uid)\n        .collection(\"referral\")\n        .add({\n          newSeller: newSellerUid,\n          date: Date.now(),\n        })\n        .catch((error) => {\n          return console.log(error);\n        });\n    }\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  async function signInWithGoogle() {\n    const result = await auth.signInWithPopup(provider);\n    /** @type {firebase.auth.OAuthCredential} */\n    var credential = result.credential;\n\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    var token = credential.accessToken;\n    // The signed-in user info.\n    var user = result.user;\n    var doc = await refUsers.doc(user.uid).get();\n    if (doc.exists) {\n      setUser(auth.currentUser);\n    } else {\n      await refUsers.doc(user.uid).set({\n        firstName: user.displayName,\n        email: user.email,\n      });\n      setUser(auth.currentUser);\n    }\n  }\n\n  // Ajouter un service au panier ( BBD et state )\n  async function addToCard(sellerID, item, quantity) {\n    // Checkons si ce service est deja present dans la liste de cette event\n    const newEvent = { ...event };\n\n    const refCurrentService = refEvents.doc(event.id).collection(\"services\");\n\n    const doc = await refCurrentService\n      .where(\"id\", \"==\", item.id)\n      .where(\"variation\", \"==\", item.variation)\n      .get();\n    const refService = doc.exists && doc.data();\n\n    // Si le service existe dans les service séléctionnés pour cet event, on actualise juste en renseignant la nouvelle quantity ( BBD et state )\n    if (doc.docs.length > 0) {\n      await refCurrentService\n        .doc(doc.docs[0].id)\n        .update({ quantity: quantity });\n      //Ici on chope le service concerné dans le state, puis on le modifie pour ajouter la quantity, et on actualise le state\n      const services = [...event.choosedServices];\n      const service = services.find(\n        (service) =>\n          service.variation === item.variation && service.id === item.id\n      );\n      service.quantity = quantity;\n      newEvent.choosedServices = services;\n      getChoosedServices(newEvent);\n      setLoadingButtonAddToCard(false);\n    }\n    // Mais si le service n'existe pas, on l'ajoute completement ( BBD et state )\n    else {\n      const itemCopy = { ...item };\n      itemCopy.quantity = quantity;\n      const newService = [];\n      await refCurrentService.add(itemCopy);\n      newService.push(item);\n      newEvent.choosedServices.push(newService[0]);\n      getChoosedServices(newEvent);\n      setLoadingButtonAddToCard(false);\n    }\n    setIsCardWidgetOpen(true);\n  }\n\n  function getServiceQuantityInCard(id) {\n    const services = [...event.choosedServices];\n    const servicefiltered = services.filter((service) => service.id === id);\n    let count = 0;\n    if (servicefiltered.length > 1)\n      servicefiltered.forEach((service) => (count += service.quantity));\n    else if (servicefiltered.length > 0) count += servicefiltered[0].quantity;\n    return count;\n  }\n\n  async function updateQuantityService(serviceID, quantity) {\n    if (quantity === undefined) return;\n    quantity = parseInt(quantity);\n\n    if (quantity !== 0) {\n      await refEvents\n        .doc(event.id)\n        .collection(\"services\")\n        .doc(serviceID)\n        .update({ quantity: quantity });\n    } else {\n      await refEvents\n        .doc(event.id)\n        .collection(\"services\")\n        .doc(serviceID)\n        .delete();\n    }\n\n    const eventData = await getEvent(auth.currentUser.uid);\n    await getChoosedServices(eventData);\n    setLoading(false);\n    return;\n  }\n\n  function formatLabelTimePicker(secs) {\n    if (secs === 86400) secs = 86360;\n    var minutes = Math.floor(secs / 60);\n    var hours = Math.floor(minutes / 60);\n    minutes = minutes % 60;\n    return `${hours}:${(\"0\" + minutes).slice(-2)}`;\n  }\n\n  async function getAuthUserFromHisEmail(email) {\n    return auth\n      .sendPasswordResetEmail(email)\n      .then(() => {\n        return true;\n      })\n      .catch(function (error) {\n        if (error.code === \"auth/invalid-email\") {\n          return \"invalid\";\n        } else if (error.code === \"auth/user-not-found\") {\n          return \"notexist\";\n        }\n      });\n  }\n\n  async function updateUserEmail(email) {\n    var user = auth.currentUser;\n    await user.updateEmail(email);\n    await refUsers.doc(user.uid).update({ email: email });\n    await user.sendEmailVerification();\n    return true;\n  }\n\n  async function getCurrentUserProfil() {\n    var uid = auth.currentUser.uid;\n    const doc = await refUsers.doc(uid).get();\n    return doc.exists ? doc.data() : null;\n  }\n\n  async function updateCurrentUserProfil(data) {\n    var uid = auth.currentUser.uid;\n    refUsers.doc(uid).update(data);\n    user.updateProfile({\n      displayName: data.firstName,\n    });\n  }\n\n  async function setImageSellerDB(url, token) {\n    await refSellers.doc(auth.currentUser.uid).update({\n      image_path: { url: url, token: token },\n    });\n  }\n\n  async function addSellerDescription(data, imgURL) {\n    await refSellers.doc(auth.currentUser.uid).update({\n      description: data.description,\n      category: data.category,\n      subcategory: data.subcategory,\n    });\n    setSeller({\n      ...seller,\n      description: data.description,\n      category: data.category,\n      subcategory: data.subcategory,\n      image_path: imgURL !== null && imgURL,\n    });\n  }\n\n  async function addSellerServices(services) {\n    setSeller({ ...seller, services: services });\n    services.forEach(async (service) => {\n      if (service.id.length > 2) {\n        return await refSellers\n          .doc(auth.currentUser.uid)\n          .collection(\"services\")\n          .doc(service.id)\n          .update(service);\n      }\n      return await refSellers\n        .doc(auth.currentUser.uid)\n        .collection(\"services\")\n        .add(service);\n    });\n  }\n\n  async function addOneSellerService(service) {\n    if (service.id.length > 2) {\n      return await refSellers\n        .doc(auth.currentUser.uid)\n        .collection(\"services\")\n        .doc(service.id)\n        .update(service);\n    }\n    const docRef = await refSellers\n      .doc(auth.currentUser.uid)\n      .collection(\"services\")\n      .add(service);\n    return docRef.id;\n  }\n\n  async function getServicesOfCurrentSellerFromDB() {\n    const services = await refSellers\n      .doc(auth.currentUser.uid)\n      .collection(\"services\")\n      .get();\n    var result = [];\n    services.docs.forEach((doc) => {\n      const newResult = { ...doc.data(), id: doc.id };\n      result.push(newResult);\n    });\n    return result;\n  }\n\n  async function addSellerDocuments(documents) {\n    return await refSellers.doc(auth.currentUser.uid).update({\n      documents: documents,\n    });\n  }\n\n  async function getSellerDocumentsFromDB() {\n    const query = await refSellers.doc(auth.currentUser.uid).get();\n    const doc = query.data();\n    const result = doc.documents && doc.documents;\n    if (result === undefined) return null;\n    return result;\n  }\n\n  async function setSellerStatus(sellerId, status) {\n    await refSellers.doc(sellerId).update({\n      status: status,\n    });\n    return setSeller({ ...seller, status: status });\n  }\n\n  async function updateSellerDocumentsStatus(sellerId, newDocumentsArray) {\n    await refSellers.doc(sellerId).update({\n      documents: newDocumentsArray,\n    });\n\n    newDocumentsArray.status === \"rejected\" &&\n      (await refSellers.doc(sellerId).update({\n        status: \"subscribing\",\n      }));\n  }\n\n  async function getSellersInDbWithUids(ids) {\n    let sellers = [];\n    for (const id in ids) {\n      const req = await refSellers.doc(ids[id]).get();\n      let result = req.data();\n      result.uid = req.id;\n      sellers = [...sellers, result];\n      if (sellers.length === ids.length) {\n        return sellers;\n      }\n    }\n  }\n\n  // TODO ICi on a la fonction pour delete la photo de profil qu'on ecrase en a remplaceant, faudra faire la meme avec les autres endroits du site avec uploda de picture\n  async function deleteOldSellerPicture(tokens, type) {\n    tokens.forEach((token) => {\n      var imageRef =\n        type && type === \"services\"\n          ? storage.ref(\"services\").child(token)\n          : storage.ref(\"sellers\").child(token);\n      imageRef.delete().catch((error) => console.log(error));\n    });\n  }\n\n  async function addSalesInDB(sales) {\n    return sales.map(async (sale) => await refSales.add(sale));\n  }\n\n  async function getSalesOfEventIdFromDB(eventId) {\n    const req = await refSales.where(\"eventID\", \"==\", eventId).get();\n    let salesOfEvent = [];\n    req.forEach((doc) => salesOfEvent.push(doc.data()));\n    return salesOfEvent;\n  }\n\n  async function getSalesOfSellerIdFromDB(sellerId) {\n    const req = await refSales.where(\"sellerID\", \"==\", sellerId).get();\n    let salesOfSeller = [];\n    req.forEach((doc) => salesOfSeller.push(doc.data()));\n    return salesOfSeller;\n  }\n\n  async function updateEventStatus(status) {\n    await refEvents.doc(event.id).update({ status: status });\n    return setEvent({ ...event, status: status });\n  }\n\n  async function clearEvent() {\n    setEvent(initialEvent);\n  }\n\n  async function getEventOfSaleFromDB(eventId) {\n    const req = await refEvents.doc(eventId).get();\n    let newEvent = req.data();\n    newEvent.choosedServices = [];\n\n    const reqServices = await refEvents\n      .doc(eventId)\n      .collection(\"services\")\n      .get();\n    reqServices.forEach((doc) => {\n      newEvent.choosedServices = [...newEvent.choosedServices, doc.data()];\n    });\n    return newEvent;\n  }\n\n  function formateToDate(timestamp) {\n    const date = new Date(timestamp);\n    const year = date.getUTCFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    return `${day}/${month < 10 ? \"0\" : \"\"}${month}/${year}`;\n  }\n\n  function formateToDateWithWords(timestamp) {\n    const date = new Date(\n      timestamp.seconds ? timestamp.seconds * 1000 : timestamp\n    );\n    const year = date.getUTCFullYear();\n    let month = date.getMonth() + 1;\n    const day = date.getDate();\n    month =\n      month === 1\n        ? \"janv\"\n        : month === 2\n        ? \"févr\"\n        : month === 3\n        ? \"mars\"\n        : month === 4\n        ? \"avril\"\n        : month === 5\n        ? \"mai\"\n        : month === 6\n        ? \"juin\"\n        : month === 7\n        ? \"juil\"\n        : month === 8\n        ? \"aout\"\n        : month === 9\n        ? \"sept\"\n        : month === 10\n        ? \"oct\"\n        : month === 11\n        ? \"nov\"\n        : month === 12 && \"déc\";\n    return `${day} ${month} ${year}`;\n  }\n\n  function formateToDateWithFullWords(timestamp) {\n    const date = new Date(timestamp);\n    const year = date.getUTCFullYear();\n    let month = date.getMonth() + 1;\n    const day = date.getDate();\n    month =\n      month === 1\n        ? \"janvier\"\n        : month === 2\n        ? \"février\"\n        : month === 3\n        ? \"mars\"\n        : month === 4\n        ? \"avril\"\n        : month === 5\n        ? \"mai\"\n        : month === 6\n        ? \"juin\"\n        : month === 7\n        ? \"juillet\"\n        : month === 8\n        ? \"aout\"\n        : month === 9\n        ? \"septembre\"\n        : month === 10\n        ? \"octobre\"\n        : month === 11\n        ? \"novembre\"\n        : month === 12 && \"décembre\";\n    return `${day} ${month} ${year}`;\n  }\n\n  async function updateSaleStatusInDB(saleID, sellerID, status) {\n    const req = await refSales\n      .where(\"sellerID\", \"==\", sellerID)\n      .where(\"id\", \"==\", saleID)\n      .get();\n    let saleUID;\n    let userID;\n    let sale;\n    req.forEach((doc) => {\n      sale = doc.data();\n      saleUID = doc.id;\n      userID = sale.userID;\n    });\n    const req2 = await refUsers.doc(userID).get();\n    const user = req2.data();\n    await refSales.doc(saleUID).update({ status });\n    sendInBlue_sendNotificationToUserOfSaleStatus(\n      user,\n      seller.companyName,\n      sale\n    );\n  }\n\n  async function updateSaleNote(saleID, note) {\n    const req = await refSales\n      .where(\"sellerID\", \"==\", auth.currentUser.uid)\n      .where(\"id\", \"==\", saleID)\n      .get();\n    let saleUID;\n    req.forEach((doc) => (saleUID = doc.id));\n    await refSales.doc(saleUID).update({ note });\n    return;\n  }\n\n  function dateTodayMinusByDay(day) {\n    const date = new Date();\n    date.setHours(date.getHours() - 24 * day);\n    return date;\n  }\n\n  async function addViewsOfSeller(sellerID) {\n    const visitorIP = await publicIp.v4();\n    const reqViews = await refSellers.doc(sellerID).collection(\"views\").get();\n\n    let recentViews = [];\n\n    reqViews.forEach(async (doc) => {\n      const view = doc.data();\n      if (\n        view.ip === visitorIP &&\n        view.date.seconds * 1000 > dateTodayMinusByDay(1)\n      ) {\n        recentViews = [...recentViews, view];\n      }\n    });\n    if (recentViews.length === 0) {\n      await refSellers\n        .doc(sellerID)\n        .collection(\"views\")\n        .add({\n          date: new Date(Date.now()),\n          ip: visitorIP,\n        });\n    }\n  }\n\n  async function getViewsOfSeller(sellerID) {\n    const reqViews = await refSellers.doc(sellerID).collection(\"views\").get();\n    let res = [];\n    reqViews.forEach((doc) => res.push(doc.data()));\n    return res;\n  }\n\n  async function isSellerAllowedToModifyAndDeleteService(serviceID) {\n    const req = await refSales\n      .where(\"sellerID\", \"==\", auth.currentUser.uid)\n      .get();\n    let sellerSales = [];\n    req.forEach((doc) => sellerSales.push(doc.data()));\n\n    let isAllowed = true;\n    sellerSales.forEach((sale) => {\n      if (sale.status !== \"passed\" && sale.status !== \"rejected\") {\n        sale.choosedServices.forEach((service) => {\n          if (service.id === serviceID) isAllowed = false;\n        });\n      }\n    });\n    return isAllowed;\n  }\n\n  async function deleteServiceOfSeller(serviceID) {\n    return await refSellers\n      .doc(auth.currentUser.uid)\n      .collection(\"services\")\n      .doc(serviceID)\n      .delete();\n  }\n\n  async function updateSellerProfil(data) {\n    await auth.currentUser.updateProfile({\n      displayName: data.firstName,\n    });\n    await refSellers.doc(auth.currentUser.uid).update({\n      companyName: data.companyName,\n      website: data.website,\n      firstName: data.firstName,\n      lastName: data.lastName,\n      phone: data.phone,\n    });\n    return setSeller({\n      ...seller,\n      companyName: data.companyName,\n      website: data.website,\n      firstName: data.firstName,\n      lastName: data.lastName,\n      phone: data.phone,\n    });\n  }\n\n  async function getSellerReferralCountFromDB() {\n    const res = await refSellers\n      .doc(auth.currentUser.uid)\n      .collection(\"referral\")\n      .get();\n    let newArray = [];\n    res.forEach((doc) => newArray.push(doc.data()));\n\n    let finalArray = [];\n    for (const item of newArray) {\n      const req = await refSellers.doc(item.newSeller).get();\n      const res = req.data();\n      if (res.status === \"opened\") finalArray = [...finalArray, res];\n    }\n    return finalArray.length;\n  }\n\n  async function getEventFromUid(uid) {\n    const req = await refEvents.doc(uid).get();\n    return req.data();\n  }\n\n  async function getReviewsOfSellerUid(uid) {\n    const req = await refSellers.doc(uid).collection(\"reviews\").get();\n    let reviews = [];\n    req.forEach((doc) => reviews.push(doc.data()));\n    return reviews;\n  }\n\n  async function addReviewOfSellerUid(sellerUID, eventID, note, comment, name) {\n    return await refSellers\n      .doc(sellerUID)\n      .collection(\"reviews\")\n      .add({\n        eventID: eventID,\n        note: note,\n        comment: comment,\n        name: name,\n        date: new Date(),\n        eventDate: event.date,\n      })\n      .then((res) => {\n        setTotalNoteOfSeller(sellerUID);\n        return true;\n      })\n      .catch((error) => console.log(error));\n  }\n\n  async function setTotalNoteOfSeller(sellerUID) {\n    const reqReviews = await refSellers\n      .doc(sellerUID)\n      .collection(\"reviews\")\n      .get();\n    const reviewsCount = reqReviews.docs.length;\n    let totalNote = 0;\n    reqReviews.forEach((doc) => {\n      const data = doc.data();\n      totalNote += data.note;\n    });\n    let sellerNote = totalNote / reviewsCount;\n    sellerNote = sellerNote.toFixed();\n    await refSellers.doc(sellerUID).update({\n      note: sellerNote,\n    });\n    return true;\n  }\n\n  async function getSellerPosition(sellerUID) {\n    const reqSellers = await refSellers.get();\n    let sellersWithNote = [];\n    reqSellers.forEach((doc) => {\n      const data = doc.data();\n      if (data.note === undefined) return;\n      const seller = { note: data.note, id: doc.id };\n      sellersWithNote.push(seller);\n    });\n\n    sellersWithNote.sort((a, b) => {\n      if (a.note > b.note) return -1;\n      if (a.note < b.note) return 1;\n      return 0;\n    });\n    const index = sellersWithNote.findIndex((item) => item.id === sellerUID);\n    return index + 1;\n  }\n\n  async function getSellersCount() {\n    const req = await refSellers.get();\n    return req.docs.length;\n  }\n\n  async function sendInBlue_addContactSubscribe(\n    email,\n    firstName,\n    lastName,\n    uid\n  ) {\n    createContact = {\n      email: email,\n      listIds: [4],\n      attributes: {\n        PRENOM: firstName,\n        NOM: lastName && lastName,\n        UID: uid ? uid : 0,\n      },\n    };\n\n    apiInstance.createContact(createContact).then(\n      function (data) {\n        console.log(\"API called successfully.\");\n      },\n      function (error) {\n        console.error(error);\n      }\n    );\n  }\n\n  async function sendInBlue_sendRecapToUserAfterPayment(email, sales, event) {\n    let newSales = [];\n    let paid = 0;\n    let total = 0;\n    sales.forEach((sale) => {\n      refSellers\n        .doc(sale.sellerID)\n        .get()\n        .then((doc) => {\n          const seller = doc.data();\n          const newSale = { ...sale, name: seller.companyName };\n          newSales = [...newSales, newSale];\n\n          total = total + sale.total;\n          paid = paid + sale.paid;\n        });\n    });\n\n    sendSmtpEmail = {\n      to: [\n        {\n          email: email,\n        },\n      ],\n      params: {\n        sales: newSales,\n        event: event,\n        paid: paid,\n        total: total,\n      },\n      templateId: 10,\n      headers: {\n        \"X-Mailin-custom\":\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\n      },\n    };\n\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\n      function (data) {\n        console.log(\"API called successfully. Returned data: \");\n      },\n      function (error) {\n        console.error(error);\n      }\n    );\n  }\n\n  async function sendInBlue_sendNewSaleToSeller(email, services, event) {\n    sendSmtpEmail = {\n      to: [\n        {\n          email: email,\n        },\n      ],\n      params: {\n        services: services,\n        event: event,\n      },\n      templateId: 12,\n      headers: {\n        \"X-Mailin-custom\":\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\n      },\n    };\n\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\n      function (data) {\n        console.log(\"API called successfully. Returned data: \");\n      },\n      function (error) {\n        console.error(error);\n      }\n    );\n  }\n\n  async function sendInBlue_sendNotificationToSellerOfReview(email, name) {\n    sendSmtpEmail = {\n      to: [\n        {\n          email: email,\n        },\n      ],\n      params: {\n        name: name,\n      },\n      templateId: 4,\n      headers: {\n        \"X-Mailin-custom\":\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\n      },\n    };\n\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\n      function (data) {\n        console.log(\"API called successfully. Returned data: \");\n      },\n      function (error) {\n        console.error(error);\n      }\n    );\n  }\n\n  async function sendInBlue_sendNotificationToUserOfSaleStatus(\n    user,\n    prestName,\n    sale\n  ) {\n    sendSmtpEmail = {\n      to: [\n        {\n          email: user.email,\n        },\n      ],\n      params: {\n        prestName: prestName,\n        userName: user.firstName,\n        services: sale.choosedServices,\n      },\n      templateId:\n        sale.status === \"rejected\" ? 8 : sale.status === \"validated\" && 9,\n      headers: {\n        \"X-Mailin-custom\":\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\n      },\n    };\n\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\n      function (data) {\n        console.log(\"API called successfully. Returned data: \");\n      },\n      function (error) {\n        console.error(error);\n      }\n    );\n  }\n\n  async function getTotalAmountDueToSeller(sellerId) {\n    const req = await refSales\n      .where(\n        \"sellerID\",\n        \"==\",\n        sellerId !== undefined ? sellerId : auth.currentUser.uid\n      )\n      .get();\n    let salesOfSeller = [];\n    req.forEach((doc) => {\n      salesOfSeller = [...salesOfSeller, doc.data()];\n    });\n    const validSales = salesOfSeller.filter(\n      (sale) => sale.total === sale.paid && sale.status === \"validated\"\n    ); // à mettre en passed je pense\n    const prices = validSales.map((sale) => sale.price);\n    let finalAmount = 0;\n    prices.forEach((price) => {\n      finalAmount = finalAmount + price;\n    });\n    return finalAmount;\n  }\n\n  async function sendInBlue_sendPaymentRequestToAdmin(sellerId) {\n    const amount = await getTotalAmountDueToSeller(sellerId);\n\n    sendSmtpEmail = {\n      to: [\n        {\n          email: process.env.REACT_APP_ADMIN_EMAIL,\n        },\n      ],\n      params: {\n        sellerId: sellerId,\n        amount: amount,\n      },\n      templateId: 16,\n      headers: {\n        \"X-Mailin-custom\":\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\n      },\n    };\n\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\n      function (data) {\n        console.log(\"API called successfully. Returned data: \");\n      },\n      function (error) {\n        console.error(error);\n      }\n    );\n  }\n\n  async function sendInBlue_sendBillRequestToAdmin(transactionID, sellerID) {\n    sendSmtpEmail = {\n      to: [\n        {\n          email: process.env.REACT_APP_ADMIN_EMAIL,\n        },\n      ],\n      params: {\n        sellerId: sellerID,\n        transactionId: transactionID,\n      },\n      templateId: 17,\n      headers: {\n        \"X-Mailin-custom\":\n          \"Content-Type:application/json|custom_header_2:custom_value_2\",\n      },\n    };\n\n    return apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\n      function (data) {\n        console.log(\"API called successfully. Returned data: \");\n        return true;\n      },\n      function (error) {\n        console.error(error);\n        return false;\n      }\n    );\n  }\n\n  async function sendInBlue_addContactToNewsletter(email) {\n    createContact = {\n      email: email,\n      listIds: [5],\n    };\n\n    return apiInstance.createContact(createContact).then(\n      function (data) {\n        return true;\n      },\n      function (error) {\n        console.log(error);\n        return false;\n      }\n    );\n  }\n\n  async function sendInBlue_sendInvitations(emails, message, user, event) {\n    let emailsArray = [];\n    let emailsArrayWithList = [];\n    emails.forEach((email) => {\n      const newEntry = { email: email };\n      const newEntryList = {\n        email: email,\n        listIds: [6],\n        attributes: {\n          EVENT_DATE: new Date(event.date),\n        },\n      };\n      emailsArray = [...emailsArray, newEntry];\n      emailsArrayWithList = [...emailsArrayWithList, newEntryList];\n    });\n\n    const eventDate = formateToDateWithFullWords(event.date);\n    const startAt = formatLabelTimePicker(event.startAt);\n    const endAt = formatLabelTimePicker(event.endAt);\n    const creneaux = startAt + \" et \" + endAt;\n\n    sendSmtpEmail = {\n      to: emailsArray,\n      params: {\n        prenom: user.displayName,\n        message: message,\n        nomEvent: event.name,\n        adresse: event.place,\n        invites: event.people,\n        date: eventDate,\n        creneaux: creneaux,\n      },\n      templateId: 7,\n      headers: {\n        \"X-Mailin-custom\":\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\n      },\n    };\n\n    return apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\n      function (data) {\n        return true;\n      },\n      function (error) {\n        return false;\n      }\n    );\n  }\n\n  async function getWishList(userID) {\n    const req = await refUsers.doc(userID).get();\n    const res = req.data();\n    return res.wishlist || [];\n  }\n\n  async function deleteItemFromWishList(sellerID) {\n    let newWishList = await getWishList(auth.currentUser.uid);\n    newWishList = newWishList.filter((item) => item !== sellerID);\n    await refUsers.doc(auth.currentUser.uid).update({\n      wishlist: newWishList,\n    });\n    return newWishList;\n  }\n\n  async function addItemToWishListOfUser(sellerID) {\n    let newWishList = await getWishList(auth.currentUser.uid);\n    newWishList = [...newWishList, sellerID];\n    refUsers.doc(auth.currentUser.uid).update({\n      wishlist: newWishList,\n    });\n    return;\n  }\n\n  async function getWishListCountOfSeller(sellerID) {\n    const users = await refUsers\n      .where(\"wishlist\", \"array-contains\", sellerID)\n      .get();\n    return users.docs.length;\n  }\n\n  async function isSellerInWishListOfUser(id) {\n    const currentWishList = await getWishList(auth.currentUser.uid);\n    const isSellerInList = currentWishList.filter((item) => item === id);\n\n    return isSellerInList.length > 0 ? true : false;\n  }\n\n  async function getEmailOfSellerWithUid(sellerID) {\n    const query = await refSellers.doc(sellerID).get();\n    const result = query.data();\n    return result.email;\n  }\n\n  async function sendInBlue_sendToParrainAboutNewReferral(referralCode) {\n    // Aller choper en bdd le seller correspondant au referral code\n    const query = await refSellers\n      .where(\"referralToken\", \"==\", referralCode)\n      .get();\n    const result = query[0].data();\n    const email = result.email;\n\n    // Puis envoyer à ce seller le mail de new referral\n    sendSmtpEmail = {\n      to: [\n        {\n          email: email,\n        },\n      ],\n      params: {\n        name: \"a\",\n      },\n      templateId: 14,\n      headers: {\n        \"X-Mailin-custom\":\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\n      },\n    };\n\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\n      function (data) {\n        console.log(\"API called successfully. Returned data: \");\n      },\n      function (error) {\n        console.error(error);\n      }\n    );\n  }\n\n  function checkoutStart(price) {\n    const saleToken =\n      Date.now().toString().substr(0, 9) +\n      Math.random().toString().substr(2, 9);\n    refEvents.doc(event.id).update({\n      saleToken: saleToken,\n    });\n    createStripeCheckout({\n      price: price,\n      eventId: event.id,\n      saleToken: saleToken,\n    })\n      .then((response) => {\n        const sessionId = response.data.id;\n        stripe.redirectToCheckout({ sessionId: sessionId });\n      })\n      .catch((error) => console.log(error));\n  }\n\n  function checkoutSubscription() {\n    const saleToken =\n      Date.now().toString().substr(0, 9) +\n      Math.random().toString().substr(2, 9);\n    refSellers.doc(seller.uid).update({\n      saleToken: saleToken,\n    });\n    createStripeSubscribe({\n      sellerID: seller.uid,\n      saleToken: saleToken,\n    })\n      .then((response) => {\n        const sessionId = response.data.id;\n        stripe.redirectToCheckout({ sessionId: sessionId });\n      })\n      .catch((error) => console.log(error));\n  }\n\n  async function getSaleTokenOfEventFromDb() {\n    const req = await refEvents.doc(event.id).get();\n    const res = req.data();\n    return res.saleToken;\n  }\n\n  async function checkoutCheck(session_id) {\n    return checkStripeReturn({ session_id: session_id }).then((result) => {\n      return {\n        status: result.data.payment_status,\n        amount: result.data.amount_total,\n        id: result.data.payment_intent || result.data.subscription,\n      };\n    });\n  }\n\n  async function addFoodTypeToSeller(type) {\n    if (type === \"Aucun\") return;\n    let newSeller = { ...seller };\n    let newFoodTypes = [];\n    if (seller.foodTypes === undefined) {\n      newFoodTypes.push(type);\n    } else {\n      newFoodTypes = seller.foodTypes;\n      newFoodTypes.push(type);\n    }\n    newSeller[\"foodTypes\"] = newFoodTypes;\n    await refSellers.doc(auth.currentUser.uid).update({\n      foodTypes: newFoodTypes,\n    });\n    setSeller(newSeller);\n  }\n\n  async function deleteFoodTypeToSeller(serviceID) {\n    const req = await refSellers\n      .doc(auth.currentUser.uid)\n      .collection(\"services\")\n      .doc(serviceID)\n      .get();\n    const data = req.data();\n    const type = data.foodType;\n\n    if (type === \"Aucun\") return;\n    let newSeller = { ...seller };\n    let newFoodTypes = [];\n    if (seller.foodTypes === undefined) return;\n    else {\n      newFoodTypes = seller.foodTypes;\n      let indexes = seller.foodTypes\n        .map((item, index) => (item === type ? index : \"\"))\n        .filter(String);\n      if (indexes[0] === -1) return;\n      else if (newFoodTypes.length > 1) {\n        newFoodTypes.splice(indexes[0], 1);\n      } else newFoodTypes = [];\n\n      newSeller[\"foodTypes\"] = newFoodTypes;\n      await refSellers.doc(auth.currentUser.uid).update({\n        foodTypes: newFoodTypes,\n      });\n      setSeller(newSeller);\n    }\n  }\n  return (\n    <UserContext.Provider\n      value={{\n        login,\n        subscribe,\n        sellerSubscribe,\n        saveHoliday,\n        logout,\n        user,\n        seller,\n        event,\n        setUser,\n        setSeller,\n        addEvent,\n        addToCard,\n        getServiceQuantityInCard,\n        loadingButtonAddToCard,\n        setLoadingButtonAddToCard,\n        setCurrentStepProcess,\n        currentStepProcess,\n        formatLabelTimePicker,\n        getAuthUserFromHisEmail,\n        updateUserEmail,\n        updateQuantityService,\n        signInWithGoogle,\n        getCurrentUserProfil,\n        verifyLogin,\n        updateCurrentUserProfil,\n        addSellerDescription,\n        setImageSellerDB,\n        addSellerServices,\n        addOneSellerService,\n        getServicesOfCurrentSellerFromDB,\n        addSellerDocuments,\n        getSellerDocumentsFromDB,\n        setSellerStatus,\n        updateSellerDocumentsStatus,\n        getSellersInDbWithUids,\n        deleteOldSellerPicture,\n        addSalesInDB,\n        updateEventStatus,\n        getSalesOfEventIdFromDB,\n        clearEvent,\n        getSalesOfSellerIdFromDB,\n        getEventOfSaleFromDB,\n        formateToDate,\n        formateToDateWithWords,\n        updateSaleStatusInDB,\n        updateSaleNote,\n        addViewsOfSeller,\n        getViewsOfSeller,\n        isSellerAllowedToModifyAndDeleteService,\n        deleteServiceOfSeller,\n        updateSellerProfil,\n        getSellerReferralCountFromDB,\n        getEventFromUid,\n        getReviewsOfSellerUid,\n        addReviewOfSellerUid,\n        sendInBlue_sendNotificationToSellerOfReview,\n        sendInBlue_addContactToNewsletter,\n        sendInBlue_sendInvitations,\n        sendInBlue_sendRecapToUserAfterPayment,\n        sendInBlue_sendNewSaleToSeller,\n        sendInBlue_sendToParrainAboutNewReferral,\n        sendInBlue_sendPaymentRequestToAdmin,\n        getWishList,\n        deleteItemFromWishList,\n        addItemToWishListOfUser,\n        isSellerInWishListOfUser,\n        getEmailOfSellerWithUid,\n        checkoutStart,\n        getSaleTokenOfEventFromDb,\n        checkoutCheck,\n        getTotalAmountDueToSeller,\n        homeSellersDisplay,\n        setHomeSellersDisplay,\n        getWishListCountOfSeller,\n        getSellerPosition,\n        getSellersCount,\n        sendInBlue_sendBillRequestToAdmin,\n        addFoodTypeToSeller,\n        deleteFoodTypeToSeller,\n        isCardWidgetOpen,\n        setIsCardWidgetOpen,\n        checkoutSubscription,\n        refSellers,\n      }}\n    >\n      {!loading && children}\n    </UserContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
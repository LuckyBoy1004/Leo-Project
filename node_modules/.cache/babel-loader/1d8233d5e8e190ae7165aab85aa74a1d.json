{"ast":null,"code":"import _slicedToArray from\"C:/Users/Home/Desktop/Boulot/Nivid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{useState,useEffect}from\"react\";import{useHistory}from\"react-router-dom\";import queryString from'query-string';import{useFirebase}from\"../assets/base-context\";var ConfirmEmail=function ConfirmEmail(){var firebaseContext=useFirebase();var auth=firebaseContext.auth();var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),userNewPassword=_useState2[0],setUserNewPassword=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),errorMessage=_useState4[0],setErrorMessage=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),confirmMessage=_useState6[0],setConfirmMessage=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),actionMode=_useState8[0],setActionMode=_useState8[1];var history=useHistory();var url=window.location.search;var params=queryString.parse(url);var mode=params.mode,oobCode=params.oobCode,continueUrl=params.continueUrl,lang=params.lang;useEffect(function(){setActionMode(mode);if(mode===\"resetPassword\"){handleResetPassword();}else if(mode===\"verifyEmail\"){handleVerifyEmail(oobCode,continueUrl,lang);}},[]);function handleVerifyEmail(oobCode,continueUrl,lang){auth.applyActionCode(oobCode).then(function(resp){// Email address has been verified.\nsetConfirmMessage(\"Votre email a bien été confirmé, vous allez être redirigé ...\");setTimeout(function(){history.push('/compte');},3000);}).catch(function(error){});}function handleResetPassword(){// Localize the UI to the selected language as determined by the lang\n// parameter.\n// Verify the password reset code is valid.\nauth.verifyPasswordResetCode(oobCode).then(function(email){var accountEmail=email;// TODO: Show the reset screen with the user's email and ask the user for\n}).catch(function(error){console.log(error);});}function handleConfirmNewPassword(){// the new password.\nvar newPassword=userNewPassword;// Save the new password.\nauth.confirmPasswordReset(oobCode,newPassword).then(function(resp){// Password reset has been confirmed and new password updated.\nsetConfirmMessage(\"Mot de passe réinitialisé avec succés, vous allez être redirigé ...\");setTimeout(function(){history.push('/compte');},3000);}).catch(function(error){console.log(error);});}return actionMode===\"resetPassword\"?confirmMessage.length<3?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Votre nouveau mot de passe\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:userNewPassword,onChange:function onChange(e){return setUserNewPassword(e.target.value);}}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return handleConfirmNewPassword();},children:\"Confirmer\"})]}):confirmMessage:actionMode===\"verifyEmail\"&&(confirmMessage?confirmMessage:errorMessage);};export default ConfirmEmail;","map":{"version":3,"sources":["C:/Users/Home/Desktop/Boulot/Nivid/src/pages/ConfirmEmail.js"],"names":["useState","useEffect","useHistory","queryString","useFirebase","ConfirmEmail","firebaseContext","auth","userNewPassword","setUserNewPassword","errorMessage","setErrorMessage","confirmMessage","setConfirmMessage","actionMode","setActionMode","history","url","window","location","search","params","parse","mode","oobCode","continueUrl","lang","handleResetPassword","handleVerifyEmail","applyActionCode","then","resp","setTimeout","push","catch","error","verifyPasswordResetCode","email","accountEmail","console","log","handleConfirmNewPassword","newPassword","confirmPasswordReset","length","e","target","value"],"mappings":"iPAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,WAAP,KAAwB,cAAxB,CACA,OAASC,WAAT,KAA4B,wBAA5B,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAEvB,GAAMC,CAAAA,eAAe,CAAGF,WAAW,EAAnC,CACA,GAAMG,CAAAA,IAAI,CAAGD,eAAe,CAACC,IAAhB,EAAb,CAHuB,cAKuBP,QAAQ,CAAC,EAAD,CAL/B,wCAKhBQ,eALgB,eAKCC,kBALD,8BAMiBT,QAAQ,CAAC,EAAD,CANzB,yCAMhBU,YANgB,eAMFC,eANE,8BAOqBX,QAAQ,CAAC,EAAD,CAP7B,yCAOhBY,cAPgB,eAOAC,iBAPA,8BAQab,QAAQ,CAAC,EAAD,CARrB,yCAQhBc,UARgB,eAQJC,aARI,eAUvB,GAAMC,CAAAA,OAAO,CAAGd,UAAU,EAA1B,CAEA,GAAIe,CAAAA,GAAG,CAAGC,MAAM,CAACC,QAAP,CAAgBC,MAA1B,CACA,GAAIC,CAAAA,MAAM,CAAGlB,WAAW,CAACmB,KAAZ,CAAkBL,GAAlB,CAAb,CAbuB,GAcjBM,CAAAA,IAdiB,CAcoBF,MAdpB,CAcjBE,IAdiB,CAcXC,OAdW,CAcoBH,MAdpB,CAcXG,OAdW,CAcFC,WAdE,CAcoBJ,MAdpB,CAcFI,WAdE,CAcWC,IAdX,CAcoBL,MAdpB,CAcWK,IAdX,CAgBvBzB,SAAS,CAAC,UAAM,CACZc,aAAa,CAACQ,IAAD,CAAb,CACA,GAAIA,IAAI,GAAK,eAAb,CAA8B,CAC1BI,mBAAmB,GACtB,CAFD,IAGK,IAAIJ,IAAI,GAAK,aAAb,CAA4B,CAC7BK,iBAAiB,CAACJ,OAAD,CAAUC,WAAV,CAAuBC,IAAvB,CAAjB,CACH,CACJ,CARQ,CAQN,EARM,CAAT,CAYA,QAASE,CAAAA,iBAAT,CAA2BJ,OAA3B,CAAoCC,WAApC,CAAiDC,IAAjD,CAAuD,CACnDnB,IAAI,CAACsB,eAAL,CAAqBL,OAArB,EAA8BM,IAA9B,CAAmC,SAACC,IAAD,CAAU,CACzC;AACAlB,iBAAiB,CAAC,+DAAD,CAAjB,CACAmB,UAAU,CAAC,UAAM,CACbhB,OAAO,CAACiB,IAAR,CAAa,SAAb,EACH,CAFS,CAEP,IAFO,CAAV,CAIH,CAPD,EAOGC,KAPH,CAOS,SAACC,KAAD,CAAW,CAEnB,CATD,EAUH,CAED,QAASR,CAAAA,mBAAT,EAA+B,CAC3B;AACA;AAEA;AACApB,IAAI,CAAC6B,uBAAL,CAA6BZ,OAA7B,EAAsCM,IAAtC,CAA2C,SAACO,KAAD,CAAW,CAClD,GAAIC,CAAAA,YAAY,CAAGD,KAAnB,CAEA;AAEH,CALD,EAKGH,KALH,CAKS,SAACC,KAAD,CAAW,CAChBI,OAAO,CAACC,GAAR,CAAYL,KAAZ,EACH,CAPD,EAQH,CAED,QAASM,CAAAA,wBAAT,EAAoC,CAChC;AACA,GAAIC,CAAAA,WAAW,CAAGlC,eAAlB,CAEA;AACAD,IAAI,CAACoC,oBAAL,CAA0BnB,OAA1B,CAAmCkB,WAAnC,EAAgDZ,IAAhD,CAAqD,SAACC,IAAD,CAAU,CAC3D;AACAlB,iBAAiB,CAAC,qEAAD,CAAjB,CACAmB,UAAU,CAAC,UAAM,CACbhB,OAAO,CAACiB,IAAR,CAAa,SAAb,EACH,CAFS,CAEP,IAFO,CAAV,CAIH,CAPD,EAOGC,KAPH,CAOS,SAACC,KAAD,CAAW,CAChBI,OAAO,CAACC,GAAR,CAAYL,KAAZ,EACH,CATD,EAUH,CAED,MAAOrB,CAAAA,UAAU,GAAK,eAAf,CACHF,cAAc,CAACgC,MAAf,CAAwB,CAAxB,cACI,oCACI,qDADJ,cAEI,cAAO,IAAI,CAAC,UAAZ,CAAuB,KAAK,CAAEpC,eAA9B,CAA+C,QAAQ,CAAE,kBAACqC,CAAD,QAAOpC,CAAAA,kBAAkB,CAACoC,CAAC,CAACC,MAAF,CAASC,KAAV,CAAzB,EAAzD,EAFJ,cAGI,eAAQ,OAAO,CAAE,yBAAMN,CAAAA,wBAAwB,EAA9B,EAAjB,uBAHJ,GADJ,CAOM7B,cARH,CAUDE,UAAU,GAAK,aAAf,GACEF,cAAc,CAAGA,cAAH,CAAoBF,YADpC,CAVN,CAcH,CAvFD,CAyFA,cAAeL,CAAAA,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport queryString from 'query-string';\r\nimport { useFirebase } from \"../assets/base-context\";\r\n\r\nconst ConfirmEmail = () => {\r\n    \r\n    const firebaseContext = useFirebase()\r\n    const auth = firebaseContext.auth()\r\n\r\n    const [userNewPassword, setUserNewPassword] = useState(\"\")\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n    const [confirmMessage, setConfirmMessage] = useState(\"\")\r\n    const [actionMode, setActionMode] = useState(\"\")\r\n\r\n    const history = useHistory()\r\n\r\n    let url = window.location.search;\r\n    let params = queryString.parse(url);\r\n    var { mode, oobCode, continueUrl, lang } = params\r\n\r\n    useEffect(() => {\r\n        setActionMode(mode)\r\n        if (mode === \"resetPassword\") {\r\n            handleResetPassword();\r\n        }\r\n        else if (mode === \"verifyEmail\") {\r\n            handleVerifyEmail(oobCode, continueUrl, lang);\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    function handleVerifyEmail(oobCode, continueUrl, lang) {\r\n        auth.applyActionCode(oobCode).then((resp) => {\r\n            // Email address has been verified.\r\n            setConfirmMessage(\"Votre email a bien été confirmé, vous allez être redirigé ...\")\r\n            setTimeout(() => {\r\n                history.push('/compte')\r\n            }, 3000)\r\n\r\n        }).catch((error) => {\r\n\r\n        });\r\n    }\r\n\r\n    function handleResetPassword() {\r\n        // Localize the UI to the selected language as determined by the lang\r\n        // parameter.\r\n\r\n        // Verify the password reset code is valid.\r\n        auth.verifyPasswordResetCode(oobCode).then((email) => {\r\n            var accountEmail = email;\r\n\r\n            // TODO: Show the reset screen with the user's email and ask the user for\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        });\r\n    }\r\n\r\n    function handleConfirmNewPassword() {\r\n        // the new password.\r\n        var newPassword = userNewPassword\r\n\r\n        // Save the new password.\r\n        auth.confirmPasswordReset(oobCode, newPassword).then((resp) => {\r\n            // Password reset has been confirmed and new password updated.\r\n            setConfirmMessage(\"Mot de passe réinitialisé avec succés, vous allez être redirigé ...\")\r\n            setTimeout(() => {\r\n                history.push('/compte')\r\n            }, 3000)\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        });\r\n    }\r\n\r\n    return actionMode === \"resetPassword\" ? (\r\n        confirmMessage.length < 3 ? (\r\n            <div>\r\n                <label>Votre nouveau mot de passe</label>\r\n                <input type=\"password\" value={userNewPassword} onChange={(e) => setUserNewPassword(e.target.value)} />\r\n                <button onClick={() => handleConfirmNewPassword()}>Confirmer</button>\r\n            </div>\r\n        )\r\n            : confirmMessage\r\n    )\r\n        : actionMode === \"verifyEmail\" && (\r\n            confirmMessage ? confirmMessage : errorMessage\r\n        )\r\n\r\n}\r\n\r\nexport default ConfirmEmail"]},"metadata":{},"sourceType":"module"}
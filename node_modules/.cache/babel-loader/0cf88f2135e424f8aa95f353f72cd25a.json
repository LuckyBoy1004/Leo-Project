{"ast":null,"code":"/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/CreateModel', 'model/CreateUpdateFolder', 'model/ErrorModel', 'model/GetFolder', 'model/GetFolderLists', 'model/GetFolders'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/CreateModel'), require('../model/CreateUpdateFolder'), require('../model/ErrorModel'), require('../model/GetFolder'), require('../model/GetFolderLists'), require('../model/GetFolders'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n\n    root.SibApiV3Sdk.FoldersApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateUpdateFolder, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetFolder, root.SibApiV3Sdk.GetFolderLists, root.SibApiV3Sdk.GetFolders);\n  }\n})(this, function (ApiClient, CreateModel, CreateUpdateFolder, ErrorModel, GetFolder, GetFolderLists, GetFolders) {\n  'use strict';\n  /**\n   * Folders service.\n   * @module api/FoldersApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new FoldersApi. \n   * @alias module:api/FoldersApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n\n  var exports = function exports(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n    /**\n     * Create a folder\n     * @param {module:model/CreateUpdateFolder} createFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n\n    this.createFolderWithHttpInfo = function (createFolder) {\n      var postBody = createFolder; // verify the required parameter 'createFolder' is set\n\n      if (createFolder === undefined || createFolder === null) {\n        throw new Error(\"Missing the required parameter 'createFolder' when calling createFolder\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n      return this.apiClient.callApi('/contacts/folders', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Create a folder\n     * @param {module:model/CreateUpdateFolder} createFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n\n\n    this.createFolder = function (createFolder) {\n      return this.createFolderWithHttpInfo(createFolder).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete a folder (and all its lists)\n     * @param {Number} folderId Id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteFolderWithHttpInfo = function (folderId) {\n      var postBody = null; // verify the required parameter 'folderId' is set\n\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling deleteFolder\");\n      }\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/folders/{folderId}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete a folder (and all its lists)\n     * @param {Number} folderId Id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteFolder = function (folderId) {\n      return this.deleteFolderWithHttpInfo(folderId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Returns a folder&#39;s details\n     * @param {Number} folderId id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolder} and HTTP response\n     */\n\n\n    this.getFolderWithHttpInfo = function (folderId) {\n      var postBody = null; // verify the required parameter 'folderId' is set\n\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling getFolder\");\n      }\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolder;\n      return this.apiClient.callApi('/contacts/folders/{folderId}', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Returns a folder&#39;s details\n     * @param {Number} folderId id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolder}\n     */\n\n\n    this.getFolder = function (folderId) {\n      return this.getFolderWithHttpInfo(folderId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolderLists} and HTTP response\n     */\n\n\n    this.getFolderListsWithHttpInfo = function (folderId, opts) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'folderId' is set\n\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling getFolderLists\");\n      }\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolderLists;\n      return this.apiClient.callApi('/contacts/folders/{folderId}/lists', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolderLists}\n     */\n\n\n    this.getFolderLists = function (folderId, opts) {\n      return this.getFolderListsWithHttpInfo(folderId, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get all folders\n     * @param {Number} limit Number of documents per page\n     * @param {Number} offset Index of the first document of the page\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolders} and HTTP response\n     */\n\n\n    this.getFoldersWithHttpInfo = function (limit, offset, opts) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'limit' is set\n\n      if (limit === undefined || limit === null) {\n        throw new Error(\"Missing the required parameter 'limit' when calling getFolders\");\n      } // verify the required parameter 'offset' is set\n\n\n      if (offset === undefined || offset === null) {\n        throw new Error(\"Missing the required parameter 'offset' when calling getFolders\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'limit': limit,\n        'offset': offset,\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolders;\n      return this.apiClient.callApi('/contacts/folders', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get all folders\n     * @param {Number} limit Number of documents per page\n     * @param {Number} offset Index of the first document of the page\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolders}\n     */\n\n\n    this.getFolders = function (limit, offset, opts) {\n      return this.getFoldersWithHttpInfo(limit, offset, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update a folder\n     * @param {Number} folderId Id of the folder\n     * @param {module:model/CreateUpdateFolder} updateFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateFolderWithHttpInfo = function (folderId, updateFolder) {\n      var postBody = updateFolder; // verify the required parameter 'folderId' is set\n\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling updateFolder\");\n      } // verify the required parameter 'updateFolder' is set\n\n\n      if (updateFolder === undefined || updateFolder === null) {\n        throw new Error(\"Missing the required parameter 'updateFolder' when calling updateFolder\");\n      }\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/folders/{folderId}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update a folder\n     * @param {Number} folderId Id of the folder\n     * @param {module:model/CreateUpdateFolder} updateFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateFolder = function (folderId, updateFolder) {\n      return this.updateFolderWithHttpInfo(folderId, updateFolder).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n  };\n\n  return exports;\n});","map":{"version":3,"sources":["/Users/bonnieclyde/Desktop/Nivid/node_modules/sib-api-v3-sdk/src/api/FoldersApi.js"],"names":["root","factory","define","amd","module","exports","require","SibApiV3Sdk","FoldersApi","ApiClient","CreateModel","CreateUpdateFolder","ErrorModel","GetFolder","GetFolderLists","GetFolders","apiClient","instance","createFolderWithHttpInfo","createFolder","postBody","undefined","Error","pathParams","queryParams","collectionQueryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","then","response_and_data","data","deleteFolderWithHttpInfo","folderId","deleteFolder","getFolderWithHttpInfo","getFolder","getFolderListsWithHttpInfo","opts","getFolderLists","getFoldersWithHttpInfo","limit","offset","getFolders","updateFolderWithHttpInfo","updateFolder"],"mappings":"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","sourcesContent":["/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/CreateModel', 'model/CreateUpdateFolder', 'model/ErrorModel', 'model/GetFolder', 'model/GetFolderLists', 'model/GetFolders'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/CreateModel'), require('../model/CreateUpdateFolder'), require('../model/ErrorModel'), require('../model/GetFolder'), require('../model/GetFolderLists'), require('../model/GetFolders'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.FoldersApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateUpdateFolder, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetFolder, root.SibApiV3Sdk.GetFolderLists, root.SibApiV3Sdk.GetFolders);\n  }\n}(this, function(ApiClient, CreateModel, CreateUpdateFolder, ErrorModel, GetFolder, GetFolderLists, GetFolders) {\n  'use strict';\n\n  /**\n   * Folders service.\n   * @module api/FoldersApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new FoldersApi. \n   * @alias module:api/FoldersApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Create a folder\n     * @param {module:model/CreateUpdateFolder} createFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createFolderWithHttpInfo = function(createFolder) {\n      var postBody = createFolder;\n\n      // verify the required parameter 'createFolder' is set\n      if (createFolder === undefined || createFolder === null) {\n        throw new Error(\"Missing the required parameter 'createFolder' when calling createFolder\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/contacts/folders', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a folder\n     * @param {module:model/CreateUpdateFolder} createFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createFolder = function(createFolder) {\n      return this.createFolderWithHttpInfo(createFolder)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a folder (and all its lists)\n     * @param {Number} folderId Id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteFolderWithHttpInfo = function(folderId) {\n      var postBody = null;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling deleteFolder\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a folder (and all its lists)\n     * @param {Number} folderId Id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteFolder = function(folderId) {\n      return this.deleteFolderWithHttpInfo(folderId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Returns a folder&#39;s details\n     * @param {Number} folderId id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolder} and HTTP response\n     */\n    this.getFolderWithHttpInfo = function(folderId) {\n      var postBody = null;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling getFolder\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolder;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Returns a folder&#39;s details\n     * @param {Number} folderId id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolder}\n     */\n    this.getFolder = function(folderId) {\n      return this.getFolderWithHttpInfo(folderId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolderLists} and HTTP response\n     */\n    this.getFolderListsWithHttpInfo = function(folderId, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling getFolderLists\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolderLists;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}/lists', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolderLists}\n     */\n    this.getFolderLists = function(folderId, opts) {\n      return this.getFolderListsWithHttpInfo(folderId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all folders\n     * @param {Number} limit Number of documents per page\n     * @param {Number} offset Index of the first document of the page\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolders} and HTTP response\n     */\n    this.getFoldersWithHttpInfo = function(limit, offset, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'limit' is set\n      if (limit === undefined || limit === null) {\n        throw new Error(\"Missing the required parameter 'limit' when calling getFolders\");\n      }\n\n      // verify the required parameter 'offset' is set\n      if (offset === undefined || offset === null) {\n        throw new Error(\"Missing the required parameter 'offset' when calling getFolders\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': limit,\n        'offset': offset,\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolders;\n\n      return this.apiClient.callApi(\n        '/contacts/folders', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all folders\n     * @param {Number} limit Number of documents per page\n     * @param {Number} offset Index of the first document of the page\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolders}\n     */\n    this.getFolders = function(limit, offset, opts) {\n      return this.getFoldersWithHttpInfo(limit, offset, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a folder\n     * @param {Number} folderId Id of the folder\n     * @param {module:model/CreateUpdateFolder} updateFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateFolderWithHttpInfo = function(folderId, updateFolder) {\n      var postBody = updateFolder;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling updateFolder\");\n      }\n\n      // verify the required parameter 'updateFolder' is set\n      if (updateFolder === undefined || updateFolder === null) {\n        throw new Error(\"Missing the required parameter 'updateFolder' when calling updateFolder\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a folder\n     * @param {Number} folderId Id of the folder\n     * @param {module:model/CreateUpdateFolder} updateFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateFolder = function(folderId, updateFolder) {\n      return this.updateFolderWithHttpInfo(folderId, updateFolder)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"]},"metadata":{},"sourceType":"script"}
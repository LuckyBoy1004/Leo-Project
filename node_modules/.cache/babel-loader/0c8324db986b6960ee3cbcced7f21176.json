{"ast":null,"code":"import _objectSpread from\"/Users/bc/Desktop/New Nivid/Leo-Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/bc/Desktop/New Nivid/Leo-Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/bc/Desktop/New Nivid/Leo-Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/bc/Desktop/New Nivid/Leo-Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/bc/Desktop/New Nivid/Leo-Project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React from'react';import PlacesAutocomplete,{geocodeByAddress,getLatLng}from'react-places-autocomplete';import mapImg from'../images/google-maps.png';import{GoogleApiWrapper}from'google-maps-react';var LocationSearchInput=/*#__PURE__*/function(_React$Component){_inherits(LocationSearchInput,_React$Component);var _super=_createSuper(LocationSearchInput);function LocationSearchInput(props){var _this;_classCallCheck(this,LocationSearchInput);_this=_super.call(this,props);_this.searchOptions={componentRestrictions:{country:\"fr\"},types:[_this.props.placeType]};_this.handleChange=function(address){_this.setState({address:address,isValid:false});_this.props.onChanged(address);};_this.handleSelect=function(address){_this.setState({address:address});geocodeByAddress(address).then(function(results){return getLatLng(results[0]);}).then(function(latLng){return _this.props.onChanged(address,latLng);}).then(function(){return _this.setState({isValid:true});}).catch(function(error){return console.error('Error',error);});};_this.state={address:_this.props.value,isValid:null};return _this;}_createClass(LocationSearchInput,[{key:\"componentDidMount\",value:function componentDidMount(){this.setState({isValid:this.props.isValid});}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/_jsx(PlacesAutocomplete,{value:this.state.address,onChange:this.handleChange,onSelect:this.handleSelect,searchOptions:this.searchOptions,children:function children(_ref){var getInputProps=_ref.getInputProps,suggestions=_ref.suggestions,getSuggestionItemProps=_ref.getSuggestionItemProps,loading=_ref.loading;return/*#__PURE__*/_jsxs(\"div\",{className:\"placeInputContainer\",style:{position:\"relative\"},children:[_this2.props.placeType!==\"(cities)\"&&/*#__PURE__*/_jsx(\"img\",{alt:\"\",src:mapImg}),/*#__PURE__*/_jsx(\"input\",_objectSpread({},getInputProps({placeholder:_this2.props.placeholder||'Chercher une adresse ...',className:\"location-search-input \".concat(_this2.state.isValid===true?\"valid\":_this2.state.isValid===null?\"\":\"notValid\")}))),/*#__PURE__*/_jsx(\"div\",{className:\"autocomplete-dropdown-container\",children:suggestions.slice(0,4).map(function(suggestion,i){var className=suggestion.active?'suggestion-item suggestion-item--active':'suggestion-item';// inline style for demonstration purpose\nvar style=suggestion.active?{backgroundColor:'rgb(230, 230, 230)',cursor:'pointer'}:{backgroundColor:'rgb(238, 238, 238)',cursor:'pointer'};return/*#__PURE__*/_jsxs(\"div\",_objectSpread(_objectSpread({},getSuggestionItemProps(suggestion,{className:className,style:style})),{},{children:[/*#__PURE__*/_jsx(\"img\",{src:\"/images/grey_marker.png\",alt:\"\"}),/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"suggestionDescriptionFirst\",children:suggestion.formattedSuggestion.mainText}),/*#__PURE__*/_jsx(\"span\",{className:\"suggestionDescriptionSecond\",children:suggestion.formattedSuggestion.secondaryText})]})]}),i);})})]});}});}}]);return LocationSearchInput;}(React.Component);export default GoogleApiWrapper({apiKey:\"AIzaSyDOQ_vau2uT4Gx_iLMVq2XfsUK3BPULVnY\"})(LocationSearchInput);","map":{"version":3,"sources":["/Users/bc/Desktop/New Nivid/Leo-Project/src/components/autocompletePlaces.js"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","mapImg","GoogleApiWrapper","LocationSearchInput","props","searchOptions","componentRestrictions","country","types","placeType","handleChange","address","setState","isValid","onChanged","handleSelect","then","results","latLng","catch","error","console","state","value","getInputProps","suggestions","getSuggestionItemProps","loading","position","placeholder","className","slice","map","suggestion","i","active","style","backgroundColor","cursor","formattedSuggestion","mainText","secondaryText","Component","apiKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\nimport mapImg from '../images/google-maps.png'\nimport { GoogleApiWrapper } from 'google-maps-react';\n\nclass LocationSearchInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { address: this.props.value, isValid: null };\n  }\n\n  componentDidMount() {\n    this.setState({ isValid: this.props.isValid })\n  }\n\n  searchOptions = {\n    componentRestrictions: { country: \"fr\" },\n    types: [this.props.placeType]\n  }\n\n  handleChange = address => {\n    this.setState({ address, isValid: false });\n    this.props.onChanged(address)\n  };\n\n  handleSelect = address => {\n    this.setState({ address });\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => this.props.onChanged(address, latLng))\n      .then(() => this.setState({ isValid: true }))\n      .catch(error => console.error('Error', error));\n\n  };\n\n\n  render() {\n    return (\n      <PlacesAutocomplete\n        value={this.state.address}\n        onChange={this.handleChange}\n        onSelect={this.handleSelect}\n        searchOptions={this.searchOptions}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div className=\"placeInputContainer\" style={{ position: \"relative\" }}>\n           {this.props.placeType !== \"(cities)\" && <img alt=\"\" src={mapImg} />} \n            <input\n              {...getInputProps({\n                placeholder: this.props.placeholder || 'Chercher une adresse ...',\n                className: `location-search-input ${this.state.isValid === true ? \"valid\" : this.state.isValid === null ? \"\" : \"notValid\"}`,\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {suggestions.slice(0, 4).map((suggestion, i) => {\n\n                const className = suggestion.active\n                  ? 'suggestion-item suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: 'rgb(230, 230, 230)', cursor: 'pointer' }\n                  : { backgroundColor: 'rgb(238, 238, 238)', cursor: 'pointer' };\n                return (\n                  <div\n                    key={i}\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <img src=\"/images/grey_marker.png\" alt=\"\" />\n                    <span>\n                      <span className=\"suggestionDescriptionFirst\">{suggestion.formattedSuggestion.mainText}</span>\n                      <span className=\"suggestionDescriptionSecond\">{suggestion.formattedSuggestion.secondaryText}</span>\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyDOQ_vau2uT4Gx_iLMVq2XfsUK3BPULVnY\")\n})(LocationSearchInput)"]},"metadata":{},"sourceType":"module"}
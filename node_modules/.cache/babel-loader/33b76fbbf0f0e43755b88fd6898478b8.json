{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\My Project\\\\Leo\\\\Nivid\\\\src\\\\pages\\\\ConfirmEmail.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { queryString } from 'query-string';\nimport { useFirebase } from \"../assets/base-context\";\n\nconst ConfirmEmail = () => {\n  _s();\n\n  const firebaseContext = useFirebase();\n  const auth = firebaseContext.auth();\n  const [userNewPassword, setUserNewPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [confirmMessage, setConfirmMessage] = useState(\"\");\n  const [actionMode, setActionMode] = useState(\"\");\n  const history = useHistory();\n  let url = window.location.search;\n  let params = queryString.parse(url);\n  var {\n    mode,\n    oobCode,\n    continueUrl,\n    lang\n  } = params;\n  useEffect(() => {\n    setActionMode(mode);\n\n    if (mode === \"resetPassword\") {\n      handleResetPassword();\n    } else if (mode === \"verifyEmail\") {\n      handleVerifyEmail(oobCode, continueUrl, lang);\n    }\n  }, []);\n\n  function handleVerifyEmail(oobCode, continueUrl, lang) {\n    auth.applyActionCode(oobCode).then(resp => {\n      // Email address has been verified.\n      setConfirmMessage(\"Votre email a bien été confirmé, vous allez être redirigé ...\");\n      setTimeout(() => {\n        history.push('/compte');\n      }, 3000);\n    }).catch(error => {});\n  }\n\n  function handleResetPassword() {\n    // Localize the UI to the selected language as determined by the lang\n    // parameter.\n    // Verify the password reset code is valid.\n    auth.verifyPasswordResetCode(oobCode).then(email => {\n      var accountEmail = email; // TODO: Show the reset screen with the user's email and ask the user for\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  function handleConfirmNewPassword() {\n    // the new password.\n    var newPassword = userNewPassword; // Save the new password.\n\n    auth.confirmPasswordReset(oobCode, newPassword).then(resp => {\n      // Password reset has been confirmed and new password updated.\n      setConfirmMessage(\"Mot de passe réinitialisé avec succés, vous allez être redirigé ...\");\n      setTimeout(() => {\n        history.push('/compte');\n      }, 3000);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  return actionMode === \"resetPassword\" ? confirmMessage.length < 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Votre nouveau mot de passe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: userNewPassword,\n      onChange: e => setUserNewPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleConfirmNewPassword(),\n      children: \"Confirmer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 13\n  }, this) : confirmMessage : actionMode === \"verifyEmail\" && (confirmMessage ? confirmMessage : errorMessage);\n};\n\n_s(ConfirmEmail, \"SgzycZOrlMxzHKENXlh+Tzsqi4I=\", false, function () {\n  return [useFirebase, useHistory];\n});\n\n_c = ConfirmEmail;\nexport default ConfirmEmail;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfirmEmail\");","map":{"version":3,"sources":["F:/My Project/Leo/Nivid/src/pages/ConfirmEmail.js"],"names":["useState","useEffect","useHistory","queryString","useFirebase","ConfirmEmail","firebaseContext","auth","userNewPassword","setUserNewPassword","errorMessage","setErrorMessage","confirmMessage","setConfirmMessage","actionMode","setActionMode","history","url","window","location","search","params","parse","mode","oobCode","continueUrl","lang","handleResetPassword","handleVerifyEmail","applyActionCode","then","resp","setTimeout","push","catch","error","verifyPasswordResetCode","email","accountEmail","console","log","handleConfirmNewPassword","newPassword","confirmPasswordReset","length","e","target","value"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAEvB,QAAMC,eAAe,GAAGF,WAAW,EAAnC;AACA,QAAMG,IAAI,GAAGD,eAAe,CAACC,IAAhB,EAAb;AAEA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAMgB,OAAO,GAAGd,UAAU,EAA1B;AAEA,MAAIe,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAA1B;AACA,MAAIC,MAAM,GAAGlB,WAAW,CAACmB,KAAZ,CAAkBL,GAAlB,CAAb;AACA,MAAI;AAAEM,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,WAAjB;AAA8BC,IAAAA;AAA9B,MAAuCL,MAA3C;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,aAAa,CAACQ,IAAD,CAAb;;AACA,QAAIA,IAAI,KAAK,eAAb,EAA8B;AAC1BI,MAAAA,mBAAmB;AACtB,KAFD,MAGK,IAAIJ,IAAI,KAAK,aAAb,EAA4B;AAC7BK,MAAAA,iBAAiB,CAACJ,OAAD,EAAUC,WAAV,EAAuBC,IAAvB,CAAjB;AACH;AACJ,GARQ,EAQN,EARM,CAAT;;AAYA,WAASE,iBAAT,CAA2BJ,OAA3B,EAAoCC,WAApC,EAAiDC,IAAjD,EAAuD;AACnDnB,IAAAA,IAAI,CAACsB,eAAL,CAAqBL,OAArB,EAA8BM,IAA9B,CAAoCC,IAAD,IAAU;AACzC;AACAlB,MAAAA,iBAAiB,CAAC,+DAAD,CAAjB;AACAmB,MAAAA,UAAU,CAAC,MAAM;AACbhB,QAAAA,OAAO,CAACiB,IAAR,CAAa,SAAb;AACH,OAFS,EAEP,IAFO,CAAV;AAIH,KAPD,EAOGC,KAPH,CAOUC,KAAD,IAAW,CAEnB,CATD;AAUH;;AAED,WAASR,mBAAT,GAA+B;AAC3B;AACA;AAEA;AACApB,IAAAA,IAAI,CAAC6B,uBAAL,CAA6BZ,OAA7B,EAAsCM,IAAtC,CAA4CO,KAAD,IAAW;AAClD,UAAIC,YAAY,GAAGD,KAAnB,CADkD,CAGlD;AAEH,KALD,EAKGH,KALH,CAKUC,KAAD,IAAW;AAChBI,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACH,KAPD;AAQH;;AAED,WAASM,wBAAT,GAAoC;AAChC;AACA,QAAIC,WAAW,GAAGlC,eAAlB,CAFgC,CAIhC;;AACAD,IAAAA,IAAI,CAACoC,oBAAL,CAA0BnB,OAA1B,EAAmCkB,WAAnC,EAAgDZ,IAAhD,CAAsDC,IAAD,IAAU;AAC3D;AACAlB,MAAAA,iBAAiB,CAAC,qEAAD,CAAjB;AACAmB,MAAAA,UAAU,CAAC,MAAM;AACbhB,QAAAA,OAAO,CAACiB,IAAR,CAAa,SAAb;AACH,OAFS,EAEP,IAFO,CAAV;AAIH,KAPD,EAOGC,KAPH,CAOUC,KAAD,IAAW;AAChBI,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACH,KATD;AAUH;;AAED,SAAOrB,UAAU,KAAK,eAAf,GACHF,cAAc,CAACgC,MAAf,GAAwB,CAAxB,gBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,KAAK,EAAEpC,eAA9B;AAA+C,MAAA,QAAQ,EAAGqC,CAAD,IAAOpC,kBAAkB,CAACoC,CAAC,CAACC,MAAF,CAASC,KAAV;AAAlF;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAE,MAAMN,wBAAwB,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,GAOM7B,cARH,GAUDE,UAAU,KAAK,aAAf,KACEF,cAAc,GAAGA,cAAH,GAAoBF,YADpC,CAVN;AAcH,CAvFD;;GAAML,Y;UAEsBD,W,EAQRF,U;;;KAVdG,Y;AAyFN,eAAeA,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { queryString } from 'query-string';\r\nimport { useFirebase } from \"../assets/base-context\";\r\n\r\nconst ConfirmEmail = () => {\r\n    \r\n    const firebaseContext = useFirebase()\r\n    const auth = firebaseContext.auth()\r\n\r\n    const [userNewPassword, setUserNewPassword] = useState(\"\")\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n    const [confirmMessage, setConfirmMessage] = useState(\"\")\r\n    const [actionMode, setActionMode] = useState(\"\")\r\n\r\n    const history = useHistory()\r\n\r\n    let url = window.location.search;\r\n    let params = queryString.parse(url);\r\n    var { mode, oobCode, continueUrl, lang } = params\r\n\r\n    useEffect(() => {\r\n        setActionMode(mode)\r\n        if (mode === \"resetPassword\") {\r\n            handleResetPassword();\r\n        }\r\n        else if (mode === \"verifyEmail\") {\r\n            handleVerifyEmail(oobCode, continueUrl, lang);\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    function handleVerifyEmail(oobCode, continueUrl, lang) {\r\n        auth.applyActionCode(oobCode).then((resp) => {\r\n            // Email address has been verified.\r\n            setConfirmMessage(\"Votre email a bien été confirmé, vous allez être redirigé ...\")\r\n            setTimeout(() => {\r\n                history.push('/compte')\r\n            }, 3000)\r\n\r\n        }).catch((error) => {\r\n\r\n        });\r\n    }\r\n\r\n    function handleResetPassword() {\r\n        // Localize the UI to the selected language as determined by the lang\r\n        // parameter.\r\n\r\n        // Verify the password reset code is valid.\r\n        auth.verifyPasswordResetCode(oobCode).then((email) => {\r\n            var accountEmail = email;\r\n\r\n            // TODO: Show the reset screen with the user's email and ask the user for\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        });\r\n    }\r\n\r\n    function handleConfirmNewPassword() {\r\n        // the new password.\r\n        var newPassword = userNewPassword\r\n\r\n        // Save the new password.\r\n        auth.confirmPasswordReset(oobCode, newPassword).then((resp) => {\r\n            // Password reset has been confirmed and new password updated.\r\n            setConfirmMessage(\"Mot de passe réinitialisé avec succés, vous allez être redirigé ...\")\r\n            setTimeout(() => {\r\n                history.push('/compte')\r\n            }, 3000)\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        });\r\n    }\r\n\r\n    return actionMode === \"resetPassword\" ? (\r\n        confirmMessage.length < 3 ? (\r\n            <div>\r\n                <label>Votre nouveau mot de passe</label>\r\n                <input type=\"password\" value={userNewPassword} onChange={(e) => setUserNewPassword(e.target.value)} />\r\n                <button onClick={() => handleConfirmNewPassword()}>Confirmer</button>\r\n            </div>\r\n        )\r\n            : confirmMessage\r\n    )\r\n        : actionMode === \"verifyEmail\" && (\r\n            confirmMessage ? confirmMessage : errorMessage\r\n        )\r\n\r\n}\r\n\r\nexport default ConfirmEmail"]},"metadata":{},"sourceType":"module"}
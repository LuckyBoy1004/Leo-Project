{"ast":null,"code":"/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/AddContactToList', 'model/CreateAttribute', 'model/CreateContact', 'model/CreateDoiContact', 'model/CreateList', 'model/CreateModel', 'model/CreateUpdateContactModel', 'model/CreateUpdateFolder', 'model/CreatedProcessId', 'model/ErrorModel', 'model/GetAttributes', 'model/GetContactCampaignStats', 'model/GetContacts', 'model/GetExtendedContactDetails', 'model/GetExtendedList', 'model/GetFolder', 'model/GetFolderLists', 'model/GetFolders', 'model/GetLists', 'model/PostContactInfo', 'model/RemoveContactFromList', 'model/RequestContactExport', 'model/RequestContactImport', 'model/UpdateAttribute', 'model/UpdateContact', 'model/UpdateList'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/AddContactToList'), require('../model/CreateAttribute'), require('../model/CreateContact'), require('../model/CreateDoiContact'), require('../model/CreateList'), require('../model/CreateModel'), require('../model/CreateUpdateContactModel'), require('../model/CreateUpdateFolder'), require('../model/CreatedProcessId'), require('../model/ErrorModel'), require('../model/GetAttributes'), require('../model/GetContactCampaignStats'), require('../model/GetContacts'), require('../model/GetExtendedContactDetails'), require('../model/GetExtendedList'), require('../model/GetFolder'), require('../model/GetFolderLists'), require('../model/GetFolders'), require('../model/GetLists'), require('../model/PostContactInfo'), require('../model/RemoveContactFromList'), require('../model/RequestContactExport'), require('../model/RequestContactImport'), require('../model/UpdateAttribute'), require('../model/UpdateContact'), require('../model/UpdateList'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n\n    root.SibApiV3Sdk.ContactsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AddContactToList, root.SibApiV3Sdk.CreateAttribute, root.SibApiV3Sdk.CreateContact, root.SibApiV3Sdk.CreateDoiContact, root.SibApiV3Sdk.CreateList, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateUpdateContactModel, root.SibApiV3Sdk.CreateUpdateFolder, root.SibApiV3Sdk.CreatedProcessId, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetAttributes, root.SibApiV3Sdk.GetContactCampaignStats, root.SibApiV3Sdk.GetContacts, root.SibApiV3Sdk.GetExtendedContactDetails, root.SibApiV3Sdk.GetExtendedList, root.SibApiV3Sdk.GetFolder, root.SibApiV3Sdk.GetFolderLists, root.SibApiV3Sdk.GetFolders, root.SibApiV3Sdk.GetLists, root.SibApiV3Sdk.PostContactInfo, root.SibApiV3Sdk.RemoveContactFromList, root.SibApiV3Sdk.RequestContactExport, root.SibApiV3Sdk.RequestContactImport, root.SibApiV3Sdk.UpdateAttribute, root.SibApiV3Sdk.UpdateContact, root.SibApiV3Sdk.UpdateList);\n  }\n})(this, function (ApiClient, AddContactToList, CreateAttribute, CreateContact, CreateDoiContact, CreateList, CreateModel, CreateUpdateContactModel, CreateUpdateFolder, CreatedProcessId, ErrorModel, GetAttributes, GetContactCampaignStats, GetContacts, GetExtendedContactDetails, GetExtendedList, GetFolder, GetFolderLists, GetFolders, GetLists, PostContactInfo, RemoveContactFromList, RequestContactExport, RequestContactImport, UpdateAttribute, UpdateContact, UpdateList) {\n  'use strict';\n  /**\n   * Contacts service.\n   * @module api/ContactsApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new ContactsApi. \n   * @alias module:api/ContactsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n\n  var exports = function exports(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n    /**\n     * Add existing contacts to a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/AddContactToList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostContactInfo} and HTTP response\n     */\n\n    this.addContactToListWithHttpInfo = function (listId, contactEmails) {\n      var postBody = contactEmails; // verify the required parameter 'listId' is set\n\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling addContactToList\");\n      } // verify the required parameter 'contactEmails' is set\n\n\n      if (contactEmails === undefined || contactEmails === null) {\n        throw new Error(\"Missing the required parameter 'contactEmails' when calling addContactToList\");\n      }\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = PostContactInfo;\n      return this.apiClient.callApi('/contacts/lists/{listId}/contacts/add', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Add existing contacts to a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/AddContactToList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostContactInfo}\n     */\n\n\n    this.addContactToList = function (listId, contactEmails) {\n      return this.addContactToListWithHttpInfo(listId, contactEmails).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Create contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the attribute\n     * @param {module:model/CreateAttribute} createAttribute Values to create an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.createAttributeWithHttpInfo = function (attributeCategory, attributeName, createAttribute) {\n      var postBody = createAttribute; // verify the required parameter 'attributeCategory' is set\n\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling createAttribute\");\n      } // verify the required parameter 'attributeName' is set\n\n\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling createAttribute\");\n      } // verify the required parameter 'createAttribute' is set\n\n\n      if (createAttribute === undefined || createAttribute === null) {\n        throw new Error(\"Missing the required parameter 'createAttribute' when calling createAttribute\");\n      }\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/attributes/{attributeCategory}/{attributeName}', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Create contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the attribute\n     * @param {module:model/CreateAttribute} createAttribute Values to create an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.createAttribute = function (attributeCategory, attributeName, createAttribute) {\n      return this.createAttributeWithHttpInfo(attributeCategory, attributeName, createAttribute).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Create a contact\n     * @param {module:model/CreateContact} createContact Values to create a contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateUpdateContactModel} and HTTP response\n     */\n\n\n    this.createContactWithHttpInfo = function (createContact) {\n      var postBody = createContact; // verify the required parameter 'createContact' is set\n\n      if (createContact === undefined || createContact === null) {\n        throw new Error(\"Missing the required parameter 'createContact' when calling createContact\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateUpdateContactModel;\n      return this.apiClient.callApi('/contacts', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Create a contact\n     * @param {module:model/CreateContact} createContact Values to create a contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateUpdateContactModel}\n     */\n\n\n    this.createContact = function (createContact) {\n      return this.createContactWithHttpInfo(createContact).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Create Contact via DOI (Double-Opt-In) Flow\n     * @param {module:model/CreateDoiContact} createDoiContact Values to create the Double opt-in (DOI) contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.createDoiContactWithHttpInfo = function (createDoiContact) {\n      var postBody = createDoiContact; // verify the required parameter 'createDoiContact' is set\n\n      if (createDoiContact === undefined || createDoiContact === null) {\n        throw new Error(\"Missing the required parameter 'createDoiContact' when calling createDoiContact\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/doubleOptinConfirmation', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Create Contact via DOI (Double-Opt-In) Flow\n     * @param {module:model/CreateDoiContact} createDoiContact Values to create the Double opt-in (DOI) contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.createDoiContact = function (createDoiContact) {\n      return this.createDoiContactWithHttpInfo(createDoiContact).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Create a folder\n     * @param {module:model/CreateUpdateFolder} createFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n\n\n    this.createFolderWithHttpInfo = function (createFolder) {\n      var postBody = createFolder; // verify the required parameter 'createFolder' is set\n\n      if (createFolder === undefined || createFolder === null) {\n        throw new Error(\"Missing the required parameter 'createFolder' when calling createFolder\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n      return this.apiClient.callApi('/contacts/folders', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Create a folder\n     * @param {module:model/CreateUpdateFolder} createFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n\n\n    this.createFolder = function (createFolder) {\n      return this.createFolderWithHttpInfo(createFolder).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Create a list\n     * @param {module:model/CreateList} createList Values to create a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n\n\n    this.createListWithHttpInfo = function (createList) {\n      var postBody = createList; // verify the required parameter 'createList' is set\n\n      if (createList === undefined || createList === null) {\n        throw new Error(\"Missing the required parameter 'createList' when calling createList\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n      return this.apiClient.callApi('/contacts/lists', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Create a list\n     * @param {module:model/CreateList} createList Values to create a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n\n\n    this.createList = function (createList) {\n      return this.createListWithHttpInfo(createList).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete an attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteAttributeWithHttpInfo = function (attributeCategory, attributeName) {\n      var postBody = null; // verify the required parameter 'attributeCategory' is set\n\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling deleteAttribute\");\n      } // verify the required parameter 'attributeName' is set\n\n\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling deleteAttribute\");\n      }\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/attributes/{attributeCategory}/{attributeName}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete an attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteAttribute = function (attributeCategory, attributeName) {\n      return this.deleteAttributeWithHttpInfo(attributeCategory, attributeName).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteContactWithHttpInfo = function (identifier) {\n      var postBody = null; // verify the required parameter 'identifier' is set\n\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling deleteContact\");\n      }\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/{identifier}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteContact = function (identifier) {\n      return this.deleteContactWithHttpInfo(identifier).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete a folder (and all its lists)\n     * @param {Number} folderId Id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteFolderWithHttpInfo = function (folderId) {\n      var postBody = null; // verify the required parameter 'folderId' is set\n\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling deleteFolder\");\n      }\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/folders/{folderId}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete a folder (and all its lists)\n     * @param {Number} folderId Id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteFolder = function (folderId) {\n      return this.deleteFolderWithHttpInfo(folderId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete a list\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteListWithHttpInfo = function (listId) {\n      var postBody = null; // verify the required parameter 'listId' is set\n\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling deleteList\");\n      }\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/lists/{listId}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete a list\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteList = function (listId) {\n      return this.deleteListWithHttpInfo(listId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * List all attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAttributes} and HTTP response\n     */\n\n\n    this.getAttributesWithHttpInfo = function () {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetAttributes;\n      return this.apiClient.callApi('/contacts/attributes', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * List all attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAttributes}\n     */\n\n\n    this.getAttributes = function () {\n      return this.getAttributesWithHttpInfo().then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get a contact&#39;s details\n     * @param {String} identifier Email (urlencoded) OR ID of the contact OR its SMS attribute value\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExtendedContactDetails} and HTTP response\n     */\n\n\n    this.getContactInfoWithHttpInfo = function (identifier) {\n      var postBody = null; // verify the required parameter 'identifier' is set\n\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling getContactInfo\");\n      }\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetExtendedContactDetails;\n      return this.apiClient.callApi('/contacts/{identifier}', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get a contact&#39;s details\n     * @param {String} identifier Email (urlencoded) OR ID of the contact OR its SMS attribute value\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExtendedContactDetails}\n     */\n\n\n    this.getContactInfo = function (identifier) {\n      return this.getContactInfoWithHttpInfo(identifier).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get email campaigns&#39; statistics for a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetContactCampaignStats} and HTTP response\n     */\n\n\n    this.getContactStatsWithHttpInfo = function (identifier, opts) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'identifier' is set\n\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling getContactStats\");\n      }\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetContactCampaignStats;\n      return this.apiClient.callApi('/contacts/{identifier}/campaignStats', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get email campaigns&#39; statistics for a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetContactCampaignStats}\n     */\n\n\n    this.getContactStats = function (identifier, opts) {\n      return this.getContactStatsWithHttpInfo(identifier, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get all the contacts\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetContacts} and HTTP response\n     */\n\n\n    this.getContactsWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'modifiedSince': opts['modifiedSince'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetContacts;\n      return this.apiClient.callApi('/contacts', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get all the contacts\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetContacts}\n     */\n\n\n    this.getContacts = function (opts) {\n      return this.getContactsWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get contacts in a list\n     * @param {Number} listId Id of the list\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetContacts} and HTTP response\n     */\n\n\n    this.getContactsFromListWithHttpInfo = function (listId, opts) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'listId' is set\n\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling getContactsFromList\");\n      }\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n        'modifiedSince': opts['modifiedSince'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetContacts;\n      return this.apiClient.callApi('/contacts/lists/{listId}/contacts', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get contacts in a list\n     * @param {Number} listId Id of the list\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetContacts}\n     */\n\n\n    this.getContactsFromList = function (listId, opts) {\n      return this.getContactsFromListWithHttpInfo(listId, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Returns a folder&#39;s details\n     * @param {Number} folderId id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolder} and HTTP response\n     */\n\n\n    this.getFolderWithHttpInfo = function (folderId) {\n      var postBody = null; // verify the required parameter 'folderId' is set\n\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling getFolder\");\n      }\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolder;\n      return this.apiClient.callApi('/contacts/folders/{folderId}', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Returns a folder&#39;s details\n     * @param {Number} folderId id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolder}\n     */\n\n\n    this.getFolder = function (folderId) {\n      return this.getFolderWithHttpInfo(folderId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolderLists} and HTTP response\n     */\n\n\n    this.getFolderListsWithHttpInfo = function (folderId, opts) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'folderId' is set\n\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling getFolderLists\");\n      }\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolderLists;\n      return this.apiClient.callApi('/contacts/folders/{folderId}/lists', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolderLists}\n     */\n\n\n    this.getFolderLists = function (folderId, opts) {\n      return this.getFolderListsWithHttpInfo(folderId, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get all folders\n     * @param {Number} limit Number of documents per page\n     * @param {Number} offset Index of the first document of the page\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolders} and HTTP response\n     */\n\n\n    this.getFoldersWithHttpInfo = function (limit, offset, opts) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'limit' is set\n\n      if (limit === undefined || limit === null) {\n        throw new Error(\"Missing the required parameter 'limit' when calling getFolders\");\n      } // verify the required parameter 'offset' is set\n\n\n      if (offset === undefined || offset === null) {\n        throw new Error(\"Missing the required parameter 'offset' when calling getFolders\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'limit': limit,\n        'offset': offset,\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolders;\n      return this.apiClient.callApi('/contacts/folders', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get all folders\n     * @param {Number} limit Number of documents per page\n     * @param {Number} offset Index of the first document of the page\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolders}\n     */\n\n\n    this.getFolders = function (limit, offset, opts) {\n      return this.getFoldersWithHttpInfo(limit, offset, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get a list&#39;s details\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExtendedList} and HTTP response\n     */\n\n\n    this.getListWithHttpInfo = function (listId) {\n      var postBody = null; // verify the required parameter 'listId' is set\n\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling getList\");\n      }\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetExtendedList;\n      return this.apiClient.callApi('/contacts/lists/{listId}', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get a list&#39;s details\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExtendedList}\n     */\n\n\n    this.getList = function (listId) {\n      return this.getListWithHttpInfo(listId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get all the lists\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetLists} and HTTP response\n     */\n\n\n    this.getListsWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetLists;\n      return this.apiClient.callApi('/contacts/lists', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get all the lists\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetLists}\n     */\n\n\n    this.getLists = function (opts) {\n      return this.getListsWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Import contacts\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input.\n     * @param {module:model/RequestContactImport} requestContactImport Values to import contacts in Sendinblue. To know more about the expected format, please have a look at &#x60;&#x60;https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response\n     */\n\n\n    this.importContactsWithHttpInfo = function (requestContactImport) {\n      var postBody = requestContactImport; // verify the required parameter 'requestContactImport' is set\n\n      if (requestContactImport === undefined || requestContactImport === null) {\n        throw new Error(\"Missing the required parameter 'requestContactImport' when calling importContacts\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreatedProcessId;\n      return this.apiClient.callApi('/contacts/import', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Import contacts\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input.\n     * @param {module:model/RequestContactImport} requestContactImport Values to import contacts in Sendinblue. To know more about the expected format, please have a look at &#x60;&#x60;https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}\n     */\n\n\n    this.importContacts = function (requestContactImport) {\n      return this.importContactsWithHttpInfo(requestContactImport).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete a contact from a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/RemoveContactFromList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostContactInfo} and HTTP response\n     */\n\n\n    this.removeContactFromListWithHttpInfo = function (listId, contactEmails) {\n      var postBody = contactEmails; // verify the required parameter 'listId' is set\n\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling removeContactFromList\");\n      } // verify the required parameter 'contactEmails' is set\n\n\n      if (contactEmails === undefined || contactEmails === null) {\n        throw new Error(\"Missing the required parameter 'contactEmails' when calling removeContactFromList\");\n      }\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = PostContactInfo;\n      return this.apiClient.callApi('/contacts/lists/{listId}/contacts/remove', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete a contact from a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/RemoveContactFromList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostContactInfo}\n     */\n\n\n    this.removeContactFromList = function (listId, contactEmails) {\n      return this.removeContactFromListWithHttpInfo(listId, contactEmails).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Export contacts\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.\n     * @param {module:model/RequestContactExport} requestContactExport Values to request a contact export\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response\n     */\n\n\n    this.requestContactExportWithHttpInfo = function (requestContactExport) {\n      var postBody = requestContactExport; // verify the required parameter 'requestContactExport' is set\n\n      if (requestContactExport === undefined || requestContactExport === null) {\n        throw new Error(\"Missing the required parameter 'requestContactExport' when calling requestContactExport\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreatedProcessId;\n      return this.apiClient.callApi('/contacts/export', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Export contacts\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.\n     * @param {module:model/RequestContactExport} requestContactExport Values to request a contact export\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}\n     */\n\n\n    this.requestContactExport = function (requestContactExport) {\n      return this.requestContactExportWithHttpInfo(requestContactExport).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @param {module:model/UpdateAttribute} updateAttribute Values to update an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateAttributeWithHttpInfo = function (attributeCategory, attributeName, updateAttribute) {\n      var postBody = updateAttribute; // verify the required parameter 'attributeCategory' is set\n\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling updateAttribute\");\n      } // verify the required parameter 'attributeName' is set\n\n\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling updateAttribute\");\n      } // verify the required parameter 'updateAttribute' is set\n\n\n      if (updateAttribute === undefined || updateAttribute === null) {\n        throw new Error(\"Missing the required parameter 'updateAttribute' when calling updateAttribute\");\n      }\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/attributes/{attributeCategory}/{attributeName}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @param {module:model/UpdateAttribute} updateAttribute Values to update an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateAttribute = function (attributeCategory, attributeName, updateAttribute) {\n      return this.updateAttributeWithHttpInfo(attributeCategory, attributeName, updateAttribute).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @param {module:model/UpdateContact} updateContact Values to update a contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateContactWithHttpInfo = function (identifier, updateContact) {\n      var postBody = updateContact; // verify the required parameter 'identifier' is set\n\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling updateContact\");\n      } // verify the required parameter 'updateContact' is set\n\n\n      if (updateContact === undefined || updateContact === null) {\n        throw new Error(\"Missing the required parameter 'updateContact' when calling updateContact\");\n      }\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/{identifier}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @param {module:model/UpdateContact} updateContact Values to update a contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateContact = function (identifier, updateContact) {\n      return this.updateContactWithHttpInfo(identifier, updateContact).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update a folder\n     * @param {Number} folderId Id of the folder\n     * @param {module:model/CreateUpdateFolder} updateFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateFolderWithHttpInfo = function (folderId, updateFolder) {\n      var postBody = updateFolder; // verify the required parameter 'folderId' is set\n\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling updateFolder\");\n      } // verify the required parameter 'updateFolder' is set\n\n\n      if (updateFolder === undefined || updateFolder === null) {\n        throw new Error(\"Missing the required parameter 'updateFolder' when calling updateFolder\");\n      }\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/folders/{folderId}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update a folder\n     * @param {Number} folderId Id of the folder\n     * @param {module:model/CreateUpdateFolder} updateFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateFolder = function (folderId, updateFolder) {\n      return this.updateFolderWithHttpInfo(folderId, updateFolder).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/UpdateList} updateList Values to update a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateListWithHttpInfo = function (listId, updateList) {\n      var postBody = updateList; // verify the required parameter 'listId' is set\n\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling updateList\");\n      } // verify the required parameter 'updateList' is set\n\n\n      if (updateList === undefined || updateList === null) {\n        throw new Error(\"Missing the required parameter 'updateList' when calling updateList\");\n      }\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/lists/{listId}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/UpdateList} updateList Values to update a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateList = function (listId, updateList) {\n      return this.updateListWithHttpInfo(listId, updateList).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n  };\n\n  return exports;\n});","map":{"version":3,"sources":["C:/Users/Home/Desktop/Boulot/Nivid/node_modules/sib-api-v3-sdk/src/api/ContactsApi.js"],"names":["root","factory","define","amd","module","exports","require","SibApiV3Sdk","ContactsApi","ApiClient","AddContactToList","CreateAttribute","CreateContact","CreateDoiContact","CreateList","CreateModel","CreateUpdateContactModel","CreateUpdateFolder","CreatedProcessId","ErrorModel","GetAttributes","GetContactCampaignStats","GetContacts","GetExtendedContactDetails","GetExtendedList","GetFolder","GetFolderLists","GetFolders","GetLists","PostContactInfo","RemoveContactFromList","RequestContactExport","RequestContactImport","UpdateAttribute","UpdateContact","UpdateList","apiClient","instance","addContactToListWithHttpInfo","listId","contactEmails","postBody","undefined","Error","pathParams","queryParams","collectionQueryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","addContactToList","then","response_and_data","data","createAttributeWithHttpInfo","attributeCategory","attributeName","createAttribute","createContactWithHttpInfo","createContact","createDoiContactWithHttpInfo","createDoiContact","createFolderWithHttpInfo","createFolder","createListWithHttpInfo","createList","deleteAttributeWithHttpInfo","deleteAttribute","deleteContactWithHttpInfo","identifier","deleteContact","deleteFolderWithHttpInfo","folderId","deleteFolder","deleteListWithHttpInfo","deleteList","getAttributesWithHttpInfo","getAttributes","getContactInfoWithHttpInfo","getContactInfo","getContactStatsWithHttpInfo","opts","getContactStats","getContactsWithHttpInfo","getContacts","getContactsFromListWithHttpInfo","getContactsFromList","getFolderWithHttpInfo","getFolder","getFolderListsWithHttpInfo","getFolderLists","getFoldersWithHttpInfo","limit","offset","getFolders","getListWithHttpInfo","getList","getListsWithHttpInfo","getLists","importContactsWithHttpInfo","requestContactImport","importContacts","removeContactFromListWithHttpInfo","removeContactFromList","requestContactExportWithHttpInfo","requestContactExport","updateAttributeWithHttpInfo","updateAttribute","updateContactWithHttpInfo","updateContact","updateFolderWithHttpInfo","updateFolder","updateListWithHttpInfo","updateList"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC,WAASA,IAAT,EAAeC,OAAf,EAAwB;AACvB,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AAC9C;AACAD,IAAAA,MAAM,CAAC,CAAC,WAAD,EAAc,wBAAd,EAAwC,uBAAxC,EAAiE,qBAAjE,EAAwF,wBAAxF,EAAkH,kBAAlH,EAAsI,mBAAtI,EAA2J,gCAA3J,EAA6L,0BAA7L,EAAyN,wBAAzN,EAAmP,kBAAnP,EAAuQ,qBAAvQ,EAA8R,+BAA9R,EAA+T,mBAA/T,EAAoV,iCAApV,EAAuX,uBAAvX,EAAgZ,iBAAhZ,EAAma,sBAAna,EAA2b,kBAA3b,EAA+c,gBAA/c,EAAie,uBAAje,EAA0f,6BAA1f,EAAyhB,4BAAzhB,EAAujB,4BAAvjB,EAAqlB,uBAArlB,EAA8mB,qBAA9mB,EAAqoB,kBAAroB,CAAD,EAA2pBD,OAA3pB,CAAN;AACD,GAHD,MAGO,IAAI,OAAOG,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,OAAzC,EAAkD;AACvD;AACAD,IAAAA,MAAM,CAACC,OAAP,GAAiBJ,OAAO,CAACK,OAAO,CAAC,cAAD,CAAR,EAA0BA,OAAO,CAAC,2BAAD,CAAjC,EAAgEA,OAAO,CAAC,0BAAD,CAAvE,EAAqGA,OAAO,CAAC,wBAAD,CAA5G,EAAwIA,OAAO,CAAC,2BAAD,CAA/I,EAA8KA,OAAO,CAAC,qBAAD,CAArL,EAA8MA,OAAO,CAAC,sBAAD,CAArN,EAA+OA,OAAO,CAAC,mCAAD,CAAtP,EAA6RA,OAAO,CAAC,6BAAD,CAApS,EAAqUA,OAAO,CAAC,2BAAD,CAA5U,EAA2WA,OAAO,CAAC,qBAAD,CAAlX,EAA2YA,OAAO,CAAC,wBAAD,CAAlZ,EAA8aA,OAAO,CAAC,kCAAD,CAArb,EAA2dA,OAAO,CAAC,sBAAD,CAAle,EAA4fA,OAAO,CAAC,oCAAD,CAAngB,EAA2iBA,OAAO,CAAC,0BAAD,CAAljB,EAAglBA,OAAO,CAAC,oBAAD,CAAvlB,EAA+mBA,OAAO,CAAC,yBAAD,CAAtnB,EAAmpBA,OAAO,CAAC,qBAAD,CAA1pB,EAAmrBA,OAAO,CAAC,mBAAD,CAA1rB,EAAitBA,OAAO,CAAC,0BAAD,CAAxtB,EAAsvBA,OAAO,CAAC,gCAAD,CAA7vB,EAAiyBA,OAAO,CAAC,+BAAD,CAAxyB,EAA20BA,OAAO,CAAC,+BAAD,CAAl1B,EAAq3BA,OAAO,CAAC,0BAAD,CAA53B,EAA05BA,OAAO,CAAC,wBAAD,CAAj6B,EAA67BA,OAAO,CAAC,qBAAD,CAAp8B,CAAxB;AACD,GAHM,MAGA;AACL;AACA,QAAI,CAACN,IAAI,CAACO,WAAV,EAAuB;AACrBP,MAAAA,IAAI,CAACO,WAAL,GAAmB,EAAnB;AACD;;AACDP,IAAAA,IAAI,CAACO,WAAL,CAAiBC,WAAjB,GAA+BP,OAAO,CAACD,IAAI,CAACO,WAAL,CAAiBE,SAAlB,EAA6BT,IAAI,CAACO,WAAL,CAAiBG,gBAA9C,EAAgEV,IAAI,CAACO,WAAL,CAAiBI,eAAjF,EAAkGX,IAAI,CAACO,WAAL,CAAiBK,aAAnH,EAAkIZ,IAAI,CAACO,WAAL,CAAiBM,gBAAnJ,EAAqKb,IAAI,CAACO,WAAL,CAAiBO,UAAtL,EAAkMd,IAAI,CAACO,WAAL,CAAiBQ,WAAnN,EAAgOf,IAAI,CAACO,WAAL,CAAiBS,wBAAjP,EAA2QhB,IAAI,CAACO,WAAL,CAAiBU,kBAA5R,EAAgTjB,IAAI,CAACO,WAAL,CAAiBW,gBAAjU,EAAmVlB,IAAI,CAACO,WAAL,CAAiBY,UAApW,EAAgXnB,IAAI,CAACO,WAAL,CAAiBa,aAAjY,EAAgZpB,IAAI,CAACO,WAAL,CAAiBc,uBAAja,EAA0brB,IAAI,CAACO,WAAL,CAAiBe,WAA3c,EAAwdtB,IAAI,CAACO,WAAL,CAAiBgB,yBAAze,EAAogBvB,IAAI,CAACO,WAAL,CAAiBiB,eAArhB,EAAsiBxB,IAAI,CAACO,WAAL,CAAiBkB,SAAvjB,EAAkkBzB,IAAI,CAACO,WAAL,CAAiBmB,cAAnlB,EAAmmB1B,IAAI,CAACO,WAAL,CAAiBoB,UAApnB,EAAgoB3B,IAAI,CAACO,WAAL,CAAiBqB,QAAjpB,EAA2pB5B,IAAI,CAACO,WAAL,CAAiBsB,eAA5qB,EAA6rB7B,IAAI,CAACO,WAAL,CAAiBuB,qBAA9sB,EAAquB9B,IAAI,CAACO,WAAL,CAAiBwB,oBAAtvB,EAA4wB/B,IAAI,CAACO,WAAL,CAAiByB,oBAA7xB,EAAmzBhC,IAAI,CAACO,WAAL,CAAiB0B,eAAp0B,EAAq1BjC,IAAI,CAACO,WAAL,CAAiB2B,aAAt2B,EAAq3BlC,IAAI,CAACO,WAAL,CAAiB4B,UAAt4B,CAAtC;AACD;AACF,CAdA,EAcC,IAdD,EAcO,UAAS1B,SAAT,EAAoBC,gBAApB,EAAsCC,eAAtC,EAAuDC,aAAvD,EAAsEC,gBAAtE,EAAwFC,UAAxF,EAAoGC,WAApG,EAAiHC,wBAAjH,EAA2IC,kBAA3I,EAA+JC,gBAA/J,EAAiLC,UAAjL,EAA6LC,aAA7L,EAA4MC,uBAA5M,EAAqOC,WAArO,EAAkPC,yBAAlP,EAA6QC,eAA7Q,EAA8RC,SAA9R,EAAySC,cAAzS,EAAyTC,UAAzT,EAAqUC,QAArU,EAA+UC,eAA/U,EAAgWC,qBAAhW,EAAuXC,oBAAvX,EAA6YC,oBAA7Y,EAAmaC,eAAna,EAAobC,aAApb,EAAmcC,UAAnc,EAA+c;AACrd;AAEA;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,MAAI9B,OAAO,GAAG,SAAVA,OAAU,CAAS+B,SAAT,EAAoB;AAChC,SAAKA,SAAL,GAAiBA,SAAS,IAAI3B,SAAS,CAAC4B,QAAxC;AAIA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,4BAAL,GAAoC,UAASC,MAAT,EAAiBC,aAAjB,EAAgC;AAClE,UAAIC,QAAQ,GAAGD,aAAf,CADkE,CAGlE;;AACA,UAAID,MAAM,KAAKG,SAAX,IAAwBH,MAAM,KAAK,IAAvC,EAA6C;AAC3C,cAAM,IAAII,KAAJ,CAAU,uEAAV,CAAN;AACD,OANiE,CAQlE;;;AACA,UAAIH,aAAa,KAAKE,SAAlB,IAA+BF,aAAa,KAAK,IAArD,EAA2D;AACzD,cAAM,IAAIG,KAAJ,CAAU,8EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,kBAAUL;AADK,OAAjB;AAGA,UAAIM,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGvB,eAAjB;AAEA,aAAO,KAAKO,SAAL,CAAeiB,OAAf,CACL,uCADK,EACoC,MADpC,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KApCD;AAsCA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKE,gBAAL,GAAwB,UAASf,MAAT,EAAiBC,aAAjB,EAAgC;AACtD,aAAO,KAAKF,4BAAL,CAAkCC,MAAlC,EAA0CC,aAA1C,EACJe,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKC,2BAAL,GAAmC,UAASC,iBAAT,EAA4BC,aAA5B,EAA2CC,eAA3C,EAA4D;AAC7F,UAAIpB,QAAQ,GAAGoB,eAAf,CAD6F,CAG7F;;AACA,UAAIF,iBAAiB,KAAKjB,SAAtB,IAAmCiB,iBAAiB,KAAK,IAA7D,EAAmE;AACjE,cAAM,IAAIhB,KAAJ,CAAU,iFAAV,CAAN;AACD,OAN4F,CAQ7F;;;AACA,UAAIiB,aAAa,KAAKlB,SAAlB,IAA+BkB,aAAa,KAAK,IAArD,EAA2D;AACzD,cAAM,IAAIjB,KAAJ,CAAU,6EAAV,CAAN;AACD,OAX4F,CAa7F;;;AACA,UAAIkB,eAAe,KAAKnB,SAApB,IAAiCmB,eAAe,KAAK,IAAzD,EAA+D;AAC7D,cAAM,IAAIlB,KAAJ,CAAU,+EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,6BAAqBe,iBADN;AAEf,yBAAiBC;AAFF,OAAjB;AAIA,UAAIf,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKhB,SAAL,CAAeiB,OAAf,CACL,0DADK,EACuD,MADvD,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA1CD;AA4CA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKS,eAAL,GAAuB,UAASF,iBAAT,EAA4BC,aAA5B,EAA2CC,eAA3C,EAA4D;AACjF,aAAO,KAAKH,2BAAL,CAAiCC,iBAAjC,EAAoDC,aAApD,EAAmEC,eAAnE,EACJN,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;;;AACI,SAAKK,yBAAL,GAAiC,UAASC,aAAT,EAAwB;AACvD,UAAItB,QAAQ,GAAGsB,aAAf,CADuD,CAGvD;;AACA,UAAIA,aAAa,KAAKrB,SAAlB,IAA+BqB,aAAa,KAAK,IAArD,EAA2D;AACzD,cAAM,IAAIpB,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGpC,wBAAjB;AAEA,aAAO,KAAKoB,SAAL,CAAeiB,OAAf,CACL,WADK,EACQ,MADR,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA9BD;AAgCA;AACJ;AACA;AACA;AACA;;;AACI,SAAKW,aAAL,GAAqB,UAASA,aAAT,EAAwB;AAC3C,aAAO,KAAKD,yBAAL,CAA+BC,aAA/B,EACJR,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;;;AACI,SAAKO,4BAAL,GAAoC,UAASC,gBAAT,EAA2B;AAC7D,UAAIxB,QAAQ,GAAGwB,gBAAf,CAD6D,CAG7D;;AACA,UAAIA,gBAAgB,KAAKvB,SAArB,IAAkCuB,gBAAgB,KAAK,IAA3D,EAAiE;AAC/D,cAAM,IAAItB,KAAJ,CAAU,iFAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKhB,SAAL,CAAeiB,OAAf,CACL,mCADK,EACgC,MADhC,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA9BD;AAgCA;AACJ;AACA;AACA;AACA;;;AACI,SAAKa,gBAAL,GAAwB,UAASA,gBAAT,EAA2B;AACjD,aAAO,KAAKD,4BAAL,CAAkCC,gBAAlC,EACJV,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;;;AACI,SAAKS,wBAAL,GAAgC,UAASC,YAAT,EAAuB;AACrD,UAAI1B,QAAQ,GAAG0B,YAAf,CADqD,CAGrD;;AACA,UAAIA,YAAY,KAAKzB,SAAjB,IAA8ByB,YAAY,KAAK,IAAnD,EAAyD;AACvD,cAAM,IAAIxB,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGrC,WAAjB;AAEA,aAAO,KAAKqB,SAAL,CAAeiB,OAAf,CACL,mBADK,EACgB,MADhB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA9BD;AAgCA;AACJ;AACA;AACA;AACA;;;AACI,SAAKe,YAAL,GAAoB,UAASA,YAAT,EAAuB;AACzC,aAAO,KAAKD,wBAAL,CAA8BC,YAA9B,EACJZ,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;;;AACI,SAAKW,sBAAL,GAA8B,UAASC,UAAT,EAAqB;AACjD,UAAI5B,QAAQ,GAAG4B,UAAf,CADiD,CAGjD;;AACA,UAAIA,UAAU,KAAK3B,SAAf,IAA4B2B,UAAU,KAAK,IAA/C,EAAqD;AACnD,cAAM,IAAI1B,KAAJ,CAAU,qEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGrC,WAAjB;AAEA,aAAO,KAAKqB,SAAL,CAAeiB,OAAf,CACL,iBADK,EACc,MADd,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA9BD;AAgCA;AACJ;AACA;AACA;AACA;;;AACI,SAAKiB,UAAL,GAAkB,UAASA,UAAT,EAAqB;AACrC,aAAO,KAAKD,sBAAL,CAA4BC,UAA5B,EACJd,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKa,2BAAL,GAAmC,UAASX,iBAAT,EAA4BC,aAA5B,EAA2C;AAC5E,UAAInB,QAAQ,GAAG,IAAf,CAD4E,CAG5E;;AACA,UAAIkB,iBAAiB,KAAKjB,SAAtB,IAAmCiB,iBAAiB,KAAK,IAA7D,EAAmE;AACjE,cAAM,IAAIhB,KAAJ,CAAU,iFAAV,CAAN;AACD,OAN2E,CAQ5E;;;AACA,UAAIiB,aAAa,KAAKlB,SAAlB,IAA+BkB,aAAa,KAAK,IAArD,EAA2D;AACzD,cAAM,IAAIjB,KAAJ,CAAU,6EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,6BAAqBe,iBADN;AAEf,yBAAiBC;AAFF,OAAjB;AAIA,UAAIf,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKhB,SAAL,CAAeiB,OAAf,CACL,0DADK,EACuD,QADvD,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KArCD;AAuCA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKmB,eAAL,GAAuB,UAASZ,iBAAT,EAA4BC,aAA5B,EAA2C;AAChE,aAAO,KAAKU,2BAAL,CAAiCX,iBAAjC,EAAoDC,aAApD,EACJL,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;;;AACI,SAAKe,yBAAL,GAAiC,UAASC,UAAT,EAAqB;AACpD,UAAIhC,QAAQ,GAAG,IAAf,CADoD,CAGpD;;AACA,UAAIgC,UAAU,KAAK/B,SAAf,IAA4B+B,UAAU,KAAK,IAA/C,EAAqD;AACnD,cAAM,IAAI9B,KAAJ,CAAU,wEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,sBAAc6B;AADC,OAAjB;AAGA,UAAI5B,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKhB,SAAL,CAAeiB,OAAf,CACL,wBADK,EACqB,QADrB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA/BD;AAiCA;AACJ;AACA;AACA;AACA;;;AACI,SAAKsB,aAAL,GAAqB,UAASD,UAAT,EAAqB;AACxC,aAAO,KAAKD,yBAAL,CAA+BC,UAA/B,EACJlB,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;;;AACI,SAAKkB,wBAAL,GAAgC,UAASC,QAAT,EAAmB;AACjD,UAAInC,QAAQ,GAAG,IAAf,CADiD,CAGjD;;AACA,UAAImC,QAAQ,KAAKlC,SAAb,IAA0BkC,QAAQ,KAAK,IAA3C,EAAiD;AAC/C,cAAM,IAAIjC,KAAJ,CAAU,qEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,oBAAYgC;AADG,OAAjB;AAGA,UAAI/B,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKhB,SAAL,CAAeiB,OAAf,CACL,8BADK,EAC2B,QAD3B,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA/BD;AAiCA;AACJ;AACA;AACA;AACA;;;AACI,SAAKyB,YAAL,GAAoB,UAASD,QAAT,EAAmB;AACrC,aAAO,KAAKD,wBAAL,CAA8BC,QAA9B,EACJrB,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;;;AACI,SAAKqB,sBAAL,GAA8B,UAASvC,MAAT,EAAiB;AAC7C,UAAIE,QAAQ,GAAG,IAAf,CAD6C,CAG7C;;AACA,UAAIF,MAAM,KAAKG,SAAX,IAAwBH,MAAM,KAAK,IAAvC,EAA6C;AAC3C,cAAM,IAAII,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,kBAAUL;AADK,OAAjB;AAGA,UAAIM,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKhB,SAAL,CAAeiB,OAAf,CACL,0BADK,EACuB,QADvB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA/BD;AAiCA;AACJ;AACA;AACA;AACA;;;AACI,SAAK2B,UAAL,GAAkB,UAASxC,MAAT,EAAiB;AACjC,aAAO,KAAKuC,sBAAL,CAA4BvC,MAA5B,EACJgB,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;;;AACI,SAAKuB,yBAAL,GAAiC,YAAW;AAC1C,UAAIvC,QAAQ,GAAG,IAAf;AAGA,UAAIG,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGhC,aAAjB;AAEA,aAAO,KAAKgB,SAAL,CAAeiB,OAAf,CACL,sBADK,EACmB,KADnB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KAzBD;AA2BA;AACJ;AACA;AACA;;;AACI,SAAK6B,aAAL,GAAqB,YAAW;AAC9B,aAAO,KAAKD,yBAAL,GACJzB,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;;;AACI,SAAKyB,0BAAL,GAAkC,UAAST,UAAT,EAAqB;AACrD,UAAIhC,QAAQ,GAAG,IAAf,CADqD,CAGrD;;AACA,UAAIgC,UAAU,KAAK/B,SAAf,IAA4B+B,UAAU,KAAK,IAA/C,EAAqD;AACnD,cAAM,IAAI9B,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,sBAAc6B;AADC,OAAjB;AAGA,UAAI5B,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG7B,yBAAjB;AAEA,aAAO,KAAKa,SAAL,CAAeiB,OAAf,CACL,wBADK,EACqB,KADrB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA/BD;AAiCA;AACJ;AACA;AACA;AACA;;;AACI,SAAK+B,cAAL,GAAsB,UAASV,UAAT,EAAqB;AACzC,aAAO,KAAKS,0BAAL,CAAgCT,UAAhC,EACJlB,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAK2B,2BAAL,GAAmC,UAASX,UAAT,EAAqBY,IAArB,EAA2B;AAC5DA,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,UAAI5C,QAAQ,GAAG,IAAf,CAF4D,CAI5D;;AACA,UAAIgC,UAAU,KAAK/B,SAAf,IAA4B+B,UAAU,KAAK,IAA/C,EAAqD;AACnD,cAAM,IAAI9B,KAAJ,CAAU,0EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,sBAAc6B;AADC,OAAjB;AAGA,UAAI5B,WAAW,GAAG;AAChB,qBAAawC,IAAI,CAAC,WAAD,CADD;AAEhB,mBAAWA,IAAI,CAAC,SAAD;AAFC,OAAlB;AAIA,UAAIvC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG/B,uBAAjB;AAEA,aAAO,KAAKe,SAAL,CAAeiB,OAAf,CACL,sCADK,EACmC,KADnC,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KAlCD;AAoCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKkC,eAAL,GAAuB,UAASb,UAAT,EAAqBY,IAArB,EAA2B;AAChD,aAAO,KAAKD,2BAAL,CAAiCX,UAAjC,EAA6CY,IAA7C,EACJ9B,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAK8B,uBAAL,GAA+B,UAASF,IAAT,EAAe;AAC5CA,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,UAAI5C,QAAQ,GAAG,IAAf;AAGA,UAAIG,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG;AAChB,iBAASwC,IAAI,CAAC,OAAD,CADG;AAEhB,kBAAUA,IAAI,CAAC,QAAD,CAFE;AAGhB,yBAAiBA,IAAI,CAAC,eAAD,CAHL;AAIhB,gBAAQA,IAAI,CAAC,MAAD;AAJI,OAAlB;AAMA,UAAIvC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG9B,WAAjB;AAEA,aAAO,KAAKc,SAAL,CAAeiB,OAAf,CACL,WADK,EACQ,KADR,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA9BD;AAgCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKoC,WAAL,GAAmB,UAASH,IAAT,EAAe;AAChC,aAAO,KAAKE,uBAAL,CAA6BF,IAA7B,EACJ9B,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKgC,+BAAL,GAAuC,UAASlD,MAAT,EAAiB8C,IAAjB,EAAuB;AAC5DA,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,UAAI5C,QAAQ,GAAG,IAAf,CAF4D,CAI5D;;AACA,UAAIF,MAAM,KAAKG,SAAX,IAAwBH,MAAM,KAAK,IAAvC,EAA6C;AAC3C,cAAM,IAAII,KAAJ,CAAU,0EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,kBAAUL;AADK,OAAjB;AAGA,UAAIM,WAAW,GAAG;AAChB,yBAAiBwC,IAAI,CAAC,eAAD,CADL;AAEhB,iBAASA,IAAI,CAAC,OAAD,CAFG;AAGhB,kBAAUA,IAAI,CAAC,QAAD,CAHE;AAIhB,gBAAQA,IAAI,CAAC,MAAD;AAJI,OAAlB;AAMA,UAAIvC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG9B,WAAjB;AAEA,aAAO,KAAKc,SAAL,CAAeiB,OAAf,CACL,mCADK,EACgC,KADhC,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KApCD;AAsCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKsC,mBAAL,GAA2B,UAASnD,MAAT,EAAiB8C,IAAjB,EAAuB;AAChD,aAAO,KAAKI,+BAAL,CAAqClD,MAArC,EAA6C8C,IAA7C,EACJ9B,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;;;AACI,SAAKkC,qBAAL,GAA6B,UAASf,QAAT,EAAmB;AAC9C,UAAInC,QAAQ,GAAG,IAAf,CAD8C,CAG9C;;AACA,UAAImC,QAAQ,KAAKlC,SAAb,IAA0BkC,QAAQ,KAAK,IAA3C,EAAiD;AAC/C,cAAM,IAAIjC,KAAJ,CAAU,kEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,oBAAYgC;AADG,OAAjB;AAGA,UAAI/B,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG3B,SAAjB;AAEA,aAAO,KAAKW,SAAL,CAAeiB,OAAf,CACL,8BADK,EAC2B,KAD3B,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA/BD;AAiCA;AACJ;AACA;AACA;AACA;;;AACI,SAAKwC,SAAL,GAAiB,UAAShB,QAAT,EAAmB;AAClC,aAAO,KAAKe,qBAAL,CAA2Bf,QAA3B,EACJrB,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKoC,0BAAL,GAAkC,UAASjB,QAAT,EAAmBS,IAAnB,EAAyB;AACzDA,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,UAAI5C,QAAQ,GAAG,IAAf,CAFyD,CAIzD;;AACA,UAAImC,QAAQ,KAAKlC,SAAb,IAA0BkC,QAAQ,KAAK,IAA3C,EAAiD;AAC/C,cAAM,IAAIjC,KAAJ,CAAU,uEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,oBAAYgC;AADG,OAAjB;AAGA,UAAI/B,WAAW,GAAG;AAChB,iBAASwC,IAAI,CAAC,OAAD,CADG;AAEhB,kBAAUA,IAAI,CAAC,QAAD,CAFE;AAGhB,gBAAQA,IAAI,CAAC,MAAD;AAHI,OAAlB;AAKA,UAAIvC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG1B,cAAjB;AAEA,aAAO,KAAKU,SAAL,CAAeiB,OAAf,CACL,oCADK,EACiC,KADjC,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KAnCD;AAqCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAK0C,cAAL,GAAsB,UAASlB,QAAT,EAAmBS,IAAnB,EAAyB;AAC7C,aAAO,KAAKQ,0BAAL,CAAgCjB,QAAhC,EAA0CS,IAA1C,EACJ9B,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKsC,sBAAL,GAA8B,UAASC,KAAT,EAAgBC,MAAhB,EAAwBZ,IAAxB,EAA8B;AAC1DA,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,UAAI5C,QAAQ,GAAG,IAAf,CAF0D,CAI1D;;AACA,UAAIuD,KAAK,KAAKtD,SAAV,IAAuBsD,KAAK,KAAK,IAArC,EAA2C;AACzC,cAAM,IAAIrD,KAAJ,CAAU,gEAAV,CAAN;AACD,OAPyD,CAS1D;;;AACA,UAAIsD,MAAM,KAAKvD,SAAX,IAAwBuD,MAAM,KAAK,IAAvC,EAA6C;AAC3C,cAAM,IAAItD,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG;AAChB,iBAASmD,KADO;AAEhB,kBAAUC,MAFM;AAGhB,gBAAQZ,IAAI,CAAC,MAAD;AAHI,OAAlB;AAKA,UAAIvC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGzB,UAAjB;AAEA,aAAO,KAAKS,SAAL,CAAeiB,OAAf,CACL,mBADK,EACgB,KADhB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KAvCD;AAyCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAK8C,UAAL,GAAkB,UAASF,KAAT,EAAgBC,MAAhB,EAAwBZ,IAAxB,EAA8B;AAC9C,aAAO,KAAKU,sBAAL,CAA4BC,KAA5B,EAAmCC,MAAnC,EAA2CZ,IAA3C,EACJ9B,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;;;AACI,SAAK0C,mBAAL,GAA2B,UAAS5D,MAAT,EAAiB;AAC1C,UAAIE,QAAQ,GAAG,IAAf,CAD0C,CAG1C;;AACA,UAAIF,MAAM,KAAKG,SAAX,IAAwBH,MAAM,KAAK,IAAvC,EAA6C;AAC3C,cAAM,IAAII,KAAJ,CAAU,8DAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,kBAAUL;AADK,OAAjB;AAGA,UAAIM,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG5B,eAAjB;AAEA,aAAO,KAAKY,SAAL,CAAeiB,OAAf,CACL,0BADK,EACuB,KADvB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA/BD;AAiCA;AACJ;AACA;AACA;AACA;;;AACI,SAAKgD,OAAL,GAAe,UAAS7D,MAAT,EAAiB;AAC9B,aAAO,KAAK4D,mBAAL,CAAyB5D,MAAzB,EACJgB,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAK4C,oBAAL,GAA4B,UAAShB,IAAT,EAAe;AACzCA,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,UAAI5C,QAAQ,GAAG,IAAf;AAGA,UAAIG,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG;AAChB,iBAASwC,IAAI,CAAC,OAAD,CADG;AAEhB,kBAAUA,IAAI,CAAC,QAAD,CAFE;AAGhB,gBAAQA,IAAI,CAAC,MAAD;AAHI,OAAlB;AAKA,UAAIvC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGxB,QAAjB;AAEA,aAAO,KAAKQ,SAAL,CAAeiB,OAAf,CACL,iBADK,EACc,KADd,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA7BD;AA+BA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKkD,QAAL,GAAgB,UAASjB,IAAT,EAAe;AAC7B,aAAO,KAAKgB,oBAAL,CAA0BhB,IAA1B,EACJ9B,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAK8C,0BAAL,GAAkC,UAASC,oBAAT,EAA+B;AAC/D,UAAI/D,QAAQ,GAAG+D,oBAAf,CAD+D,CAG/D;;AACA,UAAIA,oBAAoB,KAAK9D,SAAzB,IAAsC8D,oBAAoB,KAAK,IAAnE,EAAyE;AACvE,cAAM,IAAI7D,KAAJ,CAAU,mFAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGlC,gBAAjB;AAEA,aAAO,KAAKkB,SAAL,CAAeiB,OAAf,CACL,kBADK,EACe,MADf,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA9BD;AAgCA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKqD,cAAL,GAAsB,UAASD,oBAAT,EAA+B;AACnD,aAAO,KAAKD,0BAAL,CAAgCC,oBAAhC,EACJjD,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKiD,iCAAL,GAAyC,UAASnE,MAAT,EAAiBC,aAAjB,EAAgC;AACvE,UAAIC,QAAQ,GAAGD,aAAf,CADuE,CAGvE;;AACA,UAAID,MAAM,KAAKG,SAAX,IAAwBH,MAAM,KAAK,IAAvC,EAA6C;AAC3C,cAAM,IAAII,KAAJ,CAAU,4EAAV,CAAN;AACD,OANsE,CAQvE;;;AACA,UAAIH,aAAa,KAAKE,SAAlB,IAA+BF,aAAa,KAAK,IAArD,EAA2D;AACzD,cAAM,IAAIG,KAAJ,CAAU,mFAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,kBAAUL;AADK,OAAjB;AAGA,UAAIM,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGvB,eAAjB;AAEA,aAAO,KAAKO,SAAL,CAAeiB,OAAf,CACL,0CADK,EACuC,MADvC,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KApCD;AAsCA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKuD,qBAAL,GAA6B,UAASpE,MAAT,EAAiBC,aAAjB,EAAgC;AAC3D,aAAO,KAAKkE,iCAAL,CAAuCnE,MAAvC,EAA+CC,aAA/C,EACJe,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKmD,gCAAL,GAAwC,UAASC,oBAAT,EAA+B;AACrE,UAAIpE,QAAQ,GAAGoE,oBAAf,CADqE,CAGrE;;AACA,UAAIA,oBAAoB,KAAKnE,SAAzB,IAAsCmE,oBAAoB,KAAK,IAAnE,EAAyE;AACvE,cAAM,IAAIlE,KAAJ,CAAU,yFAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGlC,gBAAjB;AAEA,aAAO,KAAKkB,SAAL,CAAeiB,OAAf,CACL,kBADK,EACe,MADf,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA9BD;AAgCA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKyD,oBAAL,GAA4B,UAASA,oBAAT,EAA+B;AACzD,aAAO,KAAKD,gCAAL,CAAsCC,oBAAtC,EACJtD,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKqD,2BAAL,GAAmC,UAASnD,iBAAT,EAA4BC,aAA5B,EAA2CmD,eAA3C,EAA4D;AAC7F,UAAItE,QAAQ,GAAGsE,eAAf,CAD6F,CAG7F;;AACA,UAAIpD,iBAAiB,KAAKjB,SAAtB,IAAmCiB,iBAAiB,KAAK,IAA7D,EAAmE;AACjE,cAAM,IAAIhB,KAAJ,CAAU,iFAAV,CAAN;AACD,OAN4F,CAQ7F;;;AACA,UAAIiB,aAAa,KAAKlB,SAAlB,IAA+BkB,aAAa,KAAK,IAArD,EAA2D;AACzD,cAAM,IAAIjB,KAAJ,CAAU,6EAAV,CAAN;AACD,OAX4F,CAa7F;;;AACA,UAAIoE,eAAe,KAAKrE,SAApB,IAAiCqE,eAAe,KAAK,IAAzD,EAA+D;AAC7D,cAAM,IAAIpE,KAAJ,CAAU,+EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,6BAAqBe,iBADN;AAEf,yBAAiBC;AAFF,OAAjB;AAIA,UAAIf,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKhB,SAAL,CAAeiB,OAAf,CACL,0DADK,EACuD,KADvD,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA1CD;AA4CA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAK2D,eAAL,GAAuB,UAASpD,iBAAT,EAA4BC,aAA5B,EAA2CmD,eAA3C,EAA4D;AACjF,aAAO,KAAKD,2BAAL,CAAiCnD,iBAAjC,EAAoDC,aAApD,EAAmEmD,eAAnE,EACJxD,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKuD,yBAAL,GAAiC,UAASvC,UAAT,EAAqBwC,aAArB,EAAoC;AACnE,UAAIxE,QAAQ,GAAGwE,aAAf,CADmE,CAGnE;;AACA,UAAIxC,UAAU,KAAK/B,SAAf,IAA4B+B,UAAU,KAAK,IAA/C,EAAqD;AACnD,cAAM,IAAI9B,KAAJ,CAAU,wEAAV,CAAN;AACD,OANkE,CAQnE;;;AACA,UAAIsE,aAAa,KAAKvE,SAAlB,IAA+BuE,aAAa,KAAK,IAArD,EAA2D;AACzD,cAAM,IAAItE,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,sBAAc6B;AADC,OAAjB;AAGA,UAAI5B,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKhB,SAAL,CAAeiB,OAAf,CACL,wBADK,EACqB,KADrB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KApCD;AAsCA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAK6D,aAAL,GAAqB,UAASxC,UAAT,EAAqBwC,aAArB,EAAoC;AACvD,aAAO,KAAKD,yBAAL,CAA+BvC,UAA/B,EAA2CwC,aAA3C,EACJ1D,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKyD,wBAAL,GAAgC,UAAStC,QAAT,EAAmBuC,YAAnB,EAAiC;AAC/D,UAAI1E,QAAQ,GAAG0E,YAAf,CAD+D,CAG/D;;AACA,UAAIvC,QAAQ,KAAKlC,SAAb,IAA0BkC,QAAQ,KAAK,IAA3C,EAAiD;AAC/C,cAAM,IAAIjC,KAAJ,CAAU,qEAAV,CAAN;AACD,OAN8D,CAQ/D;;;AACA,UAAIwE,YAAY,KAAKzE,SAAjB,IAA8ByE,YAAY,KAAK,IAAnD,EAAyD;AACvD,cAAM,IAAIxE,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,oBAAYgC;AADG,OAAjB;AAGA,UAAI/B,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKhB,SAAL,CAAeiB,OAAf,CACL,8BADK,EAC2B,KAD3B,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KApCD;AAsCA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAK+D,YAAL,GAAoB,UAASvC,QAAT,EAAmBuC,YAAnB,EAAiC;AACnD,aAAO,KAAKD,wBAAL,CAA8BtC,QAA9B,EAAwCuC,YAAxC,EACJ5D,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAK2D,sBAAL,GAA8B,UAAS7E,MAAT,EAAiB8E,UAAjB,EAA6B;AACzD,UAAI5E,QAAQ,GAAG4E,UAAf,CADyD,CAGzD;;AACA,UAAI9E,MAAM,KAAKG,SAAX,IAAwBH,MAAM,KAAK,IAAvC,EAA6C;AAC3C,cAAM,IAAII,KAAJ,CAAU,iEAAV,CAAN;AACD,OANwD,CAQzD;;;AACA,UAAI0E,UAAU,KAAK3E,SAAf,IAA4B2E,UAAU,KAAK,IAA/C,EAAqD;AACnD,cAAM,IAAI1E,KAAJ,CAAU,qEAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,kBAAUL;AADK,OAAjB;AAGA,UAAIM,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKhB,SAAL,CAAeiB,OAAf,CACL,0BADK,EACuB,KADvB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KApCD;AAsCA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKiE,UAAL,GAAkB,UAAS9E,MAAT,EAAiB8E,UAAjB,EAA6B;AAC7C,aAAO,KAAKD,sBAAL,CAA4B7E,MAA5B,EAAoC8E,UAApC,EACJ9D,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAMD,GAh+CD;;AAk+CA,SAAOpD,OAAP;AACD,CAjgDA,CAAD","sourcesContent":["/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/AddContactToList', 'model/CreateAttribute', 'model/CreateContact', 'model/CreateDoiContact', 'model/CreateList', 'model/CreateModel', 'model/CreateUpdateContactModel', 'model/CreateUpdateFolder', 'model/CreatedProcessId', 'model/ErrorModel', 'model/GetAttributes', 'model/GetContactCampaignStats', 'model/GetContacts', 'model/GetExtendedContactDetails', 'model/GetExtendedList', 'model/GetFolder', 'model/GetFolderLists', 'model/GetFolders', 'model/GetLists', 'model/PostContactInfo', 'model/RemoveContactFromList', 'model/RequestContactExport', 'model/RequestContactImport', 'model/UpdateAttribute', 'model/UpdateContact', 'model/UpdateList'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/AddContactToList'), require('../model/CreateAttribute'), require('../model/CreateContact'), require('../model/CreateDoiContact'), require('../model/CreateList'), require('../model/CreateModel'), require('../model/CreateUpdateContactModel'), require('../model/CreateUpdateFolder'), require('../model/CreatedProcessId'), require('../model/ErrorModel'), require('../model/GetAttributes'), require('../model/GetContactCampaignStats'), require('../model/GetContacts'), require('../model/GetExtendedContactDetails'), require('../model/GetExtendedList'), require('../model/GetFolder'), require('../model/GetFolderLists'), require('../model/GetFolders'), require('../model/GetLists'), require('../model/PostContactInfo'), require('../model/RemoveContactFromList'), require('../model/RequestContactExport'), require('../model/RequestContactImport'), require('../model/UpdateAttribute'), require('../model/UpdateContact'), require('../model/UpdateList'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.ContactsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AddContactToList, root.SibApiV3Sdk.CreateAttribute, root.SibApiV3Sdk.CreateContact, root.SibApiV3Sdk.CreateDoiContact, root.SibApiV3Sdk.CreateList, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateUpdateContactModel, root.SibApiV3Sdk.CreateUpdateFolder, root.SibApiV3Sdk.CreatedProcessId, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetAttributes, root.SibApiV3Sdk.GetContactCampaignStats, root.SibApiV3Sdk.GetContacts, root.SibApiV3Sdk.GetExtendedContactDetails, root.SibApiV3Sdk.GetExtendedList, root.SibApiV3Sdk.GetFolder, root.SibApiV3Sdk.GetFolderLists, root.SibApiV3Sdk.GetFolders, root.SibApiV3Sdk.GetLists, root.SibApiV3Sdk.PostContactInfo, root.SibApiV3Sdk.RemoveContactFromList, root.SibApiV3Sdk.RequestContactExport, root.SibApiV3Sdk.RequestContactImport, root.SibApiV3Sdk.UpdateAttribute, root.SibApiV3Sdk.UpdateContact, root.SibApiV3Sdk.UpdateList);\n  }\n}(this, function(ApiClient, AddContactToList, CreateAttribute, CreateContact, CreateDoiContact, CreateList, CreateModel, CreateUpdateContactModel, CreateUpdateFolder, CreatedProcessId, ErrorModel, GetAttributes, GetContactCampaignStats, GetContacts, GetExtendedContactDetails, GetExtendedList, GetFolder, GetFolderLists, GetFolders, GetLists, PostContactInfo, RemoveContactFromList, RequestContactExport, RequestContactImport, UpdateAttribute, UpdateContact, UpdateList) {\n  'use strict';\n\n  /**\n   * Contacts service.\n   * @module api/ContactsApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new ContactsApi. \n   * @alias module:api/ContactsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Add existing contacts to a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/AddContactToList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostContactInfo} and HTTP response\n     */\n    this.addContactToListWithHttpInfo = function(listId, contactEmails) {\n      var postBody = contactEmails;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling addContactToList\");\n      }\n\n      // verify the required parameter 'contactEmails' is set\n      if (contactEmails === undefined || contactEmails === null) {\n        throw new Error(\"Missing the required parameter 'contactEmails' when calling addContactToList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = PostContactInfo;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}/contacts/add', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Add existing contacts to a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/AddContactToList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostContactInfo}\n     */\n    this.addContactToList = function(listId, contactEmails) {\n      return this.addContactToListWithHttpInfo(listId, contactEmails)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the attribute\n     * @param {module:model/CreateAttribute} createAttribute Values to create an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.createAttributeWithHttpInfo = function(attributeCategory, attributeName, createAttribute) {\n      var postBody = createAttribute;\n\n      // verify the required parameter 'attributeCategory' is set\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling createAttribute\");\n      }\n\n      // verify the required parameter 'attributeName' is set\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling createAttribute\");\n      }\n\n      // verify the required parameter 'createAttribute' is set\n      if (createAttribute === undefined || createAttribute === null) {\n        throw new Error(\"Missing the required parameter 'createAttribute' when calling createAttribute\");\n      }\n\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/attributes/{attributeCategory}/{attributeName}', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the attribute\n     * @param {module:model/CreateAttribute} createAttribute Values to create an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.createAttribute = function(attributeCategory, attributeName, createAttribute) {\n      return this.createAttributeWithHttpInfo(attributeCategory, attributeName, createAttribute)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a contact\n     * @param {module:model/CreateContact} createContact Values to create a contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateUpdateContactModel} and HTTP response\n     */\n    this.createContactWithHttpInfo = function(createContact) {\n      var postBody = createContact;\n\n      // verify the required parameter 'createContact' is set\n      if (createContact === undefined || createContact === null) {\n        throw new Error(\"Missing the required parameter 'createContact' when calling createContact\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateUpdateContactModel;\n\n      return this.apiClient.callApi(\n        '/contacts', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a contact\n     * @param {module:model/CreateContact} createContact Values to create a contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateUpdateContactModel}\n     */\n    this.createContact = function(createContact) {\n      return this.createContactWithHttpInfo(createContact)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create Contact via DOI (Double-Opt-In) Flow\n     * @param {module:model/CreateDoiContact} createDoiContact Values to create the Double opt-in (DOI) contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.createDoiContactWithHttpInfo = function(createDoiContact) {\n      var postBody = createDoiContact;\n\n      // verify the required parameter 'createDoiContact' is set\n      if (createDoiContact === undefined || createDoiContact === null) {\n        throw new Error(\"Missing the required parameter 'createDoiContact' when calling createDoiContact\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/doubleOptinConfirmation', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create Contact via DOI (Double-Opt-In) Flow\n     * @param {module:model/CreateDoiContact} createDoiContact Values to create the Double opt-in (DOI) contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.createDoiContact = function(createDoiContact) {\n      return this.createDoiContactWithHttpInfo(createDoiContact)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a folder\n     * @param {module:model/CreateUpdateFolder} createFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createFolderWithHttpInfo = function(createFolder) {\n      var postBody = createFolder;\n\n      // verify the required parameter 'createFolder' is set\n      if (createFolder === undefined || createFolder === null) {\n        throw new Error(\"Missing the required parameter 'createFolder' when calling createFolder\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/contacts/folders', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a folder\n     * @param {module:model/CreateUpdateFolder} createFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createFolder = function(createFolder) {\n      return this.createFolderWithHttpInfo(createFolder)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a list\n     * @param {module:model/CreateList} createList Values to create a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createListWithHttpInfo = function(createList) {\n      var postBody = createList;\n\n      // verify the required parameter 'createList' is set\n      if (createList === undefined || createList === null) {\n        throw new Error(\"Missing the required parameter 'createList' when calling createList\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/contacts/lists', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a list\n     * @param {module:model/CreateList} createList Values to create a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createList = function(createList) {\n      return this.createListWithHttpInfo(createList)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteAttributeWithHttpInfo = function(attributeCategory, attributeName) {\n      var postBody = null;\n\n      // verify the required parameter 'attributeCategory' is set\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling deleteAttribute\");\n      }\n\n      // verify the required parameter 'attributeName' is set\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling deleteAttribute\");\n      }\n\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/attributes/{attributeCategory}/{attributeName}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteAttribute = function(attributeCategory, attributeName) {\n      return this.deleteAttributeWithHttpInfo(attributeCategory, attributeName)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteContactWithHttpInfo = function(identifier) {\n      var postBody = null;\n\n      // verify the required parameter 'identifier' is set\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling deleteContact\");\n      }\n\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/{identifier}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteContact = function(identifier) {\n      return this.deleteContactWithHttpInfo(identifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a folder (and all its lists)\n     * @param {Number} folderId Id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteFolderWithHttpInfo = function(folderId) {\n      var postBody = null;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling deleteFolder\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a folder (and all its lists)\n     * @param {Number} folderId Id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteFolder = function(folderId) {\n      return this.deleteFolderWithHttpInfo(folderId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a list\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteListWithHttpInfo = function(listId) {\n      var postBody = null;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling deleteList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a list\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteList = function(listId) {\n      return this.deleteListWithHttpInfo(listId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAttributes} and HTTP response\n     */\n    this.getAttributesWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetAttributes;\n\n      return this.apiClient.callApi(\n        '/contacts/attributes', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List all attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAttributes}\n     */\n    this.getAttributes = function() {\n      return this.getAttributesWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a contact&#39;s details\n     * @param {String} identifier Email (urlencoded) OR ID of the contact OR its SMS attribute value\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExtendedContactDetails} and HTTP response\n     */\n    this.getContactInfoWithHttpInfo = function(identifier) {\n      var postBody = null;\n\n      // verify the required parameter 'identifier' is set\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling getContactInfo\");\n      }\n\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetExtendedContactDetails;\n\n      return this.apiClient.callApi(\n        '/contacts/{identifier}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a contact&#39;s details\n     * @param {String} identifier Email (urlencoded) OR ID of the contact OR its SMS attribute value\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExtendedContactDetails}\n     */\n    this.getContactInfo = function(identifier) {\n      return this.getContactInfoWithHttpInfo(identifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get email campaigns&#39; statistics for a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetContactCampaignStats} and HTTP response\n     */\n    this.getContactStatsWithHttpInfo = function(identifier, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'identifier' is set\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling getContactStats\");\n      }\n\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetContactCampaignStats;\n\n      return this.apiClient.callApi(\n        '/contacts/{identifier}/campaignStats', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get email campaigns&#39; statistics for a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetContactCampaignStats}\n     */\n    this.getContactStats = function(identifier, opts) {\n      return this.getContactStatsWithHttpInfo(identifier, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all the contacts\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetContacts} and HTTP response\n     */\n    this.getContactsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'modifiedSince': opts['modifiedSince'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetContacts;\n\n      return this.apiClient.callApi(\n        '/contacts', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all the contacts\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetContacts}\n     */\n    this.getContacts = function(opts) {\n      return this.getContactsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get contacts in a list\n     * @param {Number} listId Id of the list\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetContacts} and HTTP response\n     */\n    this.getContactsFromListWithHttpInfo = function(listId, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling getContactsFromList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n        'modifiedSince': opts['modifiedSince'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetContacts;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}/contacts', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get contacts in a list\n     * @param {Number} listId Id of the list\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetContacts}\n     */\n    this.getContactsFromList = function(listId, opts) {\n      return this.getContactsFromListWithHttpInfo(listId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Returns a folder&#39;s details\n     * @param {Number} folderId id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolder} and HTTP response\n     */\n    this.getFolderWithHttpInfo = function(folderId) {\n      var postBody = null;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling getFolder\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolder;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Returns a folder&#39;s details\n     * @param {Number} folderId id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolder}\n     */\n    this.getFolder = function(folderId) {\n      return this.getFolderWithHttpInfo(folderId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolderLists} and HTTP response\n     */\n    this.getFolderListsWithHttpInfo = function(folderId, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling getFolderLists\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolderLists;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}/lists', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolderLists}\n     */\n    this.getFolderLists = function(folderId, opts) {\n      return this.getFolderListsWithHttpInfo(folderId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all folders\n     * @param {Number} limit Number of documents per page\n     * @param {Number} offset Index of the first document of the page\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolders} and HTTP response\n     */\n    this.getFoldersWithHttpInfo = function(limit, offset, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'limit' is set\n      if (limit === undefined || limit === null) {\n        throw new Error(\"Missing the required parameter 'limit' when calling getFolders\");\n      }\n\n      // verify the required parameter 'offset' is set\n      if (offset === undefined || offset === null) {\n        throw new Error(\"Missing the required parameter 'offset' when calling getFolders\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': limit,\n        'offset': offset,\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolders;\n\n      return this.apiClient.callApi(\n        '/contacts/folders', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all folders\n     * @param {Number} limit Number of documents per page\n     * @param {Number} offset Index of the first document of the page\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolders}\n     */\n    this.getFolders = function(limit, offset, opts) {\n      return this.getFoldersWithHttpInfo(limit, offset, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a list&#39;s details\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExtendedList} and HTTP response\n     */\n    this.getListWithHttpInfo = function(listId) {\n      var postBody = null;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling getList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetExtendedList;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a list&#39;s details\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExtendedList}\n     */\n    this.getList = function(listId) {\n      return this.getListWithHttpInfo(listId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all the lists\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetLists} and HTTP response\n     */\n    this.getListsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetLists;\n\n      return this.apiClient.callApi(\n        '/contacts/lists', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all the lists\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetLists}\n     */\n    this.getLists = function(opts) {\n      return this.getListsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Import contacts\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input.\n     * @param {module:model/RequestContactImport} requestContactImport Values to import contacts in Sendinblue. To know more about the expected format, please have a look at &#x60;&#x60;https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response\n     */\n    this.importContactsWithHttpInfo = function(requestContactImport) {\n      var postBody = requestContactImport;\n\n      // verify the required parameter 'requestContactImport' is set\n      if (requestContactImport === undefined || requestContactImport === null) {\n        throw new Error(\"Missing the required parameter 'requestContactImport' when calling importContacts\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreatedProcessId;\n\n      return this.apiClient.callApi(\n        '/contacts/import', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Import contacts\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input.\n     * @param {module:model/RequestContactImport} requestContactImport Values to import contacts in Sendinblue. To know more about the expected format, please have a look at &#x60;&#x60;https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}\n     */\n    this.importContacts = function(requestContactImport) {\n      return this.importContactsWithHttpInfo(requestContactImport)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a contact from a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/RemoveContactFromList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostContactInfo} and HTTP response\n     */\n    this.removeContactFromListWithHttpInfo = function(listId, contactEmails) {\n      var postBody = contactEmails;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling removeContactFromList\");\n      }\n\n      // verify the required parameter 'contactEmails' is set\n      if (contactEmails === undefined || contactEmails === null) {\n        throw new Error(\"Missing the required parameter 'contactEmails' when calling removeContactFromList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = PostContactInfo;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}/contacts/remove', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a contact from a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/RemoveContactFromList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostContactInfo}\n     */\n    this.removeContactFromList = function(listId, contactEmails) {\n      return this.removeContactFromListWithHttpInfo(listId, contactEmails)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Export contacts\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.\n     * @param {module:model/RequestContactExport} requestContactExport Values to request a contact export\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response\n     */\n    this.requestContactExportWithHttpInfo = function(requestContactExport) {\n      var postBody = requestContactExport;\n\n      // verify the required parameter 'requestContactExport' is set\n      if (requestContactExport === undefined || requestContactExport === null) {\n        throw new Error(\"Missing the required parameter 'requestContactExport' when calling requestContactExport\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreatedProcessId;\n\n      return this.apiClient.callApi(\n        '/contacts/export', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Export contacts\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.\n     * @param {module:model/RequestContactExport} requestContactExport Values to request a contact export\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}\n     */\n    this.requestContactExport = function(requestContactExport) {\n      return this.requestContactExportWithHttpInfo(requestContactExport)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @param {module:model/UpdateAttribute} updateAttribute Values to update an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateAttributeWithHttpInfo = function(attributeCategory, attributeName, updateAttribute) {\n      var postBody = updateAttribute;\n\n      // verify the required parameter 'attributeCategory' is set\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling updateAttribute\");\n      }\n\n      // verify the required parameter 'attributeName' is set\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling updateAttribute\");\n      }\n\n      // verify the required parameter 'updateAttribute' is set\n      if (updateAttribute === undefined || updateAttribute === null) {\n        throw new Error(\"Missing the required parameter 'updateAttribute' when calling updateAttribute\");\n      }\n\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/attributes/{attributeCategory}/{attributeName}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @param {module:model/UpdateAttribute} updateAttribute Values to update an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateAttribute = function(attributeCategory, attributeName, updateAttribute) {\n      return this.updateAttributeWithHttpInfo(attributeCategory, attributeName, updateAttribute)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @param {module:model/UpdateContact} updateContact Values to update a contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateContactWithHttpInfo = function(identifier, updateContact) {\n      var postBody = updateContact;\n\n      // verify the required parameter 'identifier' is set\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling updateContact\");\n      }\n\n      // verify the required parameter 'updateContact' is set\n      if (updateContact === undefined || updateContact === null) {\n        throw new Error(\"Missing the required parameter 'updateContact' when calling updateContact\");\n      }\n\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/{identifier}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @param {module:model/UpdateContact} updateContact Values to update a contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateContact = function(identifier, updateContact) {\n      return this.updateContactWithHttpInfo(identifier, updateContact)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a folder\n     * @param {Number} folderId Id of the folder\n     * @param {module:model/CreateUpdateFolder} updateFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateFolderWithHttpInfo = function(folderId, updateFolder) {\n      var postBody = updateFolder;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling updateFolder\");\n      }\n\n      // verify the required parameter 'updateFolder' is set\n      if (updateFolder === undefined || updateFolder === null) {\n        throw new Error(\"Missing the required parameter 'updateFolder' when calling updateFolder\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a folder\n     * @param {Number} folderId Id of the folder\n     * @param {module:model/CreateUpdateFolder} updateFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateFolder = function(folderId, updateFolder) {\n      return this.updateFolderWithHttpInfo(folderId, updateFolder)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/UpdateList} updateList Values to update a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateListWithHttpInfo = function(listId, updateList) {\n      var postBody = updateList;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling updateList\");\n      }\n\n      // verify the required parameter 'updateList' is set\n      if (updateList === undefined || updateList === null) {\n        throw new Error(\"Missing the required parameter 'updateList' when calling updateList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/UpdateList} updateList Values to update a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateList = function(listId, updateList) {\n      return this.updateListWithHttpInfo(listId, updateList)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"]},"metadata":{},"sourceType":"script"}
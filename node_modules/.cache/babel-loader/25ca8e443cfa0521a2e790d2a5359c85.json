{"ast":null,"code":"/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/AbTestCampaignResult', 'model/CreateEmailCampaign', 'model/CreateModel', 'model/CreatedProcessId', 'model/EmailExportRecipients', 'model/ErrorModel', 'model/GetEmailCampaign', 'model/GetEmailCampaigns', 'model/GetSharedTemplateUrl', 'model/PostSendFailed', 'model/SendReport', 'model/SendTestEmail', 'model/UpdateCampaignStatus', 'model/UpdateEmailCampaign', 'model/UploadImageToGallery'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/AbTestCampaignResult'), require('../model/CreateEmailCampaign'), require('../model/CreateModel'), require('../model/CreatedProcessId'), require('../model/EmailExportRecipients'), require('../model/ErrorModel'), require('../model/GetEmailCampaign'), require('../model/GetEmailCampaigns'), require('../model/GetSharedTemplateUrl'), require('../model/PostSendFailed'), require('../model/SendReport'), require('../model/SendTestEmail'), require('../model/UpdateCampaignStatus'), require('../model/UpdateEmailCampaign'), require('../model/UploadImageToGallery'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n\n    root.SibApiV3Sdk.EmailCampaignsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AbTestCampaignResult, root.SibApiV3Sdk.CreateEmailCampaign, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreatedProcessId, root.SibApiV3Sdk.EmailExportRecipients, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetEmailCampaign, root.SibApiV3Sdk.GetEmailCampaigns, root.SibApiV3Sdk.GetSharedTemplateUrl, root.SibApiV3Sdk.PostSendFailed, root.SibApiV3Sdk.SendReport, root.SibApiV3Sdk.SendTestEmail, root.SibApiV3Sdk.UpdateCampaignStatus, root.SibApiV3Sdk.UpdateEmailCampaign, root.SibApiV3Sdk.UploadImageToGallery);\n  }\n})(this, function (ApiClient, AbTestCampaignResult, CreateEmailCampaign, CreateModel, CreatedProcessId, EmailExportRecipients, ErrorModel, GetEmailCampaign, GetEmailCampaigns, GetSharedTemplateUrl, PostSendFailed, SendReport, SendTestEmail, UpdateCampaignStatus, UpdateEmailCampaign, UploadImageToGallery) {\n  'use strict';\n  /**\n   * EmailCampaigns service.\n   * @module api/EmailCampaignsApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new EmailCampaignsApi. \n   * @alias module:api/EmailCampaignsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n\n  var exports = function (apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n    /**\n     * Create an email campaign\n     * @param {module:model/CreateEmailCampaign} emailCampaigns Values to create a campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n\n    this.createEmailCampaignWithHttpInfo = function (emailCampaigns) {\n      var postBody = emailCampaigns; // verify the required parameter 'emailCampaigns' is set\n\n      if (emailCampaigns === undefined || emailCampaigns === null) {\n        throw new Error(\"Missing the required parameter 'emailCampaigns' when calling createEmailCampaign\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n      return this.apiClient.callApi('/emailCampaigns', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Create an email campaign\n     * @param {module:model/CreateEmailCampaign} emailCampaigns Values to create a campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n\n\n    this.createEmailCampaign = function (emailCampaigns) {\n      return this.createEmailCampaignWithHttpInfo(emailCampaigns).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete an email campaign\n     * @param {Number} campaignId id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteEmailCampaignWithHttpInfo = function (campaignId) {\n      var postBody = null; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling deleteEmailCampaign\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/emailCampaigns/{campaignId}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete an email campaign\n     * @param {Number} campaignId id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteEmailCampaign = function (campaignId) {\n      return this.deleteEmailCampaignWithHttpInfo(campaignId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Export the recipients of an email campaign\n     * @param {Number} campaignId Id of the campaign\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EmailExportRecipients} opts.recipientExport Values to send for a recipient export request\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response\n     */\n\n\n    this.emailExportRecipientsWithHttpInfo = function (campaignId, opts) {\n      opts = opts || {};\n      var postBody = opts['recipientExport']; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling emailExportRecipients\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreatedProcessId;\n      return this.apiClient.callApi('/emailCampaigns/{campaignId}/exportRecipients', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Export the recipients of an email campaign\n     * @param {Number} campaignId Id of the campaign\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EmailExportRecipients} opts.recipientExport Values to send for a recipient export request\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}\n     */\n\n\n    this.emailExportRecipients = function (campaignId, opts) {\n      return this.emailExportRecipientsWithHttpInfo(campaignId, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get an A/B test email campaign results\n     * Obtain winning version of an A/B test email campaign\n     * @param {Number} campaignId Id of the A/B test campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbTestCampaignResult} and HTTP response\n     */\n\n\n    this.getAbTestCampaignResultWithHttpInfo = function (campaignId) {\n      var postBody = null; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling getAbTestCampaignResult\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = AbTestCampaignResult;\n      return this.apiClient.callApi('/emailCampaigns/{campaignId}/abTestCampaignResult', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get an A/B test email campaign results\n     * Obtain winning version of an A/B test email campaign\n     * @param {Number} campaignId Id of the A/B test campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbTestCampaignResult}\n     */\n\n\n    this.getAbTestCampaignResult = function (campaignId) {\n      return this.getAbTestCampaignResultWithHttpInfo(campaignId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get an email campaign report\n     * @param {Number} campaignId Id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEmailCampaign} and HTTP response\n     */\n\n\n    this.getEmailCampaignWithHttpInfo = function (campaignId) {\n      var postBody = null; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling getEmailCampaign\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetEmailCampaign;\n      return this.apiClient.callApi('/emailCampaigns/{campaignId}', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get an email campaign report\n     * @param {Number} campaignId Id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEmailCampaign}\n     */\n\n\n    this.getEmailCampaign = function (campaignId) {\n      return this.getEmailCampaignWithHttpInfo(campaignId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Return all your created email campaigns\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.type Filter on the type of the campaigns\n     * @param {module:model/String} opts.status Filter on the status of the campaign\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Number} opts.limit Number of documents per page (default to 500)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEmailCampaigns} and HTTP response\n     */\n\n\n    this.getEmailCampaignsWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'type': opts['type'],\n        'status': opts['status'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetEmailCampaigns;\n      return this.apiClient.callApi('/emailCampaigns', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Return all your created email campaigns\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.type Filter on the type of the campaigns\n     * @param {module:model/String} opts.status Filter on the status of the campaign\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Number} opts.limit Number of documents per page (default to 500)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEmailCampaigns}\n     */\n\n\n    this.getEmailCampaigns = function (opts) {\n      return this.getEmailCampaignsWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get a shared template url\n     * Get a unique URL to share &amp; import an email template from one Sendinblue account to another.\n     * @param {Number} campaignId Id of the campaign or template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSharedTemplateUrl} and HTTP response\n     */\n\n\n    this.getSharedTemplateUrlWithHttpInfo = function (campaignId) {\n      var postBody = null; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling getSharedTemplateUrl\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSharedTemplateUrl;\n      return this.apiClient.callApi('/emailCampaigns/{campaignId}/sharedUrl', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get a shared template url\n     * Get a unique URL to share &amp; import an email template from one Sendinblue account to another.\n     * @param {Number} campaignId Id of the campaign or template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSharedTemplateUrl}\n     */\n\n\n    this.getSharedTemplateUrl = function (campaignId) {\n      return this.getSharedTemplateUrlWithHttpInfo(campaignId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Send an email campaign immediately, based on campaignId\n     * @param {Number} campaignId Id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.sendEmailCampaignNowWithHttpInfo = function (campaignId) {\n      var postBody = null; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendEmailCampaignNow\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/emailCampaigns/{campaignId}/sendNow', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Send an email campaign immediately, based on campaignId\n     * @param {Number} campaignId Id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.sendEmailCampaignNow = function (campaignId) {\n      return this.sendEmailCampaignNowWithHttpInfo(campaignId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Send the report of a campaign\n     * A PDF will be sent to the specified email addresses\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/SendReport} sendReport Values for send a report\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.sendReportWithHttpInfo = function (campaignId, sendReport) {\n      var postBody = sendReport; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendReport\");\n      } // verify the required parameter 'sendReport' is set\n\n\n      if (sendReport === undefined || sendReport === null) {\n        throw new Error(\"Missing the required parameter 'sendReport' when calling sendReport\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/emailCampaigns/{campaignId}/sendReport', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Send the report of a campaign\n     * A PDF will be sent to the specified email addresses\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/SendReport} sendReport Values for send a report\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.sendReport = function (campaignId, sendReport) {\n      return this.sendReportWithHttpInfo(campaignId, sendReport).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Send an email campaign to your test list\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/SendTestEmail} emailTo \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.sendTestEmailWithHttpInfo = function (campaignId, emailTo) {\n      var postBody = emailTo; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendTestEmail\");\n      } // verify the required parameter 'emailTo' is set\n\n\n      if (emailTo === undefined || emailTo === null) {\n        throw new Error(\"Missing the required parameter 'emailTo' when calling sendTestEmail\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/emailCampaigns/{campaignId}/sendTest', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Send an email campaign to your test list\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/SendTestEmail} emailTo \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.sendTestEmail = function (campaignId, emailTo) {\n      return this.sendTestEmailWithHttpInfo(campaignId, emailTo).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update an email campaign status\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/UpdateCampaignStatus} status Status of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateCampaignStatusWithHttpInfo = function (campaignId, status) {\n      var postBody = status; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling updateCampaignStatus\");\n      } // verify the required parameter 'status' is set\n\n\n      if (status === undefined || status === null) {\n        throw new Error(\"Missing the required parameter 'status' when calling updateCampaignStatus\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/emailCampaigns/{campaignId}/status', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update an email campaign status\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/UpdateCampaignStatus} status Status of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateCampaignStatus = function (campaignId, status) {\n      return this.updateCampaignStatusWithHttpInfo(campaignId, status).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update an email campaign\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/UpdateEmailCampaign} emailCampaign Values to update a campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateEmailCampaignWithHttpInfo = function (campaignId, emailCampaign) {\n      var postBody = emailCampaign; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling updateEmailCampaign\");\n      } // verify the required parameter 'emailCampaign' is set\n\n\n      if (emailCampaign === undefined || emailCampaign === null) {\n        throw new Error(\"Missing the required parameter 'emailCampaign' when calling updateEmailCampaign\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/emailCampaigns/{campaignId}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update an email campaign\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/UpdateEmailCampaign} emailCampaign Values to update a campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateEmailCampaign = function (campaignId, emailCampaign) {\n      return this.updateEmailCampaignWithHttpInfo(campaignId, emailCampaign).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Upload an image to your account&#39;s image gallery\n     * @param {module:model/UploadImageToGallery} uploadImage Parameters to upload an image\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.uploadImageToGalleryWithHttpInfo = function (uploadImage) {\n      var postBody = uploadImage; // verify the required parameter 'uploadImage' is set\n\n      if (uploadImage === undefined || uploadImage === null) {\n        throw new Error(\"Missing the required parameter 'uploadImage' when calling uploadImageToGallery\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/emailCampaigns/images', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Upload an image to your account&#39;s image gallery\n     * @param {module:model/UploadImageToGallery} uploadImage Parameters to upload an image\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.uploadImageToGallery = function (uploadImage) {\n      return this.uploadImageToGalleryWithHttpInfo(uploadImage).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n  };\n\n  return exports;\n});","map":{"version":3,"sources":["F:/My Project/Copie de Nivid/Copie de Nivid (1)/node_modules/sib-api-v3-sdk/src/api/EmailCampaignsApi.js"],"names":["root","factory","define","amd","module","exports","require","SibApiV3Sdk","EmailCampaignsApi","ApiClient","AbTestCampaignResult","CreateEmailCampaign","CreateModel","CreatedProcessId","EmailExportRecipients","ErrorModel","GetEmailCampaign","GetEmailCampaigns","GetSharedTemplateUrl","PostSendFailed","SendReport","SendTestEmail","UpdateCampaignStatus","UpdateEmailCampaign","UploadImageToGallery","apiClient","instance","createEmailCampaignWithHttpInfo","emailCampaigns","postBody","undefined","Error","pathParams","queryParams","collectionQueryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","createEmailCampaign","then","response_and_data","data","deleteEmailCampaignWithHttpInfo","campaignId","deleteEmailCampaign","emailExportRecipientsWithHttpInfo","opts","emailExportRecipients","getAbTestCampaignResultWithHttpInfo","getAbTestCampaignResult","getEmailCampaignWithHttpInfo","getEmailCampaign","getEmailCampaignsWithHttpInfo","getEmailCampaigns","getSharedTemplateUrlWithHttpInfo","getSharedTemplateUrl","sendEmailCampaignNowWithHttpInfo","sendEmailCampaignNow","sendReportWithHttpInfo","sendReport","sendTestEmailWithHttpInfo","emailTo","sendTestEmail","updateCampaignStatusWithHttpInfo","status","updateCampaignStatus","updateEmailCampaignWithHttpInfo","emailCampaign","updateEmailCampaign","uploadImageToGalleryWithHttpInfo","uploadImage","uploadImageToGallery"],"mappings":"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","sourcesContent":["/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/AbTestCampaignResult', 'model/CreateEmailCampaign', 'model/CreateModel', 'model/CreatedProcessId', 'model/EmailExportRecipients', 'model/ErrorModel', 'model/GetEmailCampaign', 'model/GetEmailCampaigns', 'model/GetSharedTemplateUrl', 'model/PostSendFailed', 'model/SendReport', 'model/SendTestEmail', 'model/UpdateCampaignStatus', 'model/UpdateEmailCampaign', 'model/UploadImageToGallery'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/AbTestCampaignResult'), require('../model/CreateEmailCampaign'), require('../model/CreateModel'), require('../model/CreatedProcessId'), require('../model/EmailExportRecipients'), require('../model/ErrorModel'), require('../model/GetEmailCampaign'), require('../model/GetEmailCampaigns'), require('../model/GetSharedTemplateUrl'), require('../model/PostSendFailed'), require('../model/SendReport'), require('../model/SendTestEmail'), require('../model/UpdateCampaignStatus'), require('../model/UpdateEmailCampaign'), require('../model/UploadImageToGallery'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.EmailCampaignsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AbTestCampaignResult, root.SibApiV3Sdk.CreateEmailCampaign, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreatedProcessId, root.SibApiV3Sdk.EmailExportRecipients, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetEmailCampaign, root.SibApiV3Sdk.GetEmailCampaigns, root.SibApiV3Sdk.GetSharedTemplateUrl, root.SibApiV3Sdk.PostSendFailed, root.SibApiV3Sdk.SendReport, root.SibApiV3Sdk.SendTestEmail, root.SibApiV3Sdk.UpdateCampaignStatus, root.SibApiV3Sdk.UpdateEmailCampaign, root.SibApiV3Sdk.UploadImageToGallery);\n  }\n}(this, function(ApiClient, AbTestCampaignResult, CreateEmailCampaign, CreateModel, CreatedProcessId, EmailExportRecipients, ErrorModel, GetEmailCampaign, GetEmailCampaigns, GetSharedTemplateUrl, PostSendFailed, SendReport, SendTestEmail, UpdateCampaignStatus, UpdateEmailCampaign, UploadImageToGallery) {\n  'use strict';\n\n  /**\n   * EmailCampaigns service.\n   * @module api/EmailCampaignsApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new EmailCampaignsApi. \n   * @alias module:api/EmailCampaignsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Create an email campaign\n     * @param {module:model/CreateEmailCampaign} emailCampaigns Values to create a campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createEmailCampaignWithHttpInfo = function(emailCampaigns) {\n      var postBody = emailCampaigns;\n\n      // verify the required parameter 'emailCampaigns' is set\n      if (emailCampaigns === undefined || emailCampaigns === null) {\n        throw new Error(\"Missing the required parameter 'emailCampaigns' when calling createEmailCampaign\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create an email campaign\n     * @param {module:model/CreateEmailCampaign} emailCampaigns Values to create a campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createEmailCampaign = function(emailCampaigns) {\n      return this.createEmailCampaignWithHttpInfo(emailCampaigns)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an email campaign\n     * @param {Number} campaignId id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteEmailCampaignWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling deleteEmailCampaign\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an email campaign\n     * @param {Number} campaignId id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteEmailCampaign = function(campaignId) {\n      return this.deleteEmailCampaignWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Export the recipients of an email campaign\n     * @param {Number} campaignId Id of the campaign\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EmailExportRecipients} opts.recipientExport Values to send for a recipient export request\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response\n     */\n    this.emailExportRecipientsWithHttpInfo = function(campaignId, opts) {\n      opts = opts || {};\n      var postBody = opts['recipientExport'];\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling emailExportRecipients\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreatedProcessId;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/exportRecipients', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Export the recipients of an email campaign\n     * @param {Number} campaignId Id of the campaign\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EmailExportRecipients} opts.recipientExport Values to send for a recipient export request\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}\n     */\n    this.emailExportRecipients = function(campaignId, opts) {\n      return this.emailExportRecipientsWithHttpInfo(campaignId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get an A/B test email campaign results\n     * Obtain winning version of an A/B test email campaign\n     * @param {Number} campaignId Id of the A/B test campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbTestCampaignResult} and HTTP response\n     */\n    this.getAbTestCampaignResultWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling getAbTestCampaignResult\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = AbTestCampaignResult;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/abTestCampaignResult', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get an A/B test email campaign results\n     * Obtain winning version of an A/B test email campaign\n     * @param {Number} campaignId Id of the A/B test campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbTestCampaignResult}\n     */\n    this.getAbTestCampaignResult = function(campaignId) {\n      return this.getAbTestCampaignResultWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get an email campaign report\n     * @param {Number} campaignId Id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEmailCampaign} and HTTP response\n     */\n    this.getEmailCampaignWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling getEmailCampaign\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetEmailCampaign;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get an email campaign report\n     * @param {Number} campaignId Id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEmailCampaign}\n     */\n    this.getEmailCampaign = function(campaignId) {\n      return this.getEmailCampaignWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Return all your created email campaigns\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.type Filter on the type of the campaigns\n     * @param {module:model/String} opts.status Filter on the status of the campaign\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Number} opts.limit Number of documents per page (default to 500)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEmailCampaigns} and HTTP response\n     */\n    this.getEmailCampaignsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'type': opts['type'],\n        'status': opts['status'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetEmailCampaigns;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Return all your created email campaigns\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.type Filter on the type of the campaigns\n     * @param {module:model/String} opts.status Filter on the status of the campaign\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Number} opts.limit Number of documents per page (default to 500)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEmailCampaigns}\n     */\n    this.getEmailCampaigns = function(opts) {\n      return this.getEmailCampaignsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a shared template url\n     * Get a unique URL to share &amp; import an email template from one Sendinblue account to another.\n     * @param {Number} campaignId Id of the campaign or template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSharedTemplateUrl} and HTTP response\n     */\n    this.getSharedTemplateUrlWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling getSharedTemplateUrl\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSharedTemplateUrl;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/sharedUrl', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a shared template url\n     * Get a unique URL to share &amp; import an email template from one Sendinblue account to another.\n     * @param {Number} campaignId Id of the campaign or template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSharedTemplateUrl}\n     */\n    this.getSharedTemplateUrl = function(campaignId) {\n      return this.getSharedTemplateUrlWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send an email campaign immediately, based on campaignId\n     * @param {Number} campaignId Id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendEmailCampaignNowWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendEmailCampaignNow\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/sendNow', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send an email campaign immediately, based on campaignId\n     * @param {Number} campaignId Id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendEmailCampaignNow = function(campaignId) {\n      return this.sendEmailCampaignNowWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send the report of a campaign\n     * A PDF will be sent to the specified email addresses\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/SendReport} sendReport Values for send a report\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendReportWithHttpInfo = function(campaignId, sendReport) {\n      var postBody = sendReport;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendReport\");\n      }\n\n      // verify the required parameter 'sendReport' is set\n      if (sendReport === undefined || sendReport === null) {\n        throw new Error(\"Missing the required parameter 'sendReport' when calling sendReport\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/sendReport', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send the report of a campaign\n     * A PDF will be sent to the specified email addresses\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/SendReport} sendReport Values for send a report\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendReport = function(campaignId, sendReport) {\n      return this.sendReportWithHttpInfo(campaignId, sendReport)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send an email campaign to your test list\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/SendTestEmail} emailTo \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendTestEmailWithHttpInfo = function(campaignId, emailTo) {\n      var postBody = emailTo;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendTestEmail\");\n      }\n\n      // verify the required parameter 'emailTo' is set\n      if (emailTo === undefined || emailTo === null) {\n        throw new Error(\"Missing the required parameter 'emailTo' when calling sendTestEmail\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/sendTest', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send an email campaign to your test list\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/SendTestEmail} emailTo \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendTestEmail = function(campaignId, emailTo) {\n      return this.sendTestEmailWithHttpInfo(campaignId, emailTo)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update an email campaign status\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/UpdateCampaignStatus} status Status of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateCampaignStatusWithHttpInfo = function(campaignId, status) {\n      var postBody = status;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling updateCampaignStatus\");\n      }\n\n      // verify the required parameter 'status' is set\n      if (status === undefined || status === null) {\n        throw new Error(\"Missing the required parameter 'status' when calling updateCampaignStatus\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/status', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update an email campaign status\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/UpdateCampaignStatus} status Status of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateCampaignStatus = function(campaignId, status) {\n      return this.updateCampaignStatusWithHttpInfo(campaignId, status)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update an email campaign\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/UpdateEmailCampaign} emailCampaign Values to update a campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateEmailCampaignWithHttpInfo = function(campaignId, emailCampaign) {\n      var postBody = emailCampaign;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling updateEmailCampaign\");\n      }\n\n      // verify the required parameter 'emailCampaign' is set\n      if (emailCampaign === undefined || emailCampaign === null) {\n        throw new Error(\"Missing the required parameter 'emailCampaign' when calling updateEmailCampaign\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update an email campaign\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/UpdateEmailCampaign} emailCampaign Values to update a campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateEmailCampaign = function(campaignId, emailCampaign) {\n      return this.updateEmailCampaignWithHttpInfo(campaignId, emailCampaign)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Upload an image to your account&#39;s image gallery\n     * @param {module:model/UploadImageToGallery} uploadImage Parameters to upload an image\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.uploadImageToGalleryWithHttpInfo = function(uploadImage) {\n      var postBody = uploadImage;\n\n      // verify the required parameter 'uploadImage' is set\n      if (uploadImage === undefined || uploadImage === null) {\n        throw new Error(\"Missing the required parameter 'uploadImage' when calling uploadImageToGallery\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/images', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Upload an image to your account&#39;s image gallery\n     * @param {module:model/UploadImageToGallery} uploadImage Parameters to upload an image\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.uploadImageToGallery = function(uploadImage) {\n      return this.uploadImageToGalleryWithHttpInfo(uploadImage)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bc/Desktop/New Nivid/Leo-Project/src/components/autocompletePlaces.js\";\nimport React from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport mapImg from '../images/google-maps.png';\nimport { GoogleApiWrapper } from 'google-maps-react';\n\nclass LocationSearchInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.searchOptions = {\n      componentRestrictions: {\n        country: \"fr\"\n      },\n      types: [this.props.placeType]\n    };\n\n    this.handleChange = address => {\n      this.setState({\n        address,\n        isValid: false\n      });\n      this.props.onChanged(address);\n    };\n\n    this.handleSelect = address => {\n      this.setState({\n        address\n      });\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => this.props.onChanged(address, latLng)).then(() => this.setState({\n        isValid: true\n      })).catch(error => console.error('Error', error));\n    };\n\n    this.state = {\n      address: this.props.value,\n      isValid: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isValid: this.props.isValid\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: this.state.address,\n      onChange: this.handleChange,\n      onSelect: this.handleSelect,\n      searchOptions: this.searchOptions,\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"placeInputContainer\",\n        style: {\n          position: \"relative\"\n        },\n        children: [this.props.placeType !== \"(cities)\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"\",\n          src: mapImg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 52\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n            placeholder: this.props.placeholder || 'Chercher une adresse ...',\n            className: `location-search-input ${this.state.isValid === true ? \"valid\" : this.state.isValid === null ? \"\" : \"notValid\"}`\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"autocomplete-dropdown-container\",\n          children: suggestions.slice(0, 4).map((suggestion, i) => {\n            const className = suggestion.active ? 'suggestion-item suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n            const style = suggestion.active ? {\n              backgroundColor: 'rgb(230, 230, 230)',\n              cursor: 'pointer'\n            } : {\n              backgroundColor: 'rgb(238, 238, 238)',\n              cursor: 'pointer'\n            };\n            return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                className,\n                style\n              }),\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"/images/grey_marker.png\",\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"suggestionDescriptionFirst\",\n                  children: suggestion.formattedSuggestion.mainText\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"suggestionDescriptionSecond\",\n                  children: suggestion.formattedSuggestion.secondaryText\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 21\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDOQ_vau2uT4Gx_iLMVq2XfsUK3BPULVnY\"\n})(LocationSearchInput);","map":{"version":3,"sources":["/Users/bc/Desktop/New Nivid/Leo-Project/src/components/autocompletePlaces.js"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","mapImg","GoogleApiWrapper","LocationSearchInput","Component","constructor","props","searchOptions","componentRestrictions","country","types","placeType","handleChange","address","setState","isValid","onChanged","handleSelect","then","results","latLng","catch","error","console","state","value","componentDidMount","render","getInputProps","suggestions","getSuggestionItemProps","loading","position","placeholder","className","slice","map","suggestion","i","active","style","backgroundColor","cursor","formattedSuggestion","mainText","secondaryText","apiKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\nimport mapImg from '../images/google-maps.png'\nimport { GoogleApiWrapper } from 'google-maps-react';\n\nclass LocationSearchInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { address: this.props.value, isValid: null };\n  }\n\n  componentDidMount() {\n    this.setState({ isValid: this.props.isValid })\n  }\n\n  searchOptions = {\n    componentRestrictions: { country: \"fr\" },\n    types: [this.props.placeType]\n  }\n\n  handleChange = address => {\n    this.setState({ address, isValid: false });\n    this.props.onChanged(address)\n  };\n\n  handleSelect = address => {\n    this.setState({ address });\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => this.props.onChanged(address, latLng))\n      .then(() => this.setState({ isValid: true }))\n      .catch(error => console.error('Error', error));\n\n  };\n\n\n  render() {\n    return (\n      <PlacesAutocomplete\n        value={this.state.address}\n        onChange={this.handleChange}\n        onSelect={this.handleSelect}\n        searchOptions={this.searchOptions}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div className=\"placeInputContainer\" style={{ position: \"relative\" }}>\n           {this.props.placeType !== \"(cities)\" && <img alt=\"\" src={mapImg} />} \n            <input\n              {...getInputProps({\n                placeholder: this.props.placeholder || 'Chercher une adresse ...',\n                className: `location-search-input ${this.state.isValid === true ? \"valid\" : this.state.isValid === null ? \"\" : \"notValid\"}`,\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {suggestions.slice(0, 4).map((suggestion, i) => {\n\n                const className = suggestion.active\n                  ? 'suggestion-item suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: 'rgb(230, 230, 230)', cursor: 'pointer' }\n                  : { backgroundColor: 'rgb(238, 238, 238)', cursor: 'pointer' };\n                return (\n                  <div\n                    key={i}\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <img src=\"/images/grey_marker.png\" alt=\"\" />\n                    <span>\n                      <span className=\"suggestionDescriptionFirst\">{suggestion.formattedSuggestion.mainText}</span>\n                      <span className=\"suggestionDescriptionSecond\">{suggestion.formattedSuggestion.secondaryText}</span>\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyDOQ_vau2uT4Gx_iLMVq2XfsUK3BPULVnY\")\n})(LocationSearchInput)"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/CreateAttribute', 'model/ErrorModel', 'model/GetAttributes', 'model/UpdateAttribute'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/CreateAttribute'), require('../model/ErrorModel'), require('../model/GetAttributes'), require('../model/UpdateAttribute'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n\n    root.SibApiV3Sdk.AttributesApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateAttribute, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetAttributes, root.SibApiV3Sdk.UpdateAttribute);\n  }\n})(this, function (ApiClient, CreateAttribute, ErrorModel, GetAttributes, UpdateAttribute) {\n  'use strict';\n  /**\n   * Attributes service.\n   * @module api/AttributesApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new AttributesApi. \n   * @alias module:api/AttributesApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n\n  var exports = function exports(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n    /**\n     * Create contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the attribute\n     * @param {module:model/CreateAttribute} createAttribute Values to create an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n    this.createAttributeWithHttpInfo = function (attributeCategory, attributeName, createAttribute) {\n      var postBody = createAttribute; // verify the required parameter 'attributeCategory' is set\n\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling createAttribute\");\n      } // verify the required parameter 'attributeName' is set\n\n\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling createAttribute\");\n      } // verify the required parameter 'createAttribute' is set\n\n\n      if (createAttribute === undefined || createAttribute === null) {\n        throw new Error(\"Missing the required parameter 'createAttribute' when calling createAttribute\");\n      }\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/attributes/{attributeCategory}/{attributeName}', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Create contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the attribute\n     * @param {module:model/CreateAttribute} createAttribute Values to create an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.createAttribute = function (attributeCategory, attributeName, createAttribute) {\n      return this.createAttributeWithHttpInfo(attributeCategory, attributeName, createAttribute).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete an attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteAttributeWithHttpInfo = function (attributeCategory, attributeName) {\n      var postBody = null; // verify the required parameter 'attributeCategory' is set\n\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling deleteAttribute\");\n      } // verify the required parameter 'attributeName' is set\n\n\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling deleteAttribute\");\n      }\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/attributes/{attributeCategory}/{attributeName}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete an attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteAttribute = function (attributeCategory, attributeName) {\n      return this.deleteAttributeWithHttpInfo(attributeCategory, attributeName).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * List all attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAttributes} and HTTP response\n     */\n\n\n    this.getAttributesWithHttpInfo = function () {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetAttributes;\n      return this.apiClient.callApi('/contacts/attributes', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * List all attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAttributes}\n     */\n\n\n    this.getAttributes = function () {\n      return this.getAttributesWithHttpInfo().then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @param {module:model/UpdateAttribute} updateAttribute Values to update an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateAttributeWithHttpInfo = function (attributeCategory, attributeName, updateAttribute) {\n      var postBody = updateAttribute; // verify the required parameter 'attributeCategory' is set\n\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling updateAttribute\");\n      } // verify the required parameter 'attributeName' is set\n\n\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling updateAttribute\");\n      } // verify the required parameter 'updateAttribute' is set\n\n\n      if (updateAttribute === undefined || updateAttribute === null) {\n        throw new Error(\"Missing the required parameter 'updateAttribute' when calling updateAttribute\");\n      }\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/contacts/attributes/{attributeCategory}/{attributeName}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @param {module:model/UpdateAttribute} updateAttribute Values to update an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateAttribute = function (attributeCategory, attributeName, updateAttribute) {\n      return this.updateAttributeWithHttpInfo(attributeCategory, attributeName, updateAttribute).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n  };\n\n  return exports;\n});","map":{"version":3,"sources":["/Users/bonnieclyde/Desktop/Nivid/node_modules/sib-api-v3-sdk/src/api/AttributesApi.js"],"names":["root","factory","define","amd","module","exports","require","SibApiV3Sdk","AttributesApi","ApiClient","CreateAttribute","ErrorModel","GetAttributes","UpdateAttribute","apiClient","instance","createAttributeWithHttpInfo","attributeCategory","attributeName","createAttribute","postBody","undefined","Error","pathParams","queryParams","collectionQueryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","then","response_and_data","data","deleteAttributeWithHttpInfo","deleteAttribute","getAttributesWithHttpInfo","getAttributes","updateAttributeWithHttpInfo","updateAttribute"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC,WAASA,IAAT,EAAeC,OAAf,EAAwB;AACvB,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AAC9C;AACAD,IAAAA,MAAM,CAAC,CAAC,WAAD,EAAc,uBAAd,EAAuC,kBAAvC,EAA2D,qBAA3D,EAAkF,uBAAlF,CAAD,EAA6GD,OAA7G,CAAN;AACD,GAHD,MAGO,IAAI,OAAOG,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,OAAzC,EAAkD;AACvD;AACAD,IAAAA,MAAM,CAACC,OAAP,GAAiBJ,OAAO,CAACK,OAAO,CAAC,cAAD,CAAR,EAA0BA,OAAO,CAAC,0BAAD,CAAjC,EAA+DA,OAAO,CAAC,qBAAD,CAAtE,EAA+FA,OAAO,CAAC,wBAAD,CAAtG,EAAkIA,OAAO,CAAC,0BAAD,CAAzI,CAAxB;AACD,GAHM,MAGA;AACL;AACA,QAAI,CAACN,IAAI,CAACO,WAAV,EAAuB;AACrBP,MAAAA,IAAI,CAACO,WAAL,GAAmB,EAAnB;AACD;;AACDP,IAAAA,IAAI,CAACO,WAAL,CAAiBC,aAAjB,GAAiCP,OAAO,CAACD,IAAI,CAACO,WAAL,CAAiBE,SAAlB,EAA6BT,IAAI,CAACO,WAAL,CAAiBG,eAA9C,EAA+DV,IAAI,CAACO,WAAL,CAAiBI,UAAhF,EAA4FX,IAAI,CAACO,WAAL,CAAiBK,aAA7G,EAA4HZ,IAAI,CAACO,WAAL,CAAiBM,eAA7I,CAAxC;AACD;AACF,CAdA,EAcC,IAdD,EAcO,UAASJ,SAAT,EAAoBC,eAApB,EAAqCC,UAArC,EAAiDC,aAAjD,EAAgEC,eAAhE,EAAiF;AACvF;AAEA;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,MAAIR,OAAO,GAAG,SAAVA,OAAU,CAASS,SAAT,EAAoB;AAChC,SAAKA,SAAL,GAAiBA,SAAS,IAAIL,SAAS,CAACM,QAAxC;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,2BAAL,GAAmC,UAASC,iBAAT,EAA4BC,aAA5B,EAA2CC,eAA3C,EAA4D;AAC7F,UAAIC,QAAQ,GAAGD,eAAf,CAD6F,CAG7F;;AACA,UAAIF,iBAAiB,KAAKI,SAAtB,IAAmCJ,iBAAiB,KAAK,IAA7D,EAAmE;AACjE,cAAM,IAAIK,KAAJ,CAAU,iFAAV,CAAN;AACD,OAN4F,CAQ7F;;;AACA,UAAIJ,aAAa,KAAKG,SAAlB,IAA+BH,aAAa,KAAK,IAArD,EAA2D;AACzD,cAAM,IAAII,KAAJ,CAAU,6EAAV,CAAN;AACD,OAX4F,CAa7F;;;AACA,UAAIH,eAAe,KAAKE,SAApB,IAAiCF,eAAe,KAAK,IAAzD,EAA+D;AAC7D,cAAM,IAAIG,KAAJ,CAAU,+EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,6BAAqBN,iBADN;AAEf,yBAAiBC;AAFF,OAAjB;AAIA,UAAIM,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKjB,SAAL,CAAekB,OAAf,CACL,0DADK,EACuD,MADvD,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA1CD;AA4CA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKZ,eAAL,GAAuB,UAASF,iBAAT,EAA4BC,aAA5B,EAA2CC,eAA3C,EAA4D;AACjF,aAAO,KAAKH,2BAAL,CAAiCC,iBAAjC,EAAoDC,aAApD,EAAmEC,eAAnE,EACJc,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKC,2BAAL,GAAmC,UAASnB,iBAAT,EAA4BC,aAA5B,EAA2C;AAC5E,UAAIE,QAAQ,GAAG,IAAf,CAD4E,CAG5E;;AACA,UAAIH,iBAAiB,KAAKI,SAAtB,IAAmCJ,iBAAiB,KAAK,IAA7D,EAAmE;AACjE,cAAM,IAAIK,KAAJ,CAAU,iFAAV,CAAN;AACD,OAN2E,CAQ5E;;;AACA,UAAIJ,aAAa,KAAKG,SAAlB,IAA+BH,aAAa,KAAK,IAArD,EAA2D;AACzD,cAAM,IAAII,KAAJ,CAAU,6EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,6BAAqBN,iBADN;AAEf,yBAAiBC;AAFF,OAAjB;AAIA,UAAIM,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKjB,SAAL,CAAekB,OAAf,CACL,0DADK,EACuD,QADvD,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KArCD;AAuCA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKM,eAAL,GAAuB,UAASpB,iBAAT,EAA4BC,aAA5B,EAA2C;AAChE,aAAO,KAAKkB,2BAAL,CAAiCnB,iBAAjC,EAAoDC,aAApD,EACJe,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;;;AACI,SAAKG,yBAAL,GAAiC,YAAW;AAC1C,UAAIlB,QAAQ,GAAG,IAAf;AAGA,UAAIG,UAAU,GAAG,EAAjB;AAEA,UAAIC,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAGnB,aAAjB;AAEA,aAAO,KAAKE,SAAL,CAAekB,OAAf,CACL,sBADK,EACmB,KADnB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KAzBD;AA2BA;AACJ;AACA;AACA;;;AACI,SAAKQ,aAAL,GAAqB,YAAW;AAC9B,aAAO,KAAKD,yBAAL,GACJL,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKK,2BAAL,GAAmC,UAASvB,iBAAT,EAA4BC,aAA5B,EAA2CuB,eAA3C,EAA4D;AAC7F,UAAIrB,QAAQ,GAAGqB,eAAf,CAD6F,CAG7F;;AACA,UAAIxB,iBAAiB,KAAKI,SAAtB,IAAmCJ,iBAAiB,KAAK,IAA7D,EAAmE;AACjE,cAAM,IAAIK,KAAJ,CAAU,iFAAV,CAAN;AACD,OAN4F,CAQ7F;;;AACA,UAAIJ,aAAa,KAAKG,SAAlB,IAA+BH,aAAa,KAAK,IAArD,EAA2D;AACzD,cAAM,IAAII,KAAJ,CAAU,6EAAV,CAAN;AACD,OAX4F,CAa7F;;;AACA,UAAImB,eAAe,KAAKpB,SAApB,IAAiCoB,eAAe,KAAK,IAAzD,EAA+D;AAC7D,cAAM,IAAInB,KAAJ,CAAU,+EAAV,CAAN;AACD;;AAGD,UAAIC,UAAU,GAAG;AACf,6BAAqBN,iBADN;AAEf,yBAAiBC;AAFF,OAAjB;AAIA,UAAIM,WAAW,GAAG,EAAlB;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAGA,UAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,aAAZ,CAAhB;AACA,UAAIC,YAAY,GAAG,CAAC,kBAAD,CAAnB;AACA,UAAIC,OAAO,GAAG,CAAC,kBAAD,CAAd;AACA,UAAIC,UAAU,GAAG,IAAjB;AAEA,aAAO,KAAKjB,SAAL,CAAekB,OAAf,CACL,0DADK,EACuD,KADvD,EAELT,UAFK,EAEOC,WAFP,EAEoBC,qBAFpB,EAE2CC,YAF3C,EAEyDC,UAFzD,EAEqEP,QAFrE,EAGLQ,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD,KA1CD;AA4CA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKU,eAAL,GAAuB,UAASxB,iBAAT,EAA4BC,aAA5B,EAA2CuB,eAA3C,EAA4D;AACjF,aAAO,KAAKD,2BAAL,CAAiCvB,iBAAjC,EAAoDC,aAApD,EAAmEuB,eAAnE,EACJR,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,iBAAiB,CAACC,IAAzB;AACD,OAHI,CAAP;AAID,KALD;AAMD,GA7OD;;AA+OA,SAAO9B,OAAP;AACD,CA9QA,CAAD","sourcesContent":["/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/CreateAttribute', 'model/ErrorModel', 'model/GetAttributes', 'model/UpdateAttribute'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/CreateAttribute'), require('../model/ErrorModel'), require('../model/GetAttributes'), require('../model/UpdateAttribute'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.AttributesApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateAttribute, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetAttributes, root.SibApiV3Sdk.UpdateAttribute);\n  }\n}(this, function(ApiClient, CreateAttribute, ErrorModel, GetAttributes, UpdateAttribute) {\n  'use strict';\n\n  /**\n   * Attributes service.\n   * @module api/AttributesApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new AttributesApi. \n   * @alias module:api/AttributesApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Create contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the attribute\n     * @param {module:model/CreateAttribute} createAttribute Values to create an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.createAttributeWithHttpInfo = function(attributeCategory, attributeName, createAttribute) {\n      var postBody = createAttribute;\n\n      // verify the required parameter 'attributeCategory' is set\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling createAttribute\");\n      }\n\n      // verify the required parameter 'attributeName' is set\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling createAttribute\");\n      }\n\n      // verify the required parameter 'createAttribute' is set\n      if (createAttribute === undefined || createAttribute === null) {\n        throw new Error(\"Missing the required parameter 'createAttribute' when calling createAttribute\");\n      }\n\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/attributes/{attributeCategory}/{attributeName}', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the attribute\n     * @param {module:model/CreateAttribute} createAttribute Values to create an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.createAttribute = function(attributeCategory, attributeName, createAttribute) {\n      return this.createAttributeWithHttpInfo(attributeCategory, attributeName, createAttribute)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteAttributeWithHttpInfo = function(attributeCategory, attributeName) {\n      var postBody = null;\n\n      // verify the required parameter 'attributeCategory' is set\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling deleteAttribute\");\n      }\n\n      // verify the required parameter 'attributeName' is set\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling deleteAttribute\");\n      }\n\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/attributes/{attributeCategory}/{attributeName}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteAttribute = function(attributeCategory, attributeName) {\n      return this.deleteAttributeWithHttpInfo(attributeCategory, attributeName)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAttributes} and HTTP response\n     */\n    this.getAttributesWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetAttributes;\n\n      return this.apiClient.callApi(\n        '/contacts/attributes', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List all attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAttributes}\n     */\n    this.getAttributes = function() {\n      return this.getAttributesWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @param {module:model/UpdateAttribute} updateAttribute Values to update an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateAttributeWithHttpInfo = function(attributeCategory, attributeName, updateAttribute) {\n      var postBody = updateAttribute;\n\n      // verify the required parameter 'attributeCategory' is set\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling updateAttribute\");\n      }\n\n      // verify the required parameter 'attributeName' is set\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling updateAttribute\");\n      }\n\n      // verify the required parameter 'updateAttribute' is set\n      if (updateAttribute === undefined || updateAttribute === null) {\n        throw new Error(\"Missing the required parameter 'updateAttribute' when calling updateAttribute\");\n      }\n\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/attributes/{attributeCategory}/{attributeName}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @param {module:model/UpdateAttribute} updateAttribute Values to update an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateAttribute = function(attributeCategory, attributeName, updateAttribute) {\n      return this.updateAttributeWithHttpInfo(attributeCategory, attributeName, updateAttribute)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Home\\\\Desktop\\\\Boulot\\\\Nivid\\\\src\\\\pages\\\\paymentConfirm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useAuth } from \"../context/userContext\"; // context\n\nimport { useHistory } from 'react-router-dom';\nimport { useLocation } from \"react-router-dom\";\nimport { ButtonRoundLarge } from '../components/utilities/Buttons';\nimport ServiceDescription from \"../components/ServiceDescription\";\n\nconst PaymentConfirm = () => {\n  _s();\n\n  const [isPayment, setIsPayment] = useState(false);\n  const history = useHistory();\n  const {\n    user,\n    event,\n    setCurrentStepProcess,\n    addSalesInDB,\n    updateEventStatus,\n    getSalesOfSellerIdFromDB,\n    sendInBlue_sendRecapToUserAfterPayment,\n    sendInBlue_sendNewSaleToSeller,\n    getEmailOfSellerWithUid,\n    getSaleTokenOfEventFromDb,\n    checkoutCheck\n  } = useAuth(); // context\n\n  const search = useLocation().search;\n  const eventId = new URLSearchParams(search).get('id');\n  const saleToken = new URLSearchParams(search).get('token');\n  const session_id = new URLSearchParams(search).get('session_id');\n  setCurrentStepProcess(31);\n  useEffect(() => {\n    if (eventId === undefined || eventId.length < 7 || eventId !== event.id) return history.push('/dashboard');\n    if (event && event.status && event.status !== \"creating\") return history.push('/dashboard');\n    getSaleTokenOfEventFromDb().then(token => {\n      return saleToken !== token && history.push('/dashboard');\n    });\n    checkoutCheck(session_id).then(res => {\n      console.log(res);\n      return res.status === \"paid\" ? createSales(res.amount, res.id) : history.push('/dashboard');\n    });\n  }, []);\n\n  async function createSales(amount, stripeId) {\n    const sellersUniqueIds = await getSellersIds();\n    let finalSales = []; // On map sur les ids triés, puis on trie les services pour les attribuer au bon seller\n\n    sellersUniqueIds.map(async uniqueId => {\n      const sellerServices = event.choosedServices.filter(service => service.sellerId === uniqueId); // On modifie les services dans le tableau pour leur donner la structure dont on a besoin\n\n      let newSellerServices = [];\n      sellerServices.forEach(service => {\n        const newService = {\n          id: service.id,\n          quantity: service.quantity,\n          price: service.price,\n          image: service.images[0].url,\n          name: service.name,\n          variations: service.variations,\n          variation: service.variation,\n          note: service.note\n        };\n        newSellerServices = [...newSellerServices, newService];\n      });\n      const sellerSales = await getSalesOfSellerIdFromDB(uniqueId);\n      console.log(newSellerServices);\n      let total = 0;\n      newSellerServices.forEach(service => service.variations && service.variations.length > 0 ? total += service.variations.filter(vari => vari.name === service.variation)[0].price * service.quantity : total += service.price * service.quantity); // On structure le sale comme on l'a décidé\n\n      finalSales = [...finalSales, {\n        eventID: event.id,\n        sellerID: uniqueId,\n        userID: user.uid,\n        eventDate: event.date,\n        choosedServices: newSellerServices,\n        paid: amount,\n        date: Date.now(),\n        // à recevoir de stripe\n        status: \"pending\",\n        transactionID: stripeId,\n        total: total,\n        id: sellerSales.length + 1,\n        people: event.people,\n        placeSize: event.placeSize,\n        startAt: event.startAt,\n        endAt: event.endAt,\n        sellerNote: \"\"\n      }];\n      const sellersEmail = await getEmailOfSellerWithUid(uniqueId);\n      sendInBlue_sendNewSaleToSeller(sellersEmail, newSellerServices, event); // Cette fonction est appelée pour le moment au chargement de la pag mais il faudra une confirmation de stripe pour l'appeler.\n\n      if (sellersUniqueIds.length === finalSales.length) {\n        await addSalesInDB(finalSales);\n        console.log(finalSales);\n        updateEventStatus(\"pending\");\n        sendInBlue_sendRecapToUserAfterPayment(user.email, finalSales, event);\n      }\n    });\n  }\n\n  async function getSellersIds() {\n    // On récupère tous les ids des sellers présents dans tous les services puis on les trie\n    let sellersIds = [];\n    event.choosedServices.map(service => sellersIds.push(service.sellerId));\n    const sellersUniqueIds = sellersIds.reduce((acc, current) => {\n      const isFound = acc.find(item => item === current);\n      return !isFound ? acc = [...acc, current] : acc;\n    }, []);\n    return sellersUniqueIds;\n  }\n\n  return !isPayment && /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"paymentConfirmContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"paymentConfirmTop\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"\",\n          src: \"/images/wouhou.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Votre paiement a bien \\xE9t\\xE9 re\\xE7u, merci !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Vous allez recevoir d'ici peu un mail de confirmation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ButtonRoundLarge, {\n          onClick: () => history.push('/dashboard'),\n          color: \"orange\",\n          value: \"Voir mon \\xE9v\\xE8nement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"paymentConfirmBottom\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Vous pouvez aussi d\\xE9s \\xE0 pr\\xE9sent inviter des personnes \\xE0 votre \\xE9v\\xE8nement !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ButtonRoundLarge, {\n          onClick: () => history.push('/creer-mon-evenement/etape-3/invitations'),\n          color: \"blue\",\n          value: \"Pr\\xE9parer mes invitations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PaymentConfirm, \"XonuvymGYL/MvDOW+3DqDVR9Xfw=\", false, function () {\n  return [useHistory, useAuth, useLocation];\n});\n\n_c = PaymentConfirm;\nexport default PaymentConfirm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentConfirm\");","map":{"version":3,"sources":["C:/Users/Home/Desktop/Boulot/Nivid/src/pages/paymentConfirm.js"],"names":["React","useState","useEffect","useAuth","useHistory","useLocation","ButtonRoundLarge","ServiceDescription","PaymentConfirm","isPayment","setIsPayment","history","user","event","setCurrentStepProcess","addSalesInDB","updateEventStatus","getSalesOfSellerIdFromDB","sendInBlue_sendRecapToUserAfterPayment","sendInBlue_sendNewSaleToSeller","getEmailOfSellerWithUid","getSaleTokenOfEventFromDb","checkoutCheck","search","eventId","URLSearchParams","get","saleToken","session_id","undefined","length","id","push","status","then","token","res","console","log","createSales","amount","stripeId","sellersUniqueIds","getSellersIds","finalSales","map","uniqueId","sellerServices","choosedServices","filter","service","sellerId","newSellerServices","forEach","newService","quantity","price","image","images","url","name","variations","variation","note","sellerSales","total","vari","eventID","sellerID","userID","uid","eventDate","date","paid","Date","now","transactionID","people","placeSize","startAt","endAt","sellerNote","sellersEmail","email","sellersIds","reduce","acc","current","isFound","find","item"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,wBAAxB,C,CAAkD;;AAClD,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;;AAGA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAEzB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMU,OAAO,GAAGP,UAAU,EAA1B;AAEA,QAAM;AAAEQ,IAAAA,IAAF;AACFC,IAAAA,KADE;AAEFC,IAAAA,qBAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,iBAJE;AAKFC,IAAAA,wBALE;AAMFC,IAAAA,sCANE;AAOFC,IAAAA,8BAPE;AAQFC,IAAAA,uBARE;AASFC,IAAAA,yBATE;AAUFC,IAAAA;AAVE,MAUgBnB,OAAO,EAV7B,CALyB,CAeO;;AAEhC,QAAMoB,MAAM,GAAGlB,WAAW,GAAGkB,MAA7B;AACA,QAAMC,OAAO,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,EAA4BG,GAA5B,CAAgC,IAAhC,CAAhB;AACA,QAAMC,SAAS,GAAG,IAAIF,eAAJ,CAAoBF,MAApB,EAA4BG,GAA5B,CAAgC,OAAhC,CAAlB;AACA,QAAME,UAAU,GAAG,IAAIH,eAAJ,CAAoBF,MAApB,EAA4BG,GAA5B,CAAgC,YAAhC,CAAnB;AAEAZ,EAAAA,qBAAqB,CAAC,EAAD,CAArB;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIsB,OAAO,KAAKK,SAAZ,IAAyBL,OAAO,CAACM,MAAR,GAAiB,CAA1C,IAA+CN,OAAO,KAAKX,KAAK,CAACkB,EAArE,EAAyE,OAAOpB,OAAO,CAACqB,IAAR,CAAa,YAAb,CAAP;AACzE,QAAInB,KAAK,IAAIA,KAAK,CAACoB,MAAf,IAAyBpB,KAAK,CAACoB,MAAN,KAAiB,UAA9C,EAA0D,OAAOtB,OAAO,CAACqB,IAAR,CAAa,YAAb,CAAP;AAE1DX,IAAAA,yBAAyB,GAAGa,IAA5B,CAAiCC,KAAK,IAAI;AACtC,aAAOR,SAAS,KAAKQ,KAAd,IAAuBxB,OAAO,CAACqB,IAAR,CAAa,YAAb,CAA9B;AACH,KAFD;AAGAV,IAAAA,aAAa,CAACM,UAAD,CAAb,CACKM,IADL,CACUE,GAAG,IAAI;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOA,GAAG,CAACH,MAAJ,KAAe,MAAf,GAAwBM,WAAW,CAACH,GAAG,CAACI,MAAL,EAAaJ,GAAG,CAACL,EAAjB,CAAnC,GAA0DpB,OAAO,CAACqB,IAAR,CAAa,YAAb,CAAjE;AACH,KAJL;AAKH,GAZQ,EAYN,EAZM,CAAT;;AAcA,iBAAeO,WAAf,CAA2BC,MAA3B,EAAmCC,QAAnC,EAA6C;AACzC,UAAMC,gBAAgB,GAAG,MAAMC,aAAa,EAA5C;AACA,QAAIC,UAAU,GAAG,EAAjB,CAFyC,CAGzC;;AACAF,IAAAA,gBAAgB,CAACG,GAAjB,CAAqB,MAAMC,QAAN,IAAkB;AACnC,YAAMC,cAAc,GAAGlC,KAAK,CAACmC,eAAN,CAAsBC,MAAtB,CAA6BC,OAAO,IAAIA,OAAO,CAACC,QAAR,KAAqBL,QAA7D,CAAvB,CADmC,CAGnC;;AACA,UAAIM,iBAAiB,GAAG,EAAxB;AACAL,MAAAA,cAAc,CAACM,OAAf,CAAuBH,OAAO,IAAI;AAC9B,cAAMI,UAAU,GAAG;AACfvB,UAAAA,EAAE,EAAEmB,OAAO,CAACnB,EADG;AAEfwB,UAAAA,QAAQ,EAAEL,OAAO,CAACK,QAFH;AAGfC,UAAAA,KAAK,EAAEN,OAAO,CAACM,KAHA;AAIfC,UAAAA,KAAK,EAAEP,OAAO,CAACQ,MAAR,CAAe,CAAf,EAAkBC,GAJV;AAKfC,UAAAA,IAAI,EAAEV,OAAO,CAACU,IALC;AAMfC,UAAAA,UAAU,EAAEX,OAAO,CAACW,UANL;AAOfC,UAAAA,SAAS,EAAEZ,OAAO,CAACY,SAPJ;AAQfC,UAAAA,IAAI,EAAEb,OAAO,CAACa;AARC,SAAnB;AAUAX,QAAAA,iBAAiB,GAAG,CAAC,GAAGA,iBAAJ,EAAuBE,UAAvB,CAApB;AACH,OAZD;AAaA,YAAMU,WAAW,GAAG,MAAM/C,wBAAwB,CAAC6B,QAAD,CAAlD;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYc,iBAAZ;AACA,UAAIa,KAAK,GAAG,CAAZ;AACAb,MAAAA,iBAAiB,CAACC,OAAlB,CAA0BH,OAAO,IAC5BA,OAAO,CAACW,UAAR,IAAsBX,OAAO,CAACW,UAAR,CAAmB/B,MAAnB,GAA4B,CAAnD,GACAmC,KAAK,IAAIf,OAAO,CAACW,UAAR,CAAmBZ,MAAnB,CAA0BiB,IAAI,IAAIA,IAAI,CAACN,IAAL,KAAcV,OAAO,CAACY,SAAxD,EAAmE,CAAnE,EAAsEN,KAAtE,GAA8EN,OAAO,CAACK,QAD/F,GAEEU,KAAK,IAAIf,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACK,QAHvC,EArBmC,CA2BnC;;AACAX,MAAAA,UAAU,GAAG,CAAC,GAAGA,UAAJ,EAAgB;AACzBuB,QAAAA,OAAO,EAAEtD,KAAK,CAACkB,EADU;AAEzBqC,QAAAA,QAAQ,EAAEtB,QAFe;AAGzBuB,QAAAA,MAAM,EAAEzD,IAAI,CAAC0D,GAHY;AAIzBC,QAAAA,SAAS,EAAE1D,KAAK,CAAC2D,IAJQ;AAKzBxB,QAAAA,eAAe,EAAEI,iBALQ;AAMzBqB,QAAAA,IAAI,EAAEjC,MANmB;AAOzBgC,QAAAA,IAAI,EAAEE,IAAI,CAACC,GAAL,EAPmB;AAOP;AAClB1C,QAAAA,MAAM,EAAE,SARiB;AASzB2C,QAAAA,aAAa,EAAEnC,QATU;AAUzBwB,QAAAA,KAAK,EAAEA,KAVkB;AAWzBlC,QAAAA,EAAE,EAAEiC,WAAW,CAAClC,MAAZ,GAAqB,CAXA;AAYzB+C,QAAAA,MAAM,EAAEhE,KAAK,CAACgE,MAZW;AAazBC,QAAAA,SAAS,EAAEjE,KAAK,CAACiE,SAbQ;AAczBC,QAAAA,OAAO,EAAElE,KAAK,CAACkE,OAdU;AAezBC,QAAAA,KAAK,EAAEnE,KAAK,CAACmE,KAfY;AAgBzBC,QAAAA,UAAU,EAAE;AAhBa,OAAhB,CAAb;AAmBA,YAAMC,YAAY,GAAG,MAAM9D,uBAAuB,CAAC0B,QAAD,CAAlD;AACA3B,MAAAA,8BAA8B,CAAC+D,YAAD,EAAe9B,iBAAf,EAAkCvC,KAAlC,CAA9B,CAhDmC,CAkDnC;;AACA,UAAI6B,gBAAgB,CAACZ,MAAjB,KAA4Bc,UAAU,CAACd,MAA3C,EAAmD;AAC/C,cAAMf,YAAY,CAAC6B,UAAD,CAAlB;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAYM,UAAZ;AACA5B,QAAAA,iBAAiB,CAAC,SAAD,CAAjB;AACAE,QAAAA,sCAAsC,CAACN,IAAI,CAACuE,KAAN,EAAavC,UAAb,EAAyB/B,KAAzB,CAAtC;AACH;AACJ,KAzDD;AA0DH;;AAED,iBAAe8B,aAAf,GAA+B;AAC3B;AACA,QAAIyC,UAAU,GAAG,EAAjB;AACAvE,IAAAA,KAAK,CAACmC,eAAN,CAAsBH,GAAtB,CAA0BK,OAAO,IAAIkC,UAAU,CAACpD,IAAX,CAAgBkB,OAAO,CAACC,QAAxB,CAArC;AAEA,UAAMT,gBAAgB,GAAG0C,UAAU,CAACC,MAAX,CAAkB,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACzD,YAAMC,OAAO,GAAGF,GAAG,CAACG,IAAJ,CAASC,IAAI,IAAIA,IAAI,KAAKH,OAA1B,CAAhB;AACA,aAAO,CAACC,OAAD,GAAWF,GAAG,GAAG,CAAC,GAAGA,GAAJ,EAASC,OAAT,CAAjB,GAAqCD,GAA5C;AACH,KAHwB,EAGtB,EAHsB,CAAzB;AAIA,WAAO5C,gBAAP;AACH;;AAED,SAAO,CAACjC,SAAD,iBACH;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,gCACI;AAAK,UAAA,GAAG,EAAC,EAAT;AAAY,UAAA,GAAG,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII,QAAC,gBAAD;AACI,UAAA,OAAO,EAAE,MAAME,OAAO,CAACqB,IAAR,CAAa,YAAb,CADnB;AAEI,UAAA,KAAK,EAAC,QAFV;AAGI,UAAA,KAAK,EAAC;AAHV;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAWI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,gBAAD;AACI,UAAA,OAAO,EAAE,MAAMrB,OAAO,CAACqB,IAAR,CAAa,0CAAb,CADnB;AAEI,UAAA,KAAK,EAAC,MAFV;AAGI,UAAA,KAAK,EAAC;AAHV;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH,CA1ID;;GAAMxB,c;UAGcJ,U,EAYMD,O,EAEPE,W;;;KAjBbG,c;AA4IN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useAuth } from \"../context/userContext\"; // context\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport { ButtonRoundLarge } from '../components/utilities/Buttons'\r\nimport ServiceDescription from \"../components/ServiceDescription\";\r\n\r\n\r\nconst PaymentConfirm = () => {\r\n\r\n    const [isPayment, setIsPayment] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const { user,\r\n        event,\r\n        setCurrentStepProcess,\r\n        addSalesInDB,\r\n        updateEventStatus,\r\n        getSalesOfSellerIdFromDB,\r\n        sendInBlue_sendRecapToUserAfterPayment,\r\n        sendInBlue_sendNewSaleToSeller,\r\n        getEmailOfSellerWithUid,\r\n        getSaleTokenOfEventFromDb,\r\n        checkoutCheck } = useAuth() // context\r\n\r\n    const search = useLocation().search\r\n    const eventId = new URLSearchParams(search).get('id')\r\n    const saleToken = new URLSearchParams(search).get('token')\r\n    const session_id = new URLSearchParams(search).get('session_id')\r\n\r\n    setCurrentStepProcess(31)\r\n\r\n    useEffect(() => {\r\n        if (eventId === undefined || eventId.length < 7 || eventId !== event.id) return history.push('/dashboard')\r\n        if (event && event.status && event.status !== \"creating\") return history.push('/dashboard')\r\n\r\n        getSaleTokenOfEventFromDb().then(token => {\r\n            return saleToken !== token && history.push('/dashboard')\r\n        })\r\n        checkoutCheck(session_id)\r\n            .then(res => {\r\n                console.log(res)\r\n                return res.status === \"paid\" ? createSales(res.amount, res.id) : history.push('/dashboard')\r\n            })\r\n    }, [])\r\n\r\n    async function createSales(amount, stripeId) {\r\n        const sellersUniqueIds = await getSellersIds()\r\n        let finalSales = []\r\n        // On map sur les ids triés, puis on trie les services pour les attribuer au bon seller\r\n        sellersUniqueIds.map(async uniqueId => {\r\n            const sellerServices = event.choosedServices.filter(service => service.sellerId === uniqueId)\r\n\r\n            // On modifie les services dans le tableau pour leur donner la structure dont on a besoin\r\n            let newSellerServices = []\r\n            sellerServices.forEach(service => {\r\n                const newService = {\r\n                    id: service.id,\r\n                    quantity: service.quantity,\r\n                    price: service.price,\r\n                    image: service.images[0].url,\r\n                    name: service.name,\r\n                    variations: service.variations,\r\n                    variation: service.variation,\r\n                    note: service.note\r\n                }\r\n                newSellerServices = [...newSellerServices, newService]\r\n            })\r\n            const sellerSales = await getSalesOfSellerIdFromDB(uniqueId)\r\n            console.log(newSellerServices)\r\n            let total = 0\r\n            newSellerServices.forEach(service =>\r\n                (service.variations && service.variations.length > 0) ? \r\n                total += service.variations.filter(vari => vari.name === service.variation)[0].price * service.quantity\r\n                : total += service.price * service.quantity\r\n            )\r\n\r\n            // On structure le sale comme on l'a décidé\r\n            finalSales = [...finalSales, {\r\n                eventID: event.id,\r\n                sellerID: uniqueId,\r\n                userID: user.uid,\r\n                eventDate: event.date,\r\n                choosedServices: newSellerServices,\r\n                paid: amount,\r\n                date: Date.now(), // à recevoir de stripe\r\n                status: \"pending\",\r\n                transactionID: stripeId,\r\n                total: total,\r\n                id: sellerSales.length + 1,\r\n                people: event.people,\r\n                placeSize: event.placeSize,\r\n                startAt: event.startAt,\r\n                endAt: event.endAt,\r\n                sellerNote: \"\"\r\n            }]\r\n\r\n            const sellersEmail = await getEmailOfSellerWithUid(uniqueId)\r\n            sendInBlue_sendNewSaleToSeller(sellersEmail, newSellerServices, event)\r\n\r\n            // Cette fonction est appelée pour le moment au chargement de la pag mais il faudra une confirmation de stripe pour l'appeler.\r\n            if (sellersUniqueIds.length === finalSales.length) {\r\n                await addSalesInDB(finalSales)\r\n                console.log(finalSales)\r\n                updateEventStatus(\"pending\")\r\n                sendInBlue_sendRecapToUserAfterPayment(user.email, finalSales, event)\r\n            }\r\n        })\r\n    }\r\n\r\n    async function getSellersIds() {\r\n        // On récupère tous les ids des sellers présents dans tous les services puis on les trie\r\n        let sellersIds = []\r\n        event.choosedServices.map(service => sellersIds.push(service.sellerId))\r\n\r\n        const sellersUniqueIds = sellersIds.reduce((acc, current) => {\r\n            const isFound = acc.find(item => item === current);\r\n            return !isFound ? acc = [...acc, current] : acc\r\n        }, [])\r\n        return sellersUniqueIds\r\n    }\r\n\r\n    return !isPayment && (\r\n        <div>\r\n            <div className=\"paymentConfirmContainer\">\r\n                <div className=\"paymentConfirmTop\">\r\n                    <img alt=\"\" src=\"/images/wouhou.png\" />\r\n                    <h2>Votre paiement a bien été reçu, merci !</h2>\r\n                    <p>Vous allez recevoir d'ici peu un mail de confirmation</p>\r\n                    <ButtonRoundLarge\r\n                        onClick={() => history.push('/dashboard')}\r\n                        color=\"orange\"\r\n                        value=\"Voir mon évènement\"\r\n                    />\r\n                </div>\r\n                <div className=\"paymentConfirmBottom\">\r\n                    <p>Vous pouvez aussi dés à présent inviter des personnes à votre évènement !</p>\r\n                    <ButtonRoundLarge\r\n                        onClick={() => history.push('/creer-mon-evenement/etape-3/invitations')}\r\n                        color=\"blue\"\r\n                        value=\"Préparer mes invitations\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PaymentConfirm;\r\n"]},"metadata":{},"sourceType":"module"}
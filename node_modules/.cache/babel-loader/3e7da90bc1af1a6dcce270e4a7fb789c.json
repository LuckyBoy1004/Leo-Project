{"ast":null,"code":"/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\nvar pkgJson = require('../package.json');\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['superagent', 'querystring'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('superagent'), require('querystring'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n\n    root.SibApiV3Sdk.ApiClient = factory(root.superagent, root.querystring);\n  }\n})(this, function (superagent, querystring) {\n  'use strict';\n  /**\n   * @module ApiClient\n   * @version 8.2.1\n   */\n\n  /**\n   * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n   * application to use this class directly - the *Api and model classes provide the public API for the service. The\n   * contents of this file should be regarded as internal but are documented for completeness.\n   * @alias module:ApiClient\n   * @class\n   */\n\n  var exports = function exports() {\n    /**\n     * The base URL against which to resolve every API call's (relative) path.\n     * @type {String}\n     * @default https://api.sendinblue.com/v3\n     */\n    this.basePath = 'https://api.sendinblue.com/v3'.replace(/\\/+$/, '');\n    /**\n     * The authentication methods to be included for all API calls.\n     * @type {Array.<String>}\n     */\n\n    this.authentications = {\n      'api-key': {\n        type: 'apiKey',\n        'in': 'header',\n        name: 'api-key'\n      },\n      'partner-key': {\n        type: 'apiKey',\n        'in': 'header',\n        name: 'partner-key'\n      }\n    };\n    /**\n     * The default HTTP headers to be included for all API calls.\n     * @type {Array.<String>}\n     * @default {}\n     */\n\n    this.defaultHeaders = {\n      'user-agent': \"sendinblue_clientAPI/v\".concat(pkgJson.version, \"/node\")\n    };\n    /**\n     * The default HTTP timeout for all API calls.\n     * @type {Number}\n     * @default 60000\n     */\n\n    this.timeout = 60000;\n    /**\n     * If set to false an additional timestamp parameter is added to all API GET calls to\n     * prevent browser caching\n     * @type {Boolean}\n     * @default true\n     */\n\n    this.cache = true;\n    /**\n     * If set to true, the client will save the cookies from each server\n     * response, and return them in the next request.\n     * @default false\n     */\n\n    this.enableCookies = false;\n    /*\n     * Used to save and return cookies in a node.js (non-browser) setting,\n     * if this.enableCookies is set to true.\n     */\n\n    if (typeof window === 'undefined') {\n      this.agent = new superagent.agent();\n    }\n    /*\n     * Allow user to override superagent agent\n     */\n\n\n    this.requestAgent = null;\n  };\n  /**\n   * Returns a string representation for an actual parameter.\n   * @param param The actual parameter.\n   * @returns {String} The string representation of <code>param</code>.\n   */\n\n\n  exports.prototype.paramToString = function (param) {\n    if (param == undefined || param == null) {\n      return '';\n    }\n\n    if (param instanceof Date) {\n      return param.toJSON();\n    }\n\n    return param.toString();\n  };\n  /**\n   * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n   * NOTE: query parameters are not handled here.\n   * @param {String} path The path to append to the base URL.\n   * @param {Object} pathParams The parameter values to append.\n   * @returns {String} The encoded path with parameter values substituted.\n   */\n\n\n  exports.prototype.buildUrl = function (path, pathParams) {\n    if (!path.match(/^\\//)) {\n      path = '/' + path;\n    }\n\n    var url = this.basePath + path;\n\n    var _this = this;\n\n    url = url.replace(/\\{([\\w-]+)\\}/g, function (fullMatch, key) {\n      var value;\n\n      if (pathParams.hasOwnProperty(key)) {\n        value = _this.paramToString(pathParams[key]);\n      } else {\n        value = fullMatch;\n      }\n\n      return encodeURIComponent(value);\n    });\n    return url;\n  };\n  /**\n   * Checks whether the given content type represents JSON.<br>\n   * JSON content type examples:<br>\n   * <ul>\n   * <li>application/json</li>\n   * <li>application/json; charset=UTF8</li>\n   * <li>APPLICATION/JSON</li>\n   * </ul>\n   * @param {String} contentType The MIME content type to check.\n   * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n   */\n\n\n  exports.prototype.isJsonMime = function (contentType) {\n    return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n  };\n  /**\n   * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n   * @param {Array.<String>} contentTypes\n   * @returns {String} The chosen content type, preferring JSON.\n   */\n\n\n  exports.prototype.jsonPreferredMime = function (contentTypes) {\n    for (var i = 0; i < contentTypes.length; i++) {\n      if (this.isJsonMime(contentTypes[i])) {\n        return contentTypes[i];\n      }\n    }\n\n    return contentTypes[0];\n  };\n  /**\n   * Checks whether the given parameter value represents file-like content.\n   * @param param The parameter to check.\n   * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n   */\n\n\n  exports.prototype.isFileParam = function (param) {\n    // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n    if (typeof require === 'function') {\n      var fs;\n\n      try {\n        fs = require('fs');\n      } catch (err) {}\n\n      if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n        return true;\n      }\n    } // Buffer in Node.js\n\n\n    if (typeof Buffer === 'function' && param instanceof Buffer) {\n      return true;\n    } // Blob in browser\n\n\n    if (typeof Blob === 'function' && param instanceof Blob) {\n      return true;\n    } // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n\n\n    if (typeof File === 'function' && param instanceof File) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Normalizes parameter values:\n   * <ul>\n   * <li>remove nils</li>\n   * <li>keep files and arrays</li>\n   * <li>format to string with `paramToString` for other cases</li>\n   * </ul>\n   * @param {Object.<String, Object>} params The parameters as object properties.\n   * @returns {Object.<String, Object>} normalized parameters.\n   */\n\n\n  exports.prototype.normalizeParams = function (params) {\n    var newParams = {};\n\n    for (var key in params) {\n      if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n        var value = params[key];\n\n        if (this.isFileParam(value) || Array.isArray(value)) {\n          newParams[key] = value;\n        } else {\n          newParams[key] = this.paramToString(value);\n        }\n      }\n    }\n\n    return newParams;\n  };\n  /**\n   * Enumeration of collection format separator strategies.\n   * @enum {String}\n   * @readonly\n   */\n\n\n  exports.CollectionFormatEnum = {\n    /**\n     * Comma-separated values. Value: <code>csv</code>\n     * @const\n     */\n    CSV: ',',\n\n    /**\n     * Space-separated values. Value: <code>ssv</code>\n     * @const\n     */\n    SSV: ' ',\n\n    /**\n     * Tab-separated values. Value: <code>tsv</code>\n     * @const\n     */\n    TSV: '\\t',\n\n    /**\n     * Pipe(|)-separated values. Value: <code>pipes</code>\n     * @const\n     */\n    PIPES: '|',\n\n    /**\n     * Native array. Value: <code>multi</code>\n     * @const\n     */\n    MULTI: 'multi'\n  };\n  /**\n   * Builds a string representation of an array-type actual parameter, according to the given collection format.\n   * @param {Array} param An array parameter.\n   * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n   * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n   * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n   */\n\n  exports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {\n    if (param == null) {\n      return null;\n    }\n\n    switch (collectionFormat) {\n      case 'csv':\n        return param.map(this.paramToString).join(',');\n\n      case 'ssv':\n        return param.map(this.paramToString).join(' ');\n\n      case 'tsv':\n        return param.map(this.paramToString).join('\\t');\n\n      case 'pipes':\n        return param.map(this.paramToString).join('|');\n\n      case 'multi':\n        // return the array directly as SuperAgent will handle it as expected\n        return param.map(this.paramToString);\n\n      default:\n        throw new Error('Unknown collection format: ' + collectionFormat);\n    }\n  };\n  /**\n   * Applies authentication headers to the request.\n   * @param {Object} request The request object created by a <code>superagent()</code> call.\n   * @param {Array.<String>} authNames An array of authentication method names.\n   */\n\n\n  exports.prototype.applyAuthToRequest = function (request, authNames) {\n    var _this = this;\n\n    authNames.forEach(function (authName) {\n      var auth = _this.authentications[authName];\n\n      switch (auth.type) {\n        case 'basic':\n          if (auth.username || auth.password) {\n            request.auth(auth.username || '', auth.password || '');\n          }\n\n          break;\n\n        case 'apiKey':\n          if (auth.apiKey) {\n            var data = {};\n\n            if (auth.apiKeyPrefix) {\n              data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n            } else {\n              data[auth.name] = auth.apiKey;\n            }\n\n            if (auth['in'] === 'header') {\n              request.set(data);\n            } else {\n              request.query(data);\n            }\n          }\n\n          break;\n\n        case 'oauth2':\n          if (auth.accessToken) {\n            request.set({\n              'Authorization': 'Bearer ' + auth.accessToken\n            });\n          }\n\n          break;\n\n        default:\n          throw new Error('Unknown authentication type: ' + auth.type);\n      }\n    });\n  };\n  /**\n   * Deserializes an HTTP response body into a value of the specified type.\n   * @param {Object} response A SuperAgent response object.\n   * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n   * all properties on <code>data<code> will be converted to this type.\n   * @returns A value of the specified type.\n   */\n\n\n  exports.prototype.deserialize = function deserialize(response, returnType) {\n    if (response == null || returnType == null || response.status == 204) {\n      return null;\n    } // Rely on SuperAgent for parsing response body.\n    // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n\n\n    var data = response.body;\n\n    if (data == null || typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length) {\n      // SuperAgent does not always produce a body; use the unparsed response as a fallback\n      data = response.text;\n    }\n\n    return exports.convertToType(data, returnType);\n  };\n  /**\n   * Invokes the REST service using the supplied settings and parameters.\n   * @param {String} path The base URL to invoke.\n   * @param {String} httpMethod The HTTP method to use.\n   * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n   * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n   * @param {Object.<String, Object>} collectionQueryParams A map of collection query parameters and their values.\n   * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n   * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n   * @param {Object} bodyParam The value to pass as the request body.\n   * @param {Array.<String>} authNames An array of authentication type names.\n   * @param {Array.<String>} contentTypes An array of request MIME types.\n   * @param {Array.<String>} accepts An array of acceptable response MIME types.\n   * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n   * constructor for a complex type.\n   * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.\n   */\n\n\n  exports.prototype.callApi = function callApi(path, httpMethod, pathParams, queryParams, collectionQueryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType) {\n    var _this = this;\n\n    var url = this.buildUrl(path, pathParams);\n    var request = superagent(httpMethod, url); // apply authentications\n\n    this.applyAuthToRequest(request, authNames); // set collection query parameters\n\n    for (var key in collectionQueryParams) {\n      if (collectionQueryParams.hasOwnProperty(key)) {\n        var param = collectionQueryParams[key];\n\n        if (param.collectionFormat === 'csv') {\n          // SuperAgent normally percent-encodes all reserved characters in a query parameter. However,\n          // commas are used as delimiters for the 'csv' collectionFormat so they must not be encoded. We\n          // must therefore construct and encode 'csv' collection query parameters manually.\n          if (param.value != null) {\n            var value = param.value.map(this.paramToString).map(encodeURIComponent).join(',');\n            request.query(encodeURIComponent(key) + \"=\" + value);\n          }\n        } else {\n          // All other collection query parameters should be treated as ordinary query parameters.\n          queryParams[key] = this.buildCollectionParam(param.value, param.collectionFormat);\n        }\n      }\n    } // set query parameters\n\n\n    if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n      queryParams['_'] = new Date().getTime();\n    }\n\n    request.query(this.normalizeParams(queryParams)); // set header parameters\n\n    request.set(this.defaultHeaders).set(this.normalizeParams(headerParams)); // set requestAgent if it is set by user\n\n    if (this.requestAgent) {\n      request.agent(this.requestAgent);\n    } // set request timeout\n\n\n    request.timeout(this.timeout);\n    var contentType = this.jsonPreferredMime(contentTypes);\n\n    if (contentType) {\n      // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n      if (contentType != 'multipart/form-data') {\n        request.type(contentType);\n      }\n    } else if (!request.header['Content-Type']) {\n      request.type('application/json');\n    }\n\n    if (contentType === 'application/x-www-form-urlencoded') {\n      request.send(querystring.stringify(this.normalizeParams(formParams)));\n    } else if (contentType == 'multipart/form-data') {\n      var _formParams = this.normalizeParams(formParams);\n\n      for (var key in _formParams) {\n        if (_formParams.hasOwnProperty(key)) {\n          if (this.isFileParam(_formParams[key])) {\n            // file field\n            request.attach(key, _formParams[key]);\n          } else {\n            request.field(key, _formParams[key]);\n          }\n        }\n      }\n    } else if (bodyParam) {\n      request.send(bodyParam);\n    }\n\n    var accept = this.jsonPreferredMime(accepts);\n\n    if (accept) {\n      request.accept(accept);\n    }\n\n    if (returnType === 'Blob') {\n      request.responseType('blob');\n    } else if (returnType === 'String') {\n      request.responseType('string');\n    } // Attach previously saved cookies, if enabled\n\n\n    if (this.enableCookies) {\n      if (typeof window === 'undefined') {\n        this.agent.attachCookies(request);\n      } else {\n        request.withCredentials();\n      }\n    }\n\n    return new Promise(function (resolve, reject) {\n      request.end(function (error, response) {\n        if (error) {\n          reject(error);\n        } else {\n          try {\n            var data = _this.deserialize(response, returnType);\n\n            if (_this.enableCookies && typeof window === 'undefined') {\n              _this.agent.saveCookies(response);\n            }\n\n            resolve({\n              data: data,\n              response: response\n            });\n          } catch (err) {\n            reject(err);\n          }\n        }\n      });\n    });\n  };\n  /**\n   * Parses an ISO-8601 string representation of a date value.\n   * @param {String} str The date value as a string.\n   * @returns {Date} The parsed date object.\n   */\n\n\n  exports.parseDate = function (str) {\n    return new Date(str.replace(/T/i, ' '));\n  };\n  /**\n   * Converts a value to the specified type.\n   * @param {(String|Object)} data The data to convert, as a string or object.\n   * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n   * all properties on <code>data<code> will be converted to this type.\n   * @returns An instance of the specified type or null or undefined if data is null or undefined.\n   */\n\n\n  exports.convertToType = function (data, type) {\n    if (data === null || data === undefined) return data;\n\n    switch (type) {\n      case 'Boolean':\n        return Boolean(data);\n\n      case 'Integer':\n        return parseInt(data, 10);\n\n      case 'Number':\n        return parseFloat(data);\n\n      case 'String':\n        return String(data);\n\n      case 'Date':\n        return this.parseDate(String(data));\n\n      case 'Blob':\n        return data;\n\n      default:\n        if (type === Object) {\n          // generic object, return directly\n          return data;\n        } else if (typeof type === 'function') {\n          // for model type like: User\n          return type.constructFromObject(data);\n        } else if (Array.isArray(type)) {\n          // for array type like: ['String']\n          var itemType = type[0];\n          return data.map(function (item) {\n            return exports.convertToType(item, itemType);\n          });\n        } else if (typeof type === 'object') {\n          // for plain object type like: {'String': 'Integer'}\n          var keyType, valueType;\n\n          for (var k in type) {\n            if (type.hasOwnProperty(k)) {\n              keyType = k;\n              valueType = type[k];\n              break;\n            }\n          }\n\n          var result = {};\n\n          for (var k in data) {\n            if (data.hasOwnProperty(k)) {\n              var key = exports.convertToType(k, keyType);\n              var value = exports.convertToType(data[k], valueType);\n              result[key] = value;\n            }\n          }\n\n          return result;\n        } else {\n          // for unknown type, return the data directly\n          return data;\n        }\n\n    }\n  };\n  /**\n   * Constructs a new map or array model from REST data.\n   * @param data {Object|Array} The REST data.\n   * @param obj {Object|Array} The target object or array.\n   */\n\n\n  exports.constructFromObject = function (data, obj, itemType) {\n    if (Array.isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        if (data.hasOwnProperty(i)) obj[i] = exports.convertToType(data[i], itemType);\n      }\n    } else {\n      for (var k in data) {\n        if (data.hasOwnProperty(k)) obj[k] = exports.convertToType(data[k], itemType);\n      }\n    }\n  };\n  /**\n   * Sets the user-agent\n   * @param header (String)\n   */\n\n\n  exports.setUserAgent = function (header) {\n    if (typeof header == 'string' && header.substr(0, 11).trim().toLowerCase() === 'sendinblue_') {\n      exports.instance.defaultHeaders['user-agent'] = header;\n    }\n\n    return;\n  };\n  /**\n   * The default API client implementation.\n   * @type {module:ApiClient}\n   */\n\n\n  exports.instance = new exports();\n  return exports;\n});","map":{"version":3,"sources":["/Users/bonnieclyde/Desktop/Copie de Nivid (1)/node_modules/sib-api-v3-sdk/src/ApiClient.js"],"names":["pkgJson","require","root","factory","define","amd","module","exports","SibApiV3Sdk","ApiClient","superagent","querystring","basePath","replace","authentications","type","name","defaultHeaders","version","timeout","cache","enableCookies","window","agent","requestAgent","prototype","paramToString","param","undefined","Date","toJSON","toString","buildUrl","path","pathParams","match","url","_this","fullMatch","key","value","hasOwnProperty","encodeURIComponent","isJsonMime","contentType","Boolean","jsonPreferredMime","contentTypes","i","length","isFileParam","fs","err","ReadStream","Buffer","Blob","File","normalizeParams","params","newParams","Array","isArray","CollectionFormatEnum","CSV","SSV","TSV","PIPES","MULTI","buildCollectionParam","collectionFormat","map","join","Error","applyAuthToRequest","request","authNames","forEach","authName","auth","username","password","apiKey","data","apiKeyPrefix","set","query","accessToken","deserialize","response","returnType","status","body","Object","keys","text","convertToType","callApi","httpMethod","queryParams","collectionQueryParams","headerParams","formParams","bodyParam","accepts","toUpperCase","getTime","header","send","stringify","_formParams","attach","field","accept","responseType","attachCookies","withCredentials","Promise","resolve","reject","end","error","saveCookies","parseDate","str","parseInt","parseFloat","String","constructFromObject","itemType","item","keyType","valueType","k","result","obj","setUserAgent","substr","trim","toLowerCase","instance"],"mappings":"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","sourcesContent":["/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\nconst pkgJson = require('../package.json');\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['superagent', 'querystring'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('superagent'), require('querystring'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.ApiClient = factory(root.superagent, root.querystring);\n  }\n}(this, function(superagent, querystring) {\n  'use strict';\n\n  /**\n   * @module ApiClient\n   * @version 8.2.1\n   */\n\n  /**\n   * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n   * application to use this class directly - the *Api and model classes provide the public API for the service. The\n   * contents of this file should be regarded as internal but are documented for completeness.\n   * @alias module:ApiClient\n   * @class\n   */\n  var exports = function() {\n    /**\n     * The base URL against which to resolve every API call's (relative) path.\n     * @type {String}\n     * @default https://api.sendinblue.com/v3\n     */\n    this.basePath = 'https://api.sendinblue.com/v3'.replace(/\\/+$/, '');\n\n    /**\n     * The authentication methods to be included for all API calls.\n     * @type {Array.<String>}\n     */\n    this.authentications = {\n      'api-key': {type: 'apiKey', 'in': 'header', name: 'api-key'},\n      'partner-key': {type: 'apiKey', 'in': 'header', name: 'partner-key'}\n    };\n    /**\n     * The default HTTP headers to be included for all API calls.\n     * @type {Array.<String>}\n     * @default {}\n     */\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${pkgJson.version}/node`\n    };\n\n    /**\n     * The default HTTP timeout for all API calls.\n     * @type {Number}\n     * @default 60000\n     */\n    this.timeout = 60000;\n\n    /**\n     * If set to false an additional timestamp parameter is added to all API GET calls to\n     * prevent browser caching\n     * @type {Boolean}\n     * @default true\n     */\n    this.cache = true;\n\n    /**\n     * If set to true, the client will save the cookies from each server\n     * response, and return them in the next request.\n     * @default false\n     */\n    this.enableCookies = false;\n\n    /*\n     * Used to save and return cookies in a node.js (non-browser) setting,\n     * if this.enableCookies is set to true.\n     */\n    if (typeof window === 'undefined') {\n      this.agent = new superagent.agent();\n    }\n\n    /*\n     * Allow user to override superagent agent\n     */\n    this.requestAgent = null;\n  };\n\n  /**\n   * Returns a string representation for an actual parameter.\n   * @param param The actual parameter.\n   * @returns {String} The string representation of <code>param</code>.\n   */\n  exports.prototype.paramToString = function(param) {\n    if (param == undefined || param == null) {\n      return '';\n    }\n    if (param instanceof Date) {\n      return param.toJSON();\n    }\n    return param.toString();\n  };\n\n  /**\n   * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n   * NOTE: query parameters are not handled here.\n   * @param {String} path The path to append to the base URL.\n   * @param {Object} pathParams The parameter values to append.\n   * @returns {String} The encoded path with parameter values substituted.\n   */\n  exports.prototype.buildUrl = function(path, pathParams) {\n    if (!path.match(/^\\//)) {\n      path = '/' + path;\n    }\n    var url = this.basePath + path;\n    var _this = this;\n    url = url.replace(/\\{([\\w-]+)\\}/g, function(fullMatch, key) {\n      var value;\n      if (pathParams.hasOwnProperty(key)) {\n        value = _this.paramToString(pathParams[key]);\n      } else {\n        value = fullMatch;\n      }\n      return encodeURIComponent(value);\n    });\n    return url;\n  };\n\n  /**\n   * Checks whether the given content type represents JSON.<br>\n   * JSON content type examples:<br>\n   * <ul>\n   * <li>application/json</li>\n   * <li>application/json; charset=UTF8</li>\n   * <li>APPLICATION/JSON</li>\n   * </ul>\n   * @param {String} contentType The MIME content type to check.\n   * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n   */\n  exports.prototype.isJsonMime = function(contentType) {\n    return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n  };\n\n  /**\n   * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n   * @param {Array.<String>} contentTypes\n   * @returns {String} The chosen content type, preferring JSON.\n   */\n  exports.prototype.jsonPreferredMime = function(contentTypes) {\n    for (var i = 0; i < contentTypes.length; i++) {\n      if (this.isJsonMime(contentTypes[i])) {\n        return contentTypes[i];\n      }\n    }\n    return contentTypes[0];\n  };\n\n  /**\n   * Checks whether the given parameter value represents file-like content.\n   * @param param The parameter to check.\n   * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n   */\n  exports.prototype.isFileParam = function(param) {\n    // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n    if (typeof require === 'function') {\n      var fs;\n      try {\n        fs = require('fs');\n      } catch (err) {}\n      if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n        return true;\n      }\n    }\n    // Buffer in Node.js\n    if (typeof Buffer === 'function' && param instanceof Buffer) {\n      return true;\n    }\n    // Blob in browser\n    if (typeof Blob === 'function' && param instanceof Blob) {\n      return true;\n    }\n    // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n    if (typeof File === 'function' && param instanceof File) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Normalizes parameter values:\n   * <ul>\n   * <li>remove nils</li>\n   * <li>keep files and arrays</li>\n   * <li>format to string with `paramToString` for other cases</li>\n   * </ul>\n   * @param {Object.<String, Object>} params The parameters as object properties.\n   * @returns {Object.<String, Object>} normalized parameters.\n   */\n  exports.prototype.normalizeParams = function(params) {\n    var newParams = {};\n    for (var key in params) {\n      if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n        var value = params[key];\n        if (this.isFileParam(value) || Array.isArray(value)) {\n          newParams[key] = value;\n        } else {\n          newParams[key] = this.paramToString(value);\n        }\n      }\n    }\n    return newParams;\n  };\n\n  /**\n   * Enumeration of collection format separator strategies.\n   * @enum {String}\n   * @readonly\n   */\n  exports.CollectionFormatEnum = {\n    /**\n     * Comma-separated values. Value: <code>csv</code>\n     * @const\n     */\n    CSV: ',',\n    /**\n     * Space-separated values. Value: <code>ssv</code>\n     * @const\n     */\n    SSV: ' ',\n    /**\n     * Tab-separated values. Value: <code>tsv</code>\n     * @const\n     */\n    TSV: '\\t',\n    /**\n     * Pipe(|)-separated values. Value: <code>pipes</code>\n     * @const\n     */\n    PIPES: '|',\n    /**\n     * Native array. Value: <code>multi</code>\n     * @const\n     */\n    MULTI: 'multi'\n  };\n\n  /**\n   * Builds a string representation of an array-type actual parameter, according to the given collection format.\n   * @param {Array} param An array parameter.\n   * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n   * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n   * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n   */\n  exports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {\n    if (param == null) {\n      return null;\n    }\n    switch (collectionFormat) {\n      case 'csv':\n        return param.map(this.paramToString).join(',');\n      case 'ssv':\n        return param.map(this.paramToString).join(' ');\n      case 'tsv':\n        return param.map(this.paramToString).join('\\t');\n      case 'pipes':\n        return param.map(this.paramToString).join('|');\n      case 'multi':\n        // return the array directly as SuperAgent will handle it as expected\n        return param.map(this.paramToString);\n      default:\n        throw new Error('Unknown collection format: ' + collectionFormat);\n    }\n  };\n\n  /**\n   * Applies authentication headers to the request.\n   * @param {Object} request The request object created by a <code>superagent()</code> call.\n   * @param {Array.<String>} authNames An array of authentication method names.\n   */\n  exports.prototype.applyAuthToRequest = function(request, authNames) {\n    var _this = this;\n    authNames.forEach(function(authName) {\n      var auth = _this.authentications[authName];\n      switch (auth.type) {\n        case 'basic':\n          if (auth.username || auth.password) {\n            request.auth(auth.username || '', auth.password || '');\n          }\n          break;\n        case 'apiKey':\n          if (auth.apiKey) {\n            var data = {};\n            if (auth.apiKeyPrefix) {\n              data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n            } else {\n              data[auth.name] = auth.apiKey;\n            }\n            if (auth['in'] === 'header') {\n              request.set(data);\n            } else {\n              request.query(data);\n            }\n          }\n          break;\n        case 'oauth2':\n          if (auth.accessToken) {\n            request.set({'Authorization': 'Bearer ' + auth.accessToken});\n          }\n          break;\n        default:\n          throw new Error('Unknown authentication type: ' + auth.type);\n      }\n    });\n  };\n\n  /**\n   * Deserializes an HTTP response body into a value of the specified type.\n   * @param {Object} response A SuperAgent response object.\n   * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n   * all properties on <code>data<code> will be converted to this type.\n   * @returns A value of the specified type.\n   */\n  exports.prototype.deserialize = function deserialize(response, returnType) {\n    if (response == null || returnType == null || response.status == 204) {\n      return null;\n    }\n    // Rely on SuperAgent for parsing response body.\n    // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n    var data = response.body;\n    if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n      // SuperAgent does not always produce a body; use the unparsed response as a fallback\n      data = response.text;\n    }\n    return exports.convertToType(data, returnType);\n  };\n\n  /**\n   * Invokes the REST service using the supplied settings and parameters.\n   * @param {String} path The base URL to invoke.\n   * @param {String} httpMethod The HTTP method to use.\n   * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n   * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n   * @param {Object.<String, Object>} collectionQueryParams A map of collection query parameters and their values.\n   * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n   * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n   * @param {Object} bodyParam The value to pass as the request body.\n   * @param {Array.<String>} authNames An array of authentication type names.\n   * @param {Array.<String>} contentTypes An array of request MIME types.\n   * @param {Array.<String>} accepts An array of acceptable response MIME types.\n   * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n   * constructor for a complex type.\n   * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.\n   */\n  exports.prototype.callApi = function callApi(path, httpMethod, pathParams,\n      queryParams, collectionQueryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n      returnType) {\n\n    var _this = this;\n    var url = this.buildUrl(path, pathParams);\n    var request = superagent(httpMethod, url);\n\n    // apply authentications\n    this.applyAuthToRequest(request, authNames);\n\n    // set collection query parameters\n    for (var key in collectionQueryParams) {\n      if (collectionQueryParams.hasOwnProperty(key)) {\n        var param = collectionQueryParams[key];\n        if (param.collectionFormat === 'csv') {\n          // SuperAgent normally percent-encodes all reserved characters in a query parameter. However,\n          // commas are used as delimiters for the 'csv' collectionFormat so they must not be encoded. We\n          // must therefore construct and encode 'csv' collection query parameters manually.\n          if (param.value != null) {\n            var value = param.value.map(this.paramToString).map(encodeURIComponent).join(',');\n            request.query(encodeURIComponent(key) + \"=\" + value);\n          }\n        } else {\n          // All other collection query parameters should be treated as ordinary query parameters.\n          queryParams[key] = this.buildCollectionParam(param.value, param.collectionFormat);\n        }\n      }\n    }\n\n    // set query parameters\n    if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n        queryParams['_'] = new Date().getTime();\n    }\n    request.query(this.normalizeParams(queryParams));\n\n    // set header parameters\n    request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n\n    // set requestAgent if it is set by user\n    if (this.requestAgent) {\n      request.agent(this.requestAgent);\n    }\n\n    // set request timeout\n    request.timeout(this.timeout);\n\n    var contentType = this.jsonPreferredMime(contentTypes);\n    if (contentType) {\n      // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n      if(contentType != 'multipart/form-data') {\n        request.type(contentType);\n      }\n    } else if (!request.header['Content-Type']) {\n      request.type('application/json');\n    }\n\n    if (contentType === 'application/x-www-form-urlencoded') {\n      request.send(querystring.stringify(this.normalizeParams(formParams)));\n    } else if (contentType == 'multipart/form-data') {\n      var _formParams = this.normalizeParams(formParams);\n      for (var key in _formParams) {\n        if (_formParams.hasOwnProperty(key)) {\n          if (this.isFileParam(_formParams[key])) {\n            // file field\n            request.attach(key, _formParams[key]);\n          } else {\n            request.field(key, _formParams[key]);\n          }\n        }\n      }\n    } else if (bodyParam) {\n      request.send(bodyParam);\n    }\n\n    var accept = this.jsonPreferredMime(accepts);\n    if (accept) {\n      request.accept(accept);\n    }\n\n    if (returnType === 'Blob') {\n      request.responseType('blob');\n    } else if (returnType === 'String') {\n      request.responseType('string');\n    }\n\n    // Attach previously saved cookies, if enabled\n    if (this.enableCookies){\n      if (typeof window === 'undefined') {\n        this.agent.attachCookies(request);\n      }\n      else {\n        request.withCredentials();\n      }\n    }\n\n    return new Promise(function(resolve, reject) {\n      request.end(function(error, response) {\n        if (error) {\n          reject(error);\n        } else {\n          try {\n            var data = _this.deserialize(response, returnType);\n            if (_this.enableCookies && typeof window === 'undefined'){\n              _this.agent.saveCookies(response);\n            }\n            resolve({data: data, response: response});\n          } catch (err) {\n            reject(err);\n          }\n        }\n      });\n    });\n  };\n\n  /**\n   * Parses an ISO-8601 string representation of a date value.\n   * @param {String} str The date value as a string.\n   * @returns {Date} The parsed date object.\n   */\n  exports.parseDate = function(str) {\n    return new Date(str.replace(/T/i, ' '));\n  };\n\n  /**\n   * Converts a value to the specified type.\n   * @param {(String|Object)} data The data to convert, as a string or object.\n   * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n   * all properties on <code>data<code> will be converted to this type.\n   * @returns An instance of the specified type or null or undefined if data is null or undefined.\n   */\n  exports.convertToType = function(data, type) {\n    if (data === null || data === undefined)\n      return data\n\n    switch (type) {\n      case 'Boolean':\n        return Boolean(data);\n      case 'Integer':\n        return parseInt(data, 10);\n      case 'Number':\n        return parseFloat(data);\n      case 'String':\n        return String(data);\n      case 'Date':\n        return this.parseDate(String(data));\n      case 'Blob':\n      \treturn data;\n      default:\n        if (type === Object) {\n          // generic object, return directly\n          return data;\n        } else if (typeof type === 'function') {\n          // for model type like: User\n          return type.constructFromObject(data);\n        } else if (Array.isArray(type)) {\n          // for array type like: ['String']\n          var itemType = type[0];\n          return data.map(function(item) {\n            return exports.convertToType(item, itemType);\n          });\n        } else if (typeof type === 'object') {\n          // for plain object type like: {'String': 'Integer'}\n          var keyType, valueType;\n          for (var k in type) {\n            if (type.hasOwnProperty(k)) {\n              keyType = k;\n              valueType = type[k];\n              break;\n            }\n          }\n          var result = {};\n          for (var k in data) {\n            if (data.hasOwnProperty(k)) {\n              var key = exports.convertToType(k, keyType);\n              var value = exports.convertToType(data[k], valueType);\n              result[key] = value;\n            }\n          }\n          return result;\n        } else {\n          // for unknown type, return the data directly\n          return data;\n        }\n    }\n  };\n\n  /**\n   * Constructs a new map or array model from REST data.\n   * @param data {Object|Array} The REST data.\n   * @param obj {Object|Array} The target object or array.\n   */\n  exports.constructFromObject = function(data, obj, itemType) {\n    if (Array.isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        if (data.hasOwnProperty(i))\n          obj[i] = exports.convertToType(data[i], itemType);\n      }\n    } else {\n      for (var k in data) {\n        if (data.hasOwnProperty(k))\n          obj[k] = exports.convertToType(data[k], itemType);\n      }\n    }\n  };\n\n  /**\n   * Sets the user-agent\n   * @param header (String)\n   */\n  exports.setUserAgent = function(header) {\n    if (typeof header == 'string' && header.substr(0,11).trim().toLowerCase() === 'sendinblue_') {\n      exports.instance.defaultHeaders['user-agent'] = header;\n    }\n    return;\n  };\n\n  /**\n   * The default API client implementation.\n   * @type {module:ApiClient}\n   */\n  exports.instance = new exports();\n\n  return exports;\n}));\n"]},"metadata":{},"sourceType":"script"}
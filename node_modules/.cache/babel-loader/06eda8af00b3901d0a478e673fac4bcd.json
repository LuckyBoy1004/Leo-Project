{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\My Project\\\\Copie de Nivid\\\\Copie de Nivid (1)\\\\src\\\\context\\\\userContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect, useContext } from \"react\";\nimport firebase from \"firebase/app\";\nimport { useFirebase } from \"../assets/base-context\";\nimport publicIp from \"public-ip\";\nimport Stripe from \"stripe\";\nimport functions from \"firebase/firebase-functions\";\nimport { inputAdornmentClasses } from \"@mui/material\";\n\nvar SibApiV3Sdk = require(\"sib-api-v3-sdk\");\n\nvar defaultClient = SibApiV3Sdk.ApiClient.instance;\nlet myAPIKey = process.env.REACT_APP_SENDINBLUE_APIKEY;\nvar apiKey = defaultClient.authentications[\"api-key\"];\napiKey.apiKey = myAPIKey;\nvar partnerKey = defaultClient.authentications[\"partner-key\"];\npartnerKey.apiKey = process.env.REACT_APP_SENDINBLUE_APIKEY;\nvar apiInstance = new SibApiV3Sdk.ContactsApi();\nvar createContact = new SibApiV3Sdk.CreateContact();\nvar apiInstanceSend = new SibApiV3Sdk.TransactionalEmailsApi();\nvar sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail(); // Ce fichier comporte toutes les fonctions d'appels et de traitement bdd, et du context global.\n// Il englobe l'app dans App.js\n\nexport const UserContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n\n  return useContext(UserContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const UserProvider = ({\n  children\n}) => {\n  _s2();\n\n  const firebaseContext = useFirebase();\n  const auth = firebaseContext.auth();\n  const provider = firebaseContext.provider();\n  const storage = firebaseContext.storage();\n  const firestore = firebaseContext.firestore();\n  let datePlusYear = new Date();\n  datePlusYear.setFullYear(datePlusYear.getFullYear());\n  const initialEvent = {\n    name: \"\",\n    date: datePlusYear,\n    startAt: 0,\n    endAt: 86360,\n    people: 50,\n    placeSize: 250,\n    place: \"\",\n    latLng: [],\n    budget: 50,\n    budgetLeft: 0,\n    status: null,\n    id: null,\n    choosedServices: []\n  };\n  const initialSeller = {\n    companyName: \"\",\n    adress: \"\",\n    siret: \"\",\n    website: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    phone: \"\",\n    description: \"\",\n    category: \"\",\n    subcategory: \"\",\n    image_path: \"\"\n  };\n  const [user, setUser] = useState();\n  const [seller, setSeller] = useState(initialSeller);\n  const [event, setEvent] = useState(initialEvent);\n  const [loading, setLoading] = useState(true);\n  const [currentStepProcess, setCurrentStepProcess] = useState(0);\n  const [loadingButtonAddToCard, setLoadingButtonAddToCard] = useState(true);\n  const refUsers = firestore.collection(\"users\");\n  const refEvents = firestore.collection(\"events\");\n  const refSellers = firestore.collection(\"sellers\");\n  const refSales = firestore.collection(\"sales\");\n  const [homeSellersDisplay, setHomeSellersDisplay] = useState([]);\n  const [isCardWidgetOpen, setIsCardWidgetOpen] = useState(false);\n  const createStripeCheckout = user ? firebase.functions().httpsCallable(\"createStripeCheckout\") : null;\n  const createStripeSubscribe = firebase.functions().httpsCallable(\"createStripeSubscribe\");\n  const stripe = user || seller ? window.Stripe(\"pk_test_51InLbZBwyEuW61Pj3yTYQlp31JobhK9vIKh32GColDUhXcdtzaKhWF5mVRDa9SGw7HujSuEDPCwvh40GEuo6uJxA00iqmaUXQp\") : null;\n  const checkStripeReturn = user || seller ? firebase.functions().httpsCallable(\"checkStripeReturn\") : null;\n  useEffect(() => {\n    auth.onAuthStateChanged(data => {\n      return handleAuthChanged(data);\n    });\n  }, []);\n\n  async function handleAuthChanged(data) {\n    if (data) {\n      const isSeller = await isThisUserSeller(data.uid);\n      const isUser = await isThisUserUser(data.uid);\n\n      if (isSeller && !isUser) {\n        const sellerData = await getSellerDataFromDB(data.uid);\n        const sellerServices = await getServicesOfCurrentSellerFromDB();\n        setSeller({ ...initialSeller,\n          ...data,\n          ...sellerData,\n          services: sellerServices\n        });\n        setUser();\n        setLoading(false);\n      } else if (isUser && !isSeller) {\n        if (data.emailVerified === false) {\n          setUser();\n          setSeller();\n          setLoading(false);\n          return;\n        }\n\n        setUser(data);\n        setSeller();\n        const eventData = await getEvent(data.uid);\n        eventData && eventData !== null ? await getChoosedServices(eventData) : setEvent(initialEvent);\n        setLoading(false);\n      } else if (isSeller && isUser) {\n        const sellerData = await getSellerDataFromDB(data.uid);\n        setSeller({ ...initialSeller,\n          ...data,\n          ...sellerData\n        });\n        setUser(data);\n        const eventData = await getEvent(data.uid);\n        eventData && eventData !== null ? await getChoosedServices(eventData) : setEvent(initialEvent);\n        setLoading(false);\n      }\n    } else {\n      setSeller();\n      setUser();\n      setLoading(false);\n    }\n  }\n\n  async function getSellerDataFromDB(id) {\n    const query = await refSellers.doc(id).get();\n    const result = query.data();\n    return result;\n  }\n\n  async function isThisUserSeller(id) {\n    const doc = await refSellers.doc(id).get();\n    if (doc.exists) return true;\n    return false;\n  }\n\n  async function isThisUserUser(id) {\n    const doc = await refUsers.doc(id).get();\n    if (doc.exists) return true;\n    return false;\n  }\n\n  async function getEvent(uid) {\n    const getEvent = await refEvents.where(\"user\", \"==\", uid).get();\n\n    if (getEvent.docs.length > 0) {\n      let item = {};\n      getEvent.docs.forEach(doc => {\n        const data = doc.data();\n\n        if (data.status && data.status !== \"passed\") {\n          item = { ...data\n          };\n          item.date = data.date.toMillis();\n          item.id = doc.id;\n        }\n      });\n      return item && item.status && item.status !== \"passed\" ? item : null;\n    } else {\n      return null;\n    }\n  }\n\n  async function addEvent(item) {\n    const myEvent = { ...item\n    };\n    delete myEvent.id;\n    let myNewEvent;\n\n    if (item.status !== \"creating\") {\n      myNewEvent = await createEvent(myEvent);\n    }\n\n    if (item.status === \"creating\") {\n      // event existant\n      myNewEvent = await updateEvent(item, myEvent);\n    }\n\n    await getChoosedServices(myNewEvent);\n  }\n\n  async function createEvent(myEvent) {\n    const req = await refUsers.doc(myEvent.user).get();\n    const res = req.data();\n    var identifier = res.email;\n    var updateContact = {\n      attributes: {\n        NOTIF_DATE: new Date(myEvent.date),\n        EVENTID: event.id\n      }\n    };\n    apiInstance.updateContact(identifier, updateContact).then(() => {}, error => {\n      console.error(error);\n    });\n    myEvent.status = \"creating\";\n    const docRef = await refEvents.add({ ...myEvent,\n      date: new Date(myEvent.date)\n    });\n    myEvent.id = docRef.id;\n    return myEvent;\n  }\n\n  async function updateEvent(item, myEvent) {\n    if (item.place !== event.place) {\n      const getServices = await refEvents.doc(item.id).collection(\"services\").get();\n      getServices.docs.forEach(async doc => {\n        await refEvents.doc(item.id).collection(\"services\").doc(doc.id).delete();\n      });\n    }\n\n    await refEvents.doc(item.id).update({ ...myEvent,\n      date: new Date(myEvent.date)\n    });\n    myEvent.id = item.id;\n    return myEvent;\n  }\n\n  async function getBudgetLeft(budget, choosedServices) {\n    let totalPrice = 0;\n    choosedServices.forEach(item => {\n      if (item.variations && item.variations.length > 0) {\n        totalPrice += item.variations.filter(vari => vari.name === item.variation)[0].price * item.quantity;\n      } else totalPrice += item.price * item.quantity;\n    });\n    const result = budget - totalPrice;\n    return result;\n  }\n\n  async function getChoosedServices(item) {\n    let choosedServices = [];\n    const services = await refEvents.doc(item.id).collection(\"services\").get();\n    services.forEach(doc => {\n      choosedServices.push({ ...doc.data(),\n        uid: doc.id\n      });\n    });\n    const queryPrice = await getBudgetLeft(item.budget, choosedServices);\n    const neWObject = { ...item,\n      budgetLeft: queryPrice,\n      choosedServices: choosedServices\n    };\n    return setEvent(neWObject);\n  }\n\n  async function login(email, password) {\n    return await auth.signInWithEmailAndPassword(email, password).then(data => {\n      if (data.user.emailVerified === false) {\n        setSeller();\n        setUser();\n        return false;\n      }\n\n      setUser(data.user);\n      return true;\n    });\n  }\n\n  async function verifyLogin(email, password) {\n    const data = await auth.signInWithEmailAndPassword(email, password);\n    return data;\n  }\n\n  async function subscribe(email, password, firstName, name, tel, gender, birthDate) {\n    return auth.createUserWithEmailAndPassword(email, password).then(async userData => {\n      await userData.user.updateProfile({\n        displayName: firstName\n      });\n      await refUsers.doc(userData.user.uid).set({\n        firstName: firstName,\n        name: name,\n        tel: tel,\n        gender: gender,\n        birthDate: birthDate,\n        email: email\n      }).catch(error => {\n        return console.log(error);\n      });\n      userData.user.sendEmailVerification();\n      setUser();\n      setSeller();\n      sendInBlue_addContactSubscribe(email, firstName);\n      return true;\n    }).catch(error => {\n      return error.code;\n    });\n  }\n\n  async function sellerSubscribe(companyName, adress, siret, website, firstName, lastName, email, phone, password, latLng, referral) {\n    const referralToken = Date.now().toString().substr(0, 5) + Math.random().toString().substr(2, 7);\n    return auth.createUserWithEmailAndPassword(email, password).then(async userData => {\n      await userData.user.updateProfile({\n        displayName: firstName\n      });\n      await refSellers.doc(userData.user.uid).set({\n        companyName: companyName,\n        adress: adress,\n        latLng: latLng,\n        siret: siret,\n        website: website,\n        firstName: firstName,\n        lastName: lastName,\n        phone: phone,\n        email: email,\n        image_path: \"\",\n        status: \"subscribing\",\n        referralToken: referralToken,\n        referral: referral\n      }).catch(error => {\n        return console.log(error);\n      });\n\n      if (referral.length === 12) {\n        await updateSellerAfterReferralNewSeller(referral, userData.user.uid);\n        sendInBlue_sendToParrainAboutNewReferral(referral);\n      }\n\n      sendInBlue_addContactSubscribe(email, firstName, lastName, userData.user.uid);\n      setUser();\n      setSeller({\n        companyName: companyName,\n        adress: adress,\n        latLng: latLng,\n        siret: siret,\n        website: website,\n        firstName: firstName,\n        lastName: lastName,\n        phone: phone,\n        email: email,\n        image_path: \"\",\n        status: \"subscribing\",\n        referralToken: referralToken,\n        referral: referral,\n        uid: userData.user.uid\n      });\n      userData.user.sendEmailVerification();\n      return true;\n    }).catch(error => {\n      return error.code;\n    });\n  }\n\n  async function updateSellerAfterReferralNewSeller(referral, newSellerUid) {\n    const docs = await refSellers.where(\"referralToken\", \"==\", referral).get();\n    let docSeller = {};\n    docs.forEach(doc => {\n      docSeller = { ...doc.data(),\n        uid: doc.id\n      };\n    });\n\n    if (docSeller.uid !== undefined && docSeller.uid !== null && docSeller.uid.length > 10) {\n      refSellers.doc(docSeller.uid).collection(\"referral\").add({\n        newSeller: newSellerUid,\n        date: Date.now()\n      }).catch(error => {\n        return console.log(error);\n      });\n    }\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  async function signInWithGoogle() {\n    const result = await auth.signInWithPopup(provider);\n    /** @type {firebase.auth.OAuthCredential} */\n\n    var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n    var token = credential.accessToken; // The signed-in user info.\n\n    var user = result.user;\n    var doc = await refUsers.doc(user.uid).get();\n\n    if (doc.exists) {\n      setUser(auth.currentUser);\n    } else {\n      await refUsers.doc(user.uid).set({\n        firstName: user.displayName,\n        email: user.email\n      });\n      setUser(auth.currentUser);\n    }\n  } // Ajouter un service au panier ( BBD et state )\n\n\n  async function addToCard(sellerID, item, quantity) {\n    // Checkons si ce service est deja present dans la liste de cette event\n    const newEvent = { ...event\n    };\n    const refCurrentService = refEvents.doc(event.id).collection(\"services\");\n    const doc = await refCurrentService.where(\"id\", \"==\", item.id).where(\"variation\", \"==\", item.variation).get();\n    const refService = doc.exists && doc.data(); // Si le service existe dans les service séléctionnés pour cet event, on actualise juste en renseignant la nouvelle quantity ( BBD et state )\n\n    if (doc.docs.length > 0) {\n      await refCurrentService.doc(doc.docs[0].id).update({\n        quantity: quantity\n      }); //Ici on chope le service concerné dans le state, puis on le modifie pour ajouter la quantity, et on actualise le state\n\n      const services = [...event.choosedServices];\n      const service = services.find(service => service.variation === item.variation && service.id === item.id);\n      service.quantity = quantity;\n      newEvent.choosedServices = services;\n      getChoosedServices(newEvent);\n      setLoadingButtonAddToCard(false);\n    } // Mais si le service n'existe pas, on l'ajoute completement ( BBD et state )\n    else {\n        const itemCopy = { ...item\n        };\n        itemCopy.quantity = quantity;\n        const newService = [];\n        await refCurrentService.add(itemCopy);\n        newService.push(item);\n        newEvent.choosedServices.push(newService[0]);\n        getChoosedServices(newEvent);\n        setLoadingButtonAddToCard(false);\n      }\n\n    setIsCardWidgetOpen(true);\n  }\n\n  function getServiceQuantityInCard(id) {\n    const services = [...event.choosedServices];\n    const servicefiltered = services.filter(service => service.id === id);\n    let count = 0;\n    if (servicefiltered.length > 1) servicefiltered.forEach(service => count += service.quantity);else if (servicefiltered.length > 0) count += servicefiltered[0].quantity;\n    return count;\n  }\n\n  async function updateQuantityService(serviceID, quantity) {\n    if (quantity === undefined) return;\n    quantity = parseInt(quantity);\n\n    if (quantity !== 0) {\n      await refEvents.doc(event.id).collection(\"services\").doc(serviceID).update({\n        quantity: quantity\n      });\n    } else {\n      await refEvents.doc(event.id).collection(\"services\").doc(serviceID).delete();\n    }\n\n    const eventData = await getEvent(auth.currentUser.uid);\n    await getChoosedServices(eventData);\n    setLoading(false);\n    return;\n  }\n\n  function formatLabelTimePicker(secs) {\n    if (secs === 86400) secs = 86360;\n    var minutes = Math.floor(secs / 60);\n    var hours = Math.floor(minutes / 60);\n    minutes = minutes % 60;\n    return `${hours}:${(\"0\" + minutes).slice(-2)}`;\n  }\n\n  async function getAuthUserFromHisEmail(email) {\n    return auth.sendPasswordResetEmail(email).then(() => {\n      return true;\n    }).catch(function (error) {\n      if (error.code === \"auth/invalid-email\") {\n        return \"invalid\";\n      } else if (error.code === \"auth/user-not-found\") {\n        return \"notexist\";\n      }\n    });\n  }\n\n  async function updateUserEmail(email) {\n    var user = auth.currentUser;\n    await user.updateEmail(email);\n    await refUsers.doc(user.uid).update({\n      email: email\n    });\n    await user.sendEmailVerification();\n    return true;\n  }\n\n  async function getCurrentUserProfil() {\n    var uid = auth.currentUser.uid;\n    const doc = await refUsers.doc(uid).get();\n    return doc.exists ? doc.data() : null;\n  }\n\n  async function updateCurrentUserProfil(data) {\n    var uid = auth.currentUser.uid;\n    refUsers.doc(uid).update(data);\n    user.updateProfile({\n      displayName: data.firstName\n    });\n  }\n\n  async function setImageSellerDB(url, token) {\n    await refSellers.doc(auth.currentUser.uid).update({\n      image_path: {\n        url: url,\n        token: token\n      }\n    });\n  }\n\n  async function addSellerDescription(data, imgURL) {\n    await refSellers.doc(auth.currentUser.uid).update({\n      description: data.description,\n      category: data.category,\n      subcategory: data.subcategory\n    });\n    setSeller({ ...seller,\n      description: data.description,\n      category: data.category,\n      subcategory: data.subcategory,\n      image_path: imgURL !== null && imgURL\n    });\n  }\n\n  async function addSellerServices(services) {\n    setSeller({ ...seller,\n      services: services\n    });\n    services.forEach(async service => {\n      if (service.id.length > 2) {\n        return await refSellers.doc(auth.currentUser.uid).collection(\"services\").doc(service.id).update(service);\n      }\n\n      return await refSellers.doc(auth.currentUser.uid).collection(\"services\").add(service);\n    });\n  }\n\n  async function addOneSellerService(service) {\n    if (service.id.length > 2) {\n      return await refSellers.doc(auth.currentUser.uid).collection(\"services\").doc(service.id).update(service);\n    }\n\n    const docRef = await refSellers.doc(auth.currentUser.uid).collection(\"services\").add(service);\n    return docRef.id;\n  }\n\n  async function getServicesOfCurrentSellerFromDB() {\n    const services = await refSellers.doc(auth.currentUser.uid).collection(\"services\").get();\n    var result = [];\n    services.docs.forEach(doc => {\n      const newResult = { ...doc.data(),\n        id: doc.id\n      };\n      result.push(newResult);\n    });\n    return result;\n  }\n\n  async function addSellerDocuments(documents) {\n    return await refSellers.doc(auth.currentUser.uid).update({\n      documents: documents\n    });\n  }\n\n  async function getSellerDocumentsFromDB() {\n    const query = await refSellers.doc(auth.currentUser.uid).get();\n    const doc = query.data();\n    const result = doc.documents && doc.documents;\n    if (result === undefined) return null;\n    return result;\n  }\n\n  async function setSellerStatus(sellerId, status) {\n    await refSellers.doc(sellerId).update({\n      status: status\n    });\n    return setSeller({ ...seller,\n      status: status\n    });\n  }\n\n  async function updateSellerDocumentsStatus(sellerId, newDocumentsArray) {\n    await refSellers.doc(sellerId).update({\n      documents: newDocumentsArray\n    });\n    newDocumentsArray.status === \"rejected\" && (await refSellers.doc(sellerId).update({\n      status: \"subscribing\"\n    }));\n  }\n\n  async function getSellersInDbWithUids(ids) {\n    let sellers = [];\n\n    for (const id in ids) {\n      const req = await refSellers.doc(ids[id]).get();\n      let result = req.data();\n      result.uid = req.id;\n      sellers = [...sellers, result];\n\n      if (sellers.length === ids.length) {\n        return sellers;\n      }\n    }\n  } // TODO ICi on a la fonction pour delete la photo de profil qu'on ecrase en a remplaceant, faudra faire la meme avec les autres endroits du site avec uploda de picture\n\n\n  async function deleteOldSellerPicture(tokens, type) {\n    tokens.forEach(token => {\n      var imageRef = type && type === \"services\" ? storage.ref(\"services\").child(token) : storage.ref(\"sellers\").child(token);\n      imageRef.delete().catch(error => console.log(error));\n    });\n  }\n\n  async function addSalesInDB(sales) {\n    return sales.map(async sale => await refSales.add(sale));\n  }\n\n  async function getSalesOfEventIdFromDB(eventId) {\n    const req = await refSales.where(\"eventID\", \"==\", eventId).get();\n    let salesOfEvent = [];\n    req.forEach(doc => salesOfEvent.push(doc.data()));\n    return salesOfEvent;\n  }\n\n  async function getSalesOfSellerIdFromDB(sellerId) {\n    const req = await refSales.where(\"sellerID\", \"==\", sellerId).get();\n    let salesOfSeller = [];\n    req.forEach(doc => salesOfSeller.push(doc.data()));\n    return salesOfSeller;\n  }\n\n  async function updateEventStatus(status) {\n    await refEvents.doc(event.id).update({\n      status: status\n    });\n    return setEvent({ ...event,\n      status: status\n    });\n  }\n\n  async function clearEvent() {\n    setEvent(initialEvent);\n  }\n\n  async function getEventOfSaleFromDB(eventId) {\n    const req = await refEvents.doc(eventId).get();\n    let newEvent = req.data();\n    newEvent.choosedServices = [];\n    const reqServices = await refEvents.doc(eventId).collection(\"services\").get();\n    reqServices.forEach(doc => {\n      newEvent.choosedServices = [...newEvent.choosedServices, doc.data()];\n    });\n    return newEvent;\n  }\n\n  function formateToDate(timestamp) {\n    const date = new Date(timestamp);\n    const year = date.getUTCFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    return `${day}/${month < 10 ? \"0\" : \"\"}${month}/${year}`;\n  }\n\n  function formateToDateWithWords(timestamp) {\n    const date = new Date(timestamp.seconds ? timestamp.seconds * 1000 : timestamp);\n    const year = date.getUTCFullYear();\n    let month = date.getMonth() + 1;\n    const day = date.getDate();\n    month = month === 1 ? \"janv\" : month === 2 ? \"févr\" : month === 3 ? \"mars\" : month === 4 ? \"avril\" : month === 5 ? \"mai\" : month === 6 ? \"juin\" : month === 7 ? \"juil\" : month === 8 ? \"aout\" : month === 9 ? \"sept\" : month === 10 ? \"oct\" : month === 11 ? \"nov\" : month === 12 && \"déc\";\n    return `${day} ${month} ${year}`;\n  }\n\n  function formateToDateWithFullWords(timestamp) {\n    const date = new Date(timestamp);\n    const year = date.getUTCFullYear();\n    let month = date.getMonth() + 1;\n    const day = date.getDate();\n    month = month === 1 ? \"janvier\" : month === 2 ? \"février\" : month === 3 ? \"mars\" : month === 4 ? \"avril\" : month === 5 ? \"mai\" : month === 6 ? \"juin\" : month === 7 ? \"juillet\" : month === 8 ? \"aout\" : month === 9 ? \"septembre\" : month === 10 ? \"octobre\" : month === 11 ? \"novembre\" : month === 12 && \"décembre\";\n    return `${day} ${month} ${year}`;\n  }\n\n  async function updateSaleStatusInDB(saleID, sellerID, status) {\n    const req = await refSales.where(\"sellerID\", \"==\", sellerID).where(\"id\", \"==\", saleID).get();\n    let saleUID;\n    let userID;\n    let sale;\n    req.forEach(doc => {\n      sale = doc.data();\n      saleUID = doc.id;\n      userID = sale.userID;\n    });\n    const req2 = await refUsers.doc(userID).get();\n    const user = req2.data();\n    await refSales.doc(saleUID).update({\n      status\n    });\n    sendInBlue_sendNotificationToUserOfSaleStatus(user, seller.companyName, sale);\n  }\n\n  async function updateSaleNote(saleID, note) {\n    const req = await refSales.where(\"sellerID\", \"==\", auth.currentUser.uid).where(\"id\", \"==\", saleID).get();\n    let saleUID;\n    req.forEach(doc => saleUID = doc.id);\n    await refSales.doc(saleUID).update({\n      note\n    });\n    return;\n  }\n\n  function dateTodayMinusByDay(day) {\n    const date = new Date();\n    date.setHours(date.getHours() - 24 * day);\n    return date;\n  }\n\n  async function addViewsOfSeller(sellerID) {\n    const visitorIP = await publicIp.v4();\n    const reqViews = await refSellers.doc(sellerID).collection(\"views\").get();\n    let recentViews = [];\n    reqViews.forEach(async doc => {\n      const view = doc.data();\n\n      if (view.ip === visitorIP && view.date.seconds * 1000 > dateTodayMinusByDay(1)) {\n        recentViews = [...recentViews, view];\n      }\n    });\n\n    if (recentViews.length === 0) {\n      await refSellers.doc(sellerID).collection(\"views\").add({\n        date: new Date(Date.now()),\n        ip: visitorIP\n      });\n    }\n  }\n\n  async function getViewsOfSeller(sellerID) {\n    const reqViews = await refSellers.doc(sellerID).collection(\"views\").get();\n    let res = [];\n    reqViews.forEach(doc => res.push(doc.data()));\n    return res;\n  }\n\n  async function isSellerAllowedToModifyAndDeleteService(serviceID) {\n    const req = await refSales.where(\"sellerID\", \"==\", auth.currentUser.uid).get();\n    let sellerSales = [];\n    req.forEach(doc => sellerSales.push(doc.data()));\n    let isAllowed = true;\n    sellerSales.forEach(sale => {\n      if (sale.status !== \"passed\" && sale.status !== \"rejected\") {\n        sale.choosedServices.forEach(service => {\n          if (service.id === serviceID) isAllowed = false;\n        });\n      }\n    });\n    return isAllowed;\n  }\n\n  async function deleteServiceOfSeller(serviceID) {\n    return await refSellers.doc(auth.currentUser.uid).collection(\"services\").doc(serviceID).delete();\n  }\n\n  async function updateSellerProfil(data) {\n    await auth.currentUser.updateProfile({\n      displayName: data.firstName\n    });\n    await refSellers.doc(auth.currentUser.uid).update({\n      companyName: data.companyName,\n      website: data.website,\n      firstName: data.firstName,\n      lastName: data.lastName,\n      phone: data.phone\n    });\n    return setSeller({ ...seller,\n      companyName: data.companyName,\n      website: data.website,\n      firstName: data.firstName,\n      lastName: data.lastName,\n      phone: data.phone\n    });\n  }\n\n  async function getSellerReferralCountFromDB() {\n    const res = await refSellers.doc(auth.currentUser.uid).collection(\"referral\").get();\n    let newArray = [];\n    res.forEach(doc => newArray.push(doc.data()));\n    let finalArray = [];\n\n    for (const item of newArray) {\n      const req = await refSellers.doc(item.newSeller).get();\n      const res = req.data();\n      if (res.status === \"opened\") finalArray = [...finalArray, res];\n    }\n\n    return finalArray.length;\n  }\n\n  async function getEventFromUid(uid) {\n    const req = await refEvents.doc(uid).get();\n    return req.data();\n  }\n\n  async function getReviewsOfSellerUid(uid) {\n    const req = await refSellers.doc(uid).collection(\"reviews\").get();\n    let reviews = [];\n    req.forEach(doc => reviews.push(doc.data()));\n    return reviews;\n  }\n\n  async function addReviewOfSellerUid(sellerUID, eventID, note, comment, name) {\n    return await refSellers.doc(sellerUID).collection(\"reviews\").add({\n      eventID: eventID,\n      note: note,\n      comment: comment,\n      name: name,\n      date: new Date(),\n      eventDate: event.date\n    }).then(res => {\n      setTotalNoteOfSeller(sellerUID);\n      return true;\n    }).catch(error => console.log(error));\n  }\n\n  async function setTotalNoteOfSeller(sellerUID) {\n    const reqReviews = await refSellers.doc(sellerUID).collection(\"reviews\").get();\n    const reviewsCount = reqReviews.docs.length;\n    let totalNote = 0;\n    reqReviews.forEach(doc => {\n      const data = doc.data();\n      totalNote += data.note;\n    });\n    let sellerNote = totalNote / reviewsCount;\n    sellerNote = sellerNote.toFixed();\n    await refSellers.doc(sellerUID).update({\n      note: sellerNote\n    });\n    return true;\n  }\n\n  async function getSellerPosition(sellerUID) {\n    const reqSellers = await refSellers.get();\n    let sellersWithNote = [];\n    reqSellers.forEach(doc => {\n      const data = doc.data();\n      if (data.note === undefined) return;\n      const seller = {\n        note: data.note,\n        id: doc.id\n      };\n      sellersWithNote.push(seller);\n    });\n    sellersWithNote.sort((a, b) => {\n      if (a.note > b.note) return -1;\n      if (a.note < b.note) return 1;\n      return 0;\n    });\n    const index = sellersWithNote.findIndex(item => item.id === sellerUID);\n    return index + 1;\n  }\n\n  async function getSellersCount() {\n    const req = await refSellers.get();\n    return req.docs.length;\n  }\n\n  async function sendInBlue_addContactSubscribe(email, firstName, lastName, uid) {\n    createContact = {\n      email: email,\n      listIds: [4],\n      attributes: {\n        PRENOM: firstName,\n        NOM: lastName && lastName,\n        UID: uid ? uid : 0\n      }\n    };\n    apiInstance.createContact(createContact).then(function (data) {\n      console.log(\"API called successfully.\");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  async function sendInBlue_sendRecapToUserAfterPayment(email, sales, event) {\n    let newSales = [];\n    let paid = 0;\n    let total = 0;\n    sales.forEach(sale => {\n      refSellers.doc(sale.sellerID).get().then(doc => {\n        const seller = doc.data();\n        const newSale = { ...sale,\n          name: seller.companyName\n        };\n        newSales = [...newSales, newSale];\n        total = total + sale.total;\n        paid = paid + sale.paid;\n      });\n    });\n    sendSmtpEmail = {\n      to: [{\n        email: email\n      }],\n      params: {\n        sales: newSales,\n        event: event,\n        paid: paid,\n        total: total\n      },\n      templateId: 10,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  async function sendInBlue_sendNewSaleToSeller(email, services, event) {\n    sendSmtpEmail = {\n      to: [{\n        email: email\n      }],\n      params: {\n        services: services,\n        event: event\n      },\n      templateId: 12,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  async function sendInBlue_sendNotificationToSellerOfReview(email, name) {\n    sendSmtpEmail = {\n      to: [{\n        email: email\n      }],\n      params: {\n        name: name\n      },\n      templateId: 4,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  async function sendInBlue_sendNotificationToUserOfSaleStatus(user, prestName, sale) {\n    sendSmtpEmail = {\n      to: [{\n        email: user.email\n      }],\n      params: {\n        prestName: prestName,\n        userName: user.firstName,\n        services: sale.choosedServices\n      },\n      templateId: sale.status === \"rejected\" ? 8 : sale.status === \"validated\" && 9,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  async function getTotalAmountDueToSeller(sellerId) {\n    const req = await refSales.where(\"sellerID\", \"==\", sellerId !== undefined ? sellerId : auth.currentUser.uid).get();\n    let salesOfSeller = [];\n    req.forEach(doc => {\n      salesOfSeller = [...salesOfSeller, doc.data()];\n    });\n    const validSales = salesOfSeller.filter(sale => sale.total === sale.paid && sale.status === \"validated\"); // à mettre en passed je pense\n\n    const prices = validSales.map(sale => sale.price);\n    let finalAmount = 0;\n    prices.forEach(price => {\n      finalAmount = finalAmount + price;\n    });\n    return finalAmount;\n  }\n\n  async function sendInBlue_sendPaymentRequestToAdmin(sellerId) {\n    const amount = await getTotalAmountDueToSeller(sellerId);\n    sendSmtpEmail = {\n      to: [{\n        email: process.env.REACT_APP_ADMIN_EMAIL\n      }],\n      params: {\n        sellerId: sellerId,\n        amount: amount\n      },\n      templateId: 16,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  async function sendInBlue_sendBillRequestToAdmin(transactionID, sellerID) {\n    sendSmtpEmail = {\n      to: [{\n        email: process.env.REACT_APP_ADMIN_EMAIL\n      }],\n      params: {\n        sellerId: sellerID,\n        transactionId: transactionID\n      },\n      templateId: 17,\n      headers: {\n        \"X-Mailin-custom\": \"Content-Type:application/json|custom_header_2:custom_value_2\"\n      }\n    };\n    return apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n      return true;\n    }, function (error) {\n      console.error(error);\n      return false;\n    });\n  }\n\n  async function sendInBlue_addContactToNewsletter(email) {\n    createContact = {\n      email: email,\n      listIds: [5]\n    };\n    return apiInstance.createContact(createContact).then(function (data) {\n      return true;\n    }, function (error) {\n      console.log(error);\n      return false;\n    });\n  }\n\n  async function sendInBlue_sendInvitations(emails, message, user, event) {\n    let emailsArray = [];\n    let emailsArrayWithList = [];\n    emails.forEach(email => {\n      const newEntry = {\n        email: email\n      };\n      const newEntryList = {\n        email: email,\n        listIds: [6],\n        attributes: {\n          EVENT_DATE: new Date(event.date)\n        }\n      };\n      emailsArray = [...emailsArray, newEntry];\n      emailsArrayWithList = [...emailsArrayWithList, newEntryList];\n    });\n    const eventDate = formateToDateWithFullWords(event.date);\n    const startAt = formatLabelTimePicker(event.startAt);\n    const endAt = formatLabelTimePicker(event.endAt);\n    const creneaux = startAt + \" et \" + endAt;\n    sendSmtpEmail = {\n      to: emailsArray,\n      params: {\n        prenom: user.displayName,\n        message: message,\n        nomEvent: event.name,\n        adresse: event.place,\n        invites: event.people,\n        date: eventDate,\n        creneaux: creneaux\n      },\n      templateId: 7,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    return apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      return true;\n    }, function (error) {\n      return false;\n    });\n  }\n\n  async function getWishList(userID) {\n    const req = await refUsers.doc(userID).get();\n    const res = req.data();\n    return res.wishlist || [];\n  }\n\n  async function deleteItemFromWishList(sellerID) {\n    let newWishList = await getWishList(auth.currentUser.uid);\n    newWishList = newWishList.filter(item => item !== sellerID);\n    await refUsers.doc(auth.currentUser.uid).update({\n      wishlist: newWishList\n    });\n    return newWishList;\n  }\n\n  async function addItemToWishListOfUser(sellerID) {\n    let newWishList = await getWishList(auth.currentUser.uid);\n    newWishList = [...newWishList, sellerID];\n    refUsers.doc(auth.currentUser.uid).update({\n      wishlist: newWishList\n    });\n    return;\n  }\n\n  async function getWishListCountOfSeller(sellerID) {\n    const users = await refUsers.where(\"wishlist\", \"array-contains\", sellerID).get();\n    return users.docs.length;\n  }\n\n  async function isSellerInWishListOfUser(id) {\n    const currentWishList = await getWishList(auth.currentUser.uid);\n    const isSellerInList = currentWishList.filter(item => item === id);\n    return isSellerInList.length > 0 ? true : false;\n  }\n\n  async function getEmailOfSellerWithUid(sellerID) {\n    const query = await refSellers.doc(sellerID).get();\n    const result = query.data();\n    return result.email;\n  }\n\n  async function sendInBlue_sendToParrainAboutNewReferral(referralCode) {\n    // Aller choper en bdd le seller correspondant au referral code\n    const query = await refSellers.where(\"referralToken\", \"==\", referralCode).get();\n    const result = query[0].data();\n    const email = result.email; // Puis envoyer à ce seller le mail de new referral\n\n    sendSmtpEmail = {\n      to: [{\n        email: email\n      }],\n      params: {\n        name: \"a\"\n      },\n      templateId: 14,\n      headers: {\n        \"X-Mailin-custom\": \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\"\n      }\n    };\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(function (data) {\n      console.log(\"API called successfully. Returned data: \");\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  function checkoutStart(price) {\n    const saleToken = Date.now().toString().substr(0, 9) + Math.random().toString().substr(2, 9);\n    refEvents.doc(event.id).update({\n      saleToken: saleToken\n    });\n    createStripeCheckout({\n      price: price,\n      eventId: event.id,\n      saleToken: saleToken\n    }).then(response => {\n      const sessionId = response.data.id;\n      stripe.redirectToCheckout({\n        sessionId: sessionId\n      });\n    }).catch(error => console.log(error));\n  }\n\n  function checkoutSubscription() {\n    const saleToken = Date.now().toString().substr(0, 9) + Math.random().toString().substr(2, 9);\n    refSellers.doc(seller.uid).update({\n      saleToken: saleToken\n    });\n    createStripeSubscribe({\n      sellerID: seller.uid,\n      saleToken: saleToken\n    }).then(response => {\n      const sessionId = response.data.id;\n      stripe.redirectToCheckout({\n        sessionId: sessionId\n      });\n    }).catch(error => console.log(error));\n  }\n\n  async function getSaleTokenOfEventFromDb() {\n    const req = await refEvents.doc(event.id).get();\n    const res = req.data();\n    return res.saleToken;\n  }\n\n  async function checkoutCheck(session_id) {\n    return checkStripeReturn({\n      session_id: session_id\n    }).then(result => {\n      return {\n        status: result.data.payment_status,\n        amount: result.data.amount_total,\n        id: result.data.payment_intent || result.data.subscription\n      };\n    });\n  }\n\n  async function addFoodTypeToSeller(type) {\n    if (type === \"Aucun\") return;\n    let newSeller = { ...seller\n    };\n    let newFoodTypes = [];\n\n    if (seller.foodTypes === undefined) {\n      newFoodTypes.push(type);\n    } else {\n      newFoodTypes = seller.foodTypes;\n      newFoodTypes.push(type);\n    }\n\n    newSeller[\"foodTypes\"] = newFoodTypes;\n    await refSellers.doc(auth.currentUser.uid).update({\n      foodTypes: newFoodTypes\n    });\n    setSeller(newSeller);\n  }\n\n  async function deleteFoodTypeToSeller(serviceID) {\n    const req = await refSellers.doc(auth.currentUser.uid).collection(\"services\").doc(serviceID).get();\n    const data = req.data();\n    const type = data.foodType;\n    if (type === \"Aucun\") return;\n    let newSeller = { ...seller\n    };\n    let newFoodTypes = [];\n    if (seller.foodTypes === undefined) return;else {\n      newFoodTypes = seller.foodTypes;\n      let indexes = seller.foodTypes.map((item, index) => item === type ? index : \"\").filter(String);\n      if (indexes[0] === -1) return;else if (newFoodTypes.length > 1) {\n        newFoodTypes.splice(indexes[0], 1);\n      } else newFoodTypes = [];\n      newSeller[\"foodTypes\"] = newFoodTypes;\n      await refSellers.doc(auth.currentUser.uid).update({\n        foodTypes: newFoodTypes\n      });\n      setSeller(newSeller);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      login,\n      subscribe,\n      sellerSubscribe,\n      logout,\n      user,\n      seller,\n      event,\n      setUser,\n      setSeller,\n      addEvent,\n      addToCard,\n      getServiceQuantityInCard,\n      loadingButtonAddToCard,\n      setLoadingButtonAddToCard,\n      setCurrentStepProcess,\n      currentStepProcess,\n      formatLabelTimePicker,\n      getAuthUserFromHisEmail,\n      updateUserEmail,\n      updateQuantityService,\n      signInWithGoogle,\n      getCurrentUserProfil,\n      verifyLogin,\n      updateCurrentUserProfil,\n      addSellerDescription,\n      setImageSellerDB,\n      addSellerServices,\n      addOneSellerService,\n      getServicesOfCurrentSellerFromDB,\n      addSellerDocuments,\n      getSellerDocumentsFromDB,\n      setSellerStatus,\n      updateSellerDocumentsStatus,\n      getSellersInDbWithUids,\n      deleteOldSellerPicture,\n      addSalesInDB,\n      updateEventStatus,\n      getSalesOfEventIdFromDB,\n      clearEvent,\n      getSalesOfSellerIdFromDB,\n      getEventOfSaleFromDB,\n      formateToDate,\n      formateToDateWithWords,\n      updateSaleStatusInDB,\n      updateSaleNote,\n      addViewsOfSeller,\n      getViewsOfSeller,\n      isSellerAllowedToModifyAndDeleteService,\n      deleteServiceOfSeller,\n      updateSellerProfil,\n      getSellerReferralCountFromDB,\n      getEventFromUid,\n      getReviewsOfSellerUid,\n      addReviewOfSellerUid,\n      sendInBlue_sendNotificationToSellerOfReview,\n      sendInBlue_addContactToNewsletter,\n      sendInBlue_sendInvitations,\n      sendInBlue_sendRecapToUserAfterPayment,\n      sendInBlue_sendNewSaleToSeller,\n      sendInBlue_sendToParrainAboutNewReferral,\n      sendInBlue_sendPaymentRequestToAdmin,\n      getWishList,\n      deleteItemFromWishList,\n      addItemToWishListOfUser,\n      isSellerInWishListOfUser,\n      getEmailOfSellerWithUid,\n      checkoutStart,\n      getSaleTokenOfEventFromDb,\n      checkoutCheck,\n      getTotalAmountDueToSeller,\n      homeSellersDisplay,\n      setHomeSellersDisplay,\n      getWishListCountOfSeller,\n      getSellerPosition,\n      getSellersCount,\n      sendInBlue_sendBillRequestToAdmin,\n      addFoodTypeToSeller,\n      deleteFoodTypeToSeller,\n      isCardWidgetOpen,\n      setIsCardWidgetOpen,\n      checkoutSubscription,\n      refSellers\n    },\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1541,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(UserProvider, \"ijKh/7xLhKwz+rLIrfaDJHXVGUc=\", false, function () {\n  return [useFirebase];\n});\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["F:/My Project/Copie de Nivid/Copie de Nivid (1)/src/context/userContext.js"],"names":["React","createContext","useState","useEffect","useContext","firebase","useFirebase","publicIp","Stripe","functions","inputAdornmentClasses","SibApiV3Sdk","require","defaultClient","ApiClient","instance","myAPIKey","process","env","REACT_APP_SENDINBLUE_APIKEY","apiKey","authentications","partnerKey","apiInstance","ContactsApi","createContact","CreateContact","apiInstanceSend","TransactionalEmailsApi","sendSmtpEmail","SendSmtpEmail","UserContext","useAuth","UserProvider","children","firebaseContext","auth","provider","storage","firestore","datePlusYear","Date","setFullYear","getFullYear","initialEvent","name","date","startAt","endAt","people","placeSize","place","latLng","budget","budgetLeft","status","id","choosedServices","initialSeller","companyName","adress","siret","website","firstName","lastName","phone","description","category","subcategory","image_path","user","setUser","seller","setSeller","event","setEvent","loading","setLoading","currentStepProcess","setCurrentStepProcess","loadingButtonAddToCard","setLoadingButtonAddToCard","refUsers","collection","refEvents","refSellers","refSales","homeSellersDisplay","setHomeSellersDisplay","isCardWidgetOpen","setIsCardWidgetOpen","createStripeCheckout","httpsCallable","createStripeSubscribe","stripe","window","checkStripeReturn","onAuthStateChanged","data","handleAuthChanged","isSeller","isThisUserSeller","uid","isUser","isThisUserUser","sellerData","getSellerDataFromDB","sellerServices","getServicesOfCurrentSellerFromDB","services","emailVerified","eventData","getEvent","getChoosedServices","query","doc","get","result","exists","where","docs","length","item","forEach","toMillis","addEvent","myEvent","myNewEvent","createEvent","updateEvent","req","res","identifier","email","updateContact","attributes","NOTIF_DATE","EVENTID","then","error","console","docRef","add","getServices","delete","update","getBudgetLeft","totalPrice","variations","filter","vari","variation","price","quantity","push","queryPrice","neWObject","login","password","signInWithEmailAndPassword","verifyLogin","subscribe","tel","gender","birthDate","createUserWithEmailAndPassword","userData","updateProfile","displayName","set","catch","log","sendEmailVerification","sendInBlue_addContactSubscribe","code","sellerSubscribe","referral","referralToken","now","toString","substr","Math","random","updateSellerAfterReferralNewSeller","sendInBlue_sendToParrainAboutNewReferral","newSellerUid","docSeller","undefined","newSeller","logout","signOut","signInWithGoogle","signInWithPopup","credential","token","accessToken","currentUser","addToCard","sellerID","newEvent","refCurrentService","refService","service","find","itemCopy","newService","getServiceQuantityInCard","servicefiltered","count","updateQuantityService","serviceID","parseInt","formatLabelTimePicker","secs","minutes","floor","hours","slice","getAuthUserFromHisEmail","sendPasswordResetEmail","updateUserEmail","updateEmail","getCurrentUserProfil","updateCurrentUserProfil","setImageSellerDB","url","addSellerDescription","imgURL","addSellerServices","addOneSellerService","newResult","addSellerDocuments","documents","getSellerDocumentsFromDB","setSellerStatus","sellerId","updateSellerDocumentsStatus","newDocumentsArray","getSellersInDbWithUids","ids","sellers","deleteOldSellerPicture","tokens","type","imageRef","ref","child","addSalesInDB","sales","map","sale","getSalesOfEventIdFromDB","eventId","salesOfEvent","getSalesOfSellerIdFromDB","salesOfSeller","updateEventStatus","clearEvent","getEventOfSaleFromDB","reqServices","formateToDate","timestamp","year","getUTCFullYear","month","getMonth","day","getDate","formateToDateWithWords","seconds","formateToDateWithFullWords","updateSaleStatusInDB","saleID","saleUID","userID","req2","sendInBlue_sendNotificationToUserOfSaleStatus","updateSaleNote","note","dateTodayMinusByDay","setHours","getHours","addViewsOfSeller","visitorIP","v4","reqViews","recentViews","view","ip","getViewsOfSeller","isSellerAllowedToModifyAndDeleteService","sellerSales","isAllowed","deleteServiceOfSeller","updateSellerProfil","getSellerReferralCountFromDB","newArray","finalArray","getEventFromUid","getReviewsOfSellerUid","reviews","addReviewOfSellerUid","sellerUID","eventID","comment","eventDate","setTotalNoteOfSeller","reqReviews","reviewsCount","totalNote","sellerNote","toFixed","getSellerPosition","reqSellers","sellersWithNote","sort","a","b","index","findIndex","getSellersCount","listIds","PRENOM","NOM","UID","sendInBlue_sendRecapToUserAfterPayment","newSales","paid","total","newSale","to","params","templateId","headers","sendTransacEmail","sendInBlue_sendNewSaleToSeller","sendInBlue_sendNotificationToSellerOfReview","prestName","userName","getTotalAmountDueToSeller","validSales","prices","finalAmount","sendInBlue_sendPaymentRequestToAdmin","amount","REACT_APP_ADMIN_EMAIL","sendInBlue_sendBillRequestToAdmin","transactionID","transactionId","sendInBlue_addContactToNewsletter","sendInBlue_sendInvitations","emails","message","emailsArray","emailsArrayWithList","newEntry","newEntryList","EVENT_DATE","creneaux","prenom","nomEvent","adresse","invites","getWishList","wishlist","deleteItemFromWishList","newWishList","addItemToWishListOfUser","getWishListCountOfSeller","users","isSellerInWishListOfUser","currentWishList","isSellerInList","getEmailOfSellerWithUid","referralCode","checkoutStart","saleToken","response","sessionId","redirectToCheckout","checkoutSubscription","getSaleTokenOfEventFromDb","checkoutCheck","session_id","payment_status","amount_total","payment_intent","subscription","addFoodTypeToSeller","newFoodTypes","foodTypes","deleteFoodTypeToSeller","foodType","indexes","String","splice"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect, useContext } from \"react\";\r\nimport firebase from \"firebase/app\";\r\nimport { useFirebase } from \"../assets/base-context\";\r\nimport publicIp from \"public-ip\";\r\n\r\nimport Stripe from \"stripe\";\r\nimport functions from \"firebase/firebase-functions\";\r\nimport { inputAdornmentClasses } from \"@mui/material\";\r\n\r\nvar SibApiV3Sdk = require(\"sib-api-v3-sdk\");\r\n\r\nvar defaultClient = SibApiV3Sdk.ApiClient.instance;\r\n\r\nlet myAPIKey = process.env.REACT_APP_SENDINBLUE_APIKEY;\r\nvar apiKey = defaultClient.authentications[\"api-key\"];\r\napiKey.apiKey = myAPIKey;\r\n\r\nvar partnerKey = defaultClient.authentications[\"partner-key\"];\r\npartnerKey.apiKey = process.env.REACT_APP_SENDINBLUE_APIKEY;\r\n\r\nvar apiInstance = new SibApiV3Sdk.ContactsApi();\r\nvar createContact = new SibApiV3Sdk.CreateContact();\r\n\r\nvar apiInstanceSend = new SibApiV3Sdk.TransactionalEmailsApi();\r\nvar sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\r\n\r\n// Ce fichier comporte toutes les fonctions d'appels et de traitement bdd, et du context global.\r\n// Il englobe l'app dans App.js\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(UserContext);\r\n}\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const firebaseContext = useFirebase();\r\n  const auth = firebaseContext.auth();\r\n  const provider = firebaseContext.provider();\r\n  const storage = firebaseContext.storage();\r\n  const firestore = firebaseContext.firestore();\r\n\r\n  let datePlusYear = new Date();\r\n  datePlusYear.setFullYear(datePlusYear.getFullYear());\r\n\r\n  const initialEvent = {\r\n    name: \"\",\r\n    date: datePlusYear,\r\n    startAt: 0,\r\n    endAt: 86360,\r\n    people: 50,\r\n    placeSize: 250,\r\n    place: \"\",\r\n    latLng: [],\r\n    budget: 50,\r\n    budgetLeft: 0,\r\n    status: null,\r\n    id: null,\r\n    choosedServices: [],\r\n  };\r\n\r\n  const initialSeller = {\r\n    companyName: \"\",\r\n    adress: \"\",\r\n    siret: \"\",\r\n    website: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    phone: \"\",\r\n    description: \"\",\r\n    category: \"\",\r\n    subcategory: \"\",\r\n    image_path: \"\",\r\n  };\r\n\r\n  const [user, setUser] = useState();\r\n  const [seller, setSeller] = useState(initialSeller);\r\n  const [event, setEvent] = useState(initialEvent);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [currentStepProcess, setCurrentStepProcess] = useState(0);\r\n  const [loadingButtonAddToCard, setLoadingButtonAddToCard] = useState(true);\r\n\r\n  const refUsers = firestore.collection(\"users\");\r\n  const refEvents = firestore.collection(\"events\");\r\n  const refSellers = firestore.collection(\"sellers\");\r\n  const refSales = firestore.collection(\"sales\");\r\n\r\n  const [homeSellersDisplay, setHomeSellersDisplay] = useState([]);\r\n\r\n  const [isCardWidgetOpen, setIsCardWidgetOpen] = useState(false);\r\n\r\n  const createStripeCheckout = user\r\n    ? firebase.functions().httpsCallable(\"createStripeCheckout\")\r\n    : null;\r\n  const createStripeSubscribe = firebase\r\n    .functions()\r\n    .httpsCallable(\"createStripeSubscribe\");\r\n  const stripe =\r\n    user || seller\r\n      ? window.Stripe(\r\n          \"pk_test_51InLbZBwyEuW61Pj3yTYQlp31JobhK9vIKh32GColDUhXcdtzaKhWF5mVRDa9SGw7HujSuEDPCwvh40GEuo6uJxA00iqmaUXQp\"\r\n        )\r\n      : null;\r\n\r\n  const checkStripeReturn =\r\n    user || seller\r\n      ? firebase.functions().httpsCallable(\"checkStripeReturn\")\r\n      : null;\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((data) => {\r\n      return handleAuthChanged(data);\r\n    });\r\n  }, []);\r\n\r\n  async function handleAuthChanged(data) {\r\n    if (data) {\r\n      const isSeller = await isThisUserSeller(data.uid);\r\n      const isUser = await isThisUserUser(data.uid);\r\n      if (isSeller && !isUser) {\r\n        const sellerData = await getSellerDataFromDB(data.uid);\r\n        const sellerServices = await getServicesOfCurrentSellerFromDB();\r\n        setSeller({\r\n          ...initialSeller,\r\n          ...data,\r\n          ...sellerData,\r\n          services: sellerServices,\r\n        });\r\n        setUser();\r\n        setLoading(false);\r\n      } else if (isUser && !isSeller) {\r\n        if (data.emailVerified === false) {\r\n          setUser();\r\n          setSeller();\r\n          setLoading(false);\r\n          return;\r\n        }\r\n        setUser(data);\r\n        setSeller();\r\n        const eventData = await getEvent(data.uid);\r\n        eventData && eventData !== null\r\n          ? await getChoosedServices(eventData)\r\n          : setEvent(initialEvent);\r\n        setLoading(false);\r\n      } else if (isSeller && isUser) {\r\n        const sellerData = await getSellerDataFromDB(data.uid);\r\n        setSeller({ ...initialSeller, ...data, ...sellerData });\r\n        setUser(data);\r\n        const eventData = await getEvent(data.uid);\r\n        eventData && eventData !== null\r\n          ? await getChoosedServices(eventData)\r\n          : setEvent(initialEvent);\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setSeller();\r\n      setUser();\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  async function getSellerDataFromDB(id) {\r\n    const query = await refSellers.doc(id).get();\r\n    const result = query.data();\r\n    return result;\r\n  }\r\n\r\n  async function isThisUserSeller(id) {\r\n    const doc = await refSellers.doc(id).get();\r\n    if (doc.exists) return true;\r\n    return false;\r\n  }\r\n\r\n  async function isThisUserUser(id) {\r\n    const doc = await refUsers.doc(id).get();\r\n    if (doc.exists) return true;\r\n    return false;\r\n  }\r\n\r\n  async function getEvent(uid) {\r\n    const getEvent = await refEvents.where(\"user\", \"==\", uid).get();\r\n    if (getEvent.docs.length > 0) {\r\n      let item = {};\r\n      getEvent.docs.forEach((doc) => {\r\n        const data = doc.data();\r\n        if (data.status && data.status !== \"passed\") {\r\n          item = { ...data };\r\n          item.date = data.date.toMillis();\r\n          item.id = doc.id;\r\n        }\r\n      });\r\n      return item && item.status && item.status !== \"passed\" ? item : null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async function addEvent(item) {\r\n    const myEvent = { ...item };\r\n    delete myEvent.id;\r\n    let myNewEvent;\r\n\r\n    if (item.status !== \"creating\") {\r\n      myNewEvent = await createEvent(myEvent);\r\n    }\r\n\r\n    if (item.status === \"creating\") {\r\n      // event existant\r\n      myNewEvent = await updateEvent(item, myEvent);\r\n    }\r\n    await getChoosedServices(myNewEvent);\r\n  }\r\n\r\n  async function createEvent(myEvent) {\r\n    const req = await refUsers.doc(myEvent.user).get();\r\n    const res = req.data();\r\n    var identifier = res.email;\r\n\r\n    var updateContact = {\r\n      attributes: {\r\n        NOTIF_DATE: new Date(myEvent.date),\r\n        EVENTID: event.id,\r\n      },\r\n    };\r\n\r\n    apiInstance.updateContact(identifier, updateContact).then(\r\n      () => {},\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n\r\n    myEvent.status = \"creating\";\r\n    const docRef = await refEvents.add({\r\n      ...myEvent,\r\n      date: new Date(myEvent.date),\r\n    });\r\n    myEvent.id = docRef.id;\r\n    return myEvent;\r\n  }\r\n\r\n  async function updateEvent(item, myEvent) {\r\n    if (item.place !== event.place) {\r\n      const getServices = await refEvents\r\n        .doc(item.id)\r\n        .collection(\"services\")\r\n        .get();\r\n      getServices.docs.forEach(async (doc) => {\r\n        await refEvents\r\n          .doc(item.id)\r\n          .collection(\"services\")\r\n          .doc(doc.id)\r\n          .delete();\r\n      });\r\n    }\r\n\r\n    await refEvents.doc(item.id).update({\r\n      ...myEvent,\r\n      date: new Date(myEvent.date),\r\n    });\r\n    myEvent.id = item.id;\r\n    return myEvent;\r\n  }\r\n\r\n  async function getBudgetLeft(budget, choosedServices) {\r\n    let totalPrice = 0;\r\n    choosedServices.forEach((item) => {\r\n      if (item.variations && item.variations.length > 0) {\r\n        totalPrice +=\r\n          item.variations.filter((vari) => vari.name === item.variation)[0]\r\n            .price * item.quantity;\r\n      } else totalPrice += item.price * item.quantity;\r\n    });\r\n    const result = budget - totalPrice;\r\n    return result;\r\n  }\r\n\r\n  async function getChoosedServices(item) {\r\n    let choosedServices = [];\r\n    const services = await refEvents.doc(item.id).collection(\"services\").get();\r\n    services.forEach((doc) => {\r\n      choosedServices.push({ ...doc.data(), uid: doc.id });\r\n    });\r\n    const queryPrice = await getBudgetLeft(item.budget, choosedServices);\r\n    const neWObject = {\r\n      ...item,\r\n      budgetLeft: queryPrice,\r\n      choosedServices: choosedServices,\r\n    };\r\n    return setEvent(neWObject);\r\n  }\r\n\r\n  async function login(email, password) {\r\n    return await auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((data) => {\r\n        if (data.user.emailVerified === false) {\r\n          setSeller();\r\n          setUser();\r\n          return false;\r\n        }\r\n        setUser(data.user);\r\n        return true;\r\n      });\r\n  }\r\n\r\n  async function verifyLogin(email, password) {\r\n    const data = await auth.signInWithEmailAndPassword(email, password);\r\n    return data;\r\n  }\r\n\r\n  async function subscribe(\r\n    email,\r\n    password,\r\n    firstName,\r\n    name,\r\n    tel,\r\n    gender,\r\n    birthDate\r\n  ) {\r\n    return auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then(async (userData) => {\r\n        await userData.user.updateProfile({\r\n          displayName: firstName,\r\n        });\r\n        await refUsers\r\n          .doc(userData.user.uid)\r\n          .set({\r\n            firstName: firstName,\r\n            name: name,\r\n            tel: tel,\r\n            gender: gender,\r\n            birthDate: birthDate,\r\n            email: email,\r\n          })\r\n          .catch((error) => {\r\n            return console.log(error);\r\n          });\r\n        userData.user.sendEmailVerification();\r\n        setUser();\r\n        setSeller();\r\n        sendInBlue_addContactSubscribe(email, firstName);\r\n        return true;\r\n      })\r\n      .catch((error) => {\r\n        return error.code;\r\n      });\r\n  }\r\n\r\n  async function sellerSubscribe(\r\n    companyName,\r\n    adress,\r\n    siret,\r\n    website,\r\n    firstName,\r\n    lastName,\r\n    email,\r\n    phone,\r\n    password,\r\n    latLng,\r\n    referral\r\n  ) {\r\n    const referralToken =\r\n      Date.now().toString().substr(0, 5) +\r\n      Math.random().toString().substr(2, 7);\r\n    return auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then(async (userData) => {\r\n        await userData.user.updateProfile({\r\n          displayName: firstName,\r\n        });\r\n        await refSellers\r\n          .doc(userData.user.uid)\r\n          .set({\r\n            companyName: companyName,\r\n            adress: adress,\r\n            latLng: latLng,\r\n            siret: siret,\r\n            website: website,\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            phone: phone,\r\n            email: email,\r\n            image_path: \"\",\r\n            status: \"subscribing\",\r\n            referralToken: referralToken,\r\n            referral: referral,\r\n          })\r\n          .catch((error) => {\r\n            return console.log(error);\r\n          });\r\n        if (referral.length === 12) {\r\n          await updateSellerAfterReferralNewSeller(referral, userData.user.uid);\r\n          sendInBlue_sendToParrainAboutNewReferral(referral);\r\n        }\r\n        sendInBlue_addContactSubscribe(\r\n          email,\r\n          firstName,\r\n          lastName,\r\n          userData.user.uid\r\n        );\r\n        setUser();\r\n        setSeller({\r\n          companyName: companyName,\r\n          adress: adress,\r\n          latLng: latLng,\r\n          siret: siret,\r\n          website: website,\r\n          firstName: firstName,\r\n          lastName: lastName,\r\n          phone: phone,\r\n          email: email,\r\n          image_path: \"\",\r\n          status: \"subscribing\",\r\n          referralToken: referralToken,\r\n          referral: referral,\r\n          uid: userData.user.uid\r\n        });\r\n        userData.user.sendEmailVerification();\r\n        return true;\r\n      })\r\n      .catch((error) => {\r\n        return error.code;\r\n      });\r\n  }\r\n\r\n  async function updateSellerAfterReferralNewSeller(referral, newSellerUid) {\r\n    const docs = await refSellers.where(\"referralToken\", \"==\", referral).get();\r\n    let docSeller = {};\r\n    docs.forEach((doc) => {\r\n      docSeller = { ...doc.data(), uid: doc.id };\r\n    });\r\n    if (\r\n      docSeller.uid !== undefined &&\r\n      docSeller.uid !== null &&\r\n      docSeller.uid.length > 10\r\n    ) {\r\n      refSellers\r\n        .doc(docSeller.uid)\r\n        .collection(\"referral\")\r\n        .add({\r\n          newSeller: newSellerUid,\r\n          date: Date.now(),\r\n        })\r\n        .catch((error) => {\r\n          return console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  function logout() {\r\n    return auth.signOut();\r\n  }\r\n\r\n  async function signInWithGoogle() {\r\n    const result = await auth.signInWithPopup(provider);\r\n    /** @type {firebase.auth.OAuthCredential} */\r\n    var credential = result.credential;\r\n\r\n    // This gives you a Google Access Token. You can use it to access the Google API.\r\n    var token = credential.accessToken;\r\n    // The signed-in user info.\r\n    var user = result.user;\r\n    var doc = await refUsers.doc(user.uid).get();\r\n    if (doc.exists) {\r\n      setUser(auth.currentUser);\r\n    } else {\r\n      await refUsers.doc(user.uid).set({\r\n        firstName: user.displayName,\r\n        email: user.email,\r\n      });\r\n      setUser(auth.currentUser);\r\n    }\r\n  }\r\n\r\n  // Ajouter un service au panier ( BBD et state )\r\n  async function addToCard(sellerID, item, quantity) {\r\n    // Checkons si ce service est deja present dans la liste de cette event\r\n    const newEvent = { ...event };\r\n\r\n    const refCurrentService = refEvents.doc(event.id).collection(\"services\");\r\n\r\n    const doc = await refCurrentService\r\n      .where(\"id\", \"==\", item.id)\r\n      .where(\"variation\", \"==\", item.variation)\r\n      .get();\r\n    const refService = doc.exists && doc.data();\r\n\r\n    // Si le service existe dans les service séléctionnés pour cet event, on actualise juste en renseignant la nouvelle quantity ( BBD et state )\r\n    if (doc.docs.length > 0) {\r\n      await refCurrentService\r\n        .doc(doc.docs[0].id)\r\n        .update({ quantity: quantity });\r\n      //Ici on chope le service concerné dans le state, puis on le modifie pour ajouter la quantity, et on actualise le state\r\n      const services = [...event.choosedServices];\r\n      const service = services.find(\r\n        (service) =>\r\n          service.variation === item.variation && service.id === item.id\r\n      );\r\n      service.quantity = quantity;\r\n      newEvent.choosedServices = services;\r\n      getChoosedServices(newEvent);\r\n      setLoadingButtonAddToCard(false);\r\n    }\r\n    // Mais si le service n'existe pas, on l'ajoute completement ( BBD et state )\r\n    else {\r\n      const itemCopy = { ...item };\r\n      itemCopy.quantity = quantity;\r\n      const newService = [];\r\n      await refCurrentService.add(itemCopy);\r\n      newService.push(item);\r\n      newEvent.choosedServices.push(newService[0]);\r\n      getChoosedServices(newEvent);\r\n      setLoadingButtonAddToCard(false);\r\n    }\r\n    setIsCardWidgetOpen(true);\r\n  }\r\n\r\n  function getServiceQuantityInCard(id) {\r\n    const services = [...event.choosedServices];\r\n    const servicefiltered = services.filter((service) => service.id === id);\r\n    let count = 0;\r\n    if (servicefiltered.length > 1)\r\n      servicefiltered.forEach((service) => (count += service.quantity));\r\n    else if (servicefiltered.length > 0) count += servicefiltered[0].quantity;\r\n    return count;\r\n  }\r\n\r\n  async function updateQuantityService(serviceID, quantity) {\r\n    if (quantity === undefined) return;\r\n    quantity = parseInt(quantity);\r\n\r\n    if (quantity !== 0) {\r\n      await refEvents\r\n        .doc(event.id)\r\n        .collection(\"services\")\r\n        .doc(serviceID)\r\n        .update({ quantity: quantity });\r\n    } else {\r\n      await refEvents\r\n        .doc(event.id)\r\n        .collection(\"services\")\r\n        .doc(serviceID)\r\n        .delete();\r\n    }\r\n\r\n    const eventData = await getEvent(auth.currentUser.uid);\r\n    await getChoosedServices(eventData);\r\n    setLoading(false);\r\n    return;\r\n  }\r\n\r\n  function formatLabelTimePicker(secs) {\r\n    if (secs === 86400) secs = 86360;\r\n    var minutes = Math.floor(secs / 60);\r\n    var hours = Math.floor(minutes / 60);\r\n    minutes = minutes % 60;\r\n    return `${hours}:${(\"0\" + minutes).slice(-2)}`;\r\n  }\r\n\r\n  async function getAuthUserFromHisEmail(email) {\r\n    return auth\r\n      .sendPasswordResetEmail(email)\r\n      .then(() => {\r\n        return true;\r\n      })\r\n      .catch(function (error) {\r\n        if (error.code === \"auth/invalid-email\") {\r\n          return \"invalid\";\r\n        } else if (error.code === \"auth/user-not-found\") {\r\n          return \"notexist\";\r\n        }\r\n      });\r\n  }\r\n\r\n  async function updateUserEmail(email) {\r\n    var user = auth.currentUser;\r\n    await user.updateEmail(email);\r\n    await refUsers.doc(user.uid).update({ email: email });\r\n    await user.sendEmailVerification();\r\n    return true;\r\n  }\r\n\r\n  async function getCurrentUserProfil() {\r\n    var uid = auth.currentUser.uid;\r\n    const doc = await refUsers.doc(uid).get();\r\n    return doc.exists ? doc.data() : null;\r\n  }\r\n\r\n  async function updateCurrentUserProfil(data) {\r\n    var uid = auth.currentUser.uid;\r\n    refUsers.doc(uid).update(data);\r\n    user.updateProfile({\r\n      displayName: data.firstName,\r\n    });\r\n  }\r\n\r\n  async function setImageSellerDB(url, token) {\r\n    await refSellers.doc(auth.currentUser.uid).update({\r\n      image_path: { url: url, token: token },\r\n    });\r\n  }\r\n\r\n  async function addSellerDescription(data, imgURL) {\r\n    await refSellers.doc(auth.currentUser.uid).update({\r\n      description: data.description,\r\n      category: data.category,\r\n      subcategory: data.subcategory,\r\n    });\r\n    setSeller({\r\n      ...seller,\r\n      description: data.description,\r\n      category: data.category,\r\n      subcategory: data.subcategory,\r\n      image_path: imgURL !== null && imgURL,\r\n    });\r\n  }\r\n\r\n  async function addSellerServices(services) {\r\n    setSeller({ ...seller, services: services });\r\n    services.forEach(async (service) => {\r\n      if (service.id.length > 2) {\r\n        return await refSellers\r\n          .doc(auth.currentUser.uid)\r\n          .collection(\"services\")\r\n          .doc(service.id)\r\n          .update(service);\r\n      }\r\n      return await refSellers\r\n        .doc(auth.currentUser.uid)\r\n        .collection(\"services\")\r\n        .add(service);\r\n    });\r\n  }\r\n\r\n  async function addOneSellerService(service) {\r\n    if (service.id.length > 2) {\r\n      return await refSellers\r\n        .doc(auth.currentUser.uid)\r\n        .collection(\"services\")\r\n        .doc(service.id)\r\n        .update(service);\r\n    }\r\n    const docRef = await refSellers\r\n      .doc(auth.currentUser.uid)\r\n      .collection(\"services\")\r\n      .add(service);\r\n    return docRef.id;\r\n  }\r\n\r\n  async function getServicesOfCurrentSellerFromDB() {\r\n    const services = await refSellers\r\n      .doc(auth.currentUser.uid)\r\n      .collection(\"services\")\r\n      .get();\r\n    var result = [];\r\n    services.docs.forEach((doc) => {\r\n      const newResult = { ...doc.data(), id: doc.id };\r\n      result.push(newResult);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  async function addSellerDocuments(documents) {\r\n    return await refSellers.doc(auth.currentUser.uid).update({\r\n      documents: documents,\r\n    });\r\n  }\r\n\r\n  async function getSellerDocumentsFromDB() {\r\n    const query = await refSellers.doc(auth.currentUser.uid).get();\r\n    const doc = query.data();\r\n    const result = doc.documents && doc.documents;\r\n    if (result === undefined) return null;\r\n    return result;\r\n  }\r\n\r\n  async function setSellerStatus(sellerId, status) {\r\n    await refSellers.doc(sellerId).update({\r\n      status: status,\r\n    });\r\n    return setSeller({ ...seller, status: status });\r\n  }\r\n\r\n  async function updateSellerDocumentsStatus(sellerId, newDocumentsArray) {\r\n    await refSellers.doc(sellerId).update({\r\n      documents: newDocumentsArray,\r\n    });\r\n\r\n    newDocumentsArray.status === \"rejected\" &&\r\n      (await refSellers.doc(sellerId).update({\r\n        status: \"subscribing\",\r\n      }));\r\n  }\r\n\r\n  async function getSellersInDbWithUids(ids) {\r\n    let sellers = [];\r\n    for (const id in ids) {\r\n      const req = await refSellers.doc(ids[id]).get();\r\n      let result = req.data();\r\n      result.uid = req.id;\r\n      sellers = [...sellers, result];\r\n      if (sellers.length === ids.length) {\r\n        return sellers;\r\n      }\r\n    }\r\n  }\r\n\r\n  // TODO ICi on a la fonction pour delete la photo de profil qu'on ecrase en a remplaceant, faudra faire la meme avec les autres endroits du site avec uploda de picture\r\n  async function deleteOldSellerPicture(tokens, type) {\r\n    tokens.forEach((token) => {\r\n      var imageRef =\r\n        type && type === \"services\"\r\n          ? storage.ref(\"services\").child(token)\r\n          : storage.ref(\"sellers\").child(token);\r\n      imageRef.delete().catch((error) => console.log(error));\r\n    });\r\n  }\r\n\r\n  async function addSalesInDB(sales) {\r\n    return sales.map(async (sale) => await refSales.add(sale));\r\n  }\r\n\r\n  async function getSalesOfEventIdFromDB(eventId) {\r\n    const req = await refSales.where(\"eventID\", \"==\", eventId).get();\r\n    let salesOfEvent = [];\r\n    req.forEach((doc) => salesOfEvent.push(doc.data()));\r\n    return salesOfEvent;\r\n  }\r\n\r\n  async function getSalesOfSellerIdFromDB(sellerId) {\r\n    const req = await refSales.where(\"sellerID\", \"==\", sellerId).get();\r\n    let salesOfSeller = [];\r\n    req.forEach((doc) => salesOfSeller.push(doc.data()));\r\n    return salesOfSeller;\r\n  }\r\n\r\n  async function updateEventStatus(status) {\r\n    await refEvents.doc(event.id).update({ status: status });\r\n    return setEvent({ ...event, status: status });\r\n  }\r\n\r\n  async function clearEvent() {\r\n    setEvent(initialEvent);\r\n  }\r\n\r\n  async function getEventOfSaleFromDB(eventId) {\r\n    const req = await refEvents.doc(eventId).get();\r\n    let newEvent = req.data();\r\n    newEvent.choosedServices = [];\r\n\r\n    const reqServices = await refEvents\r\n      .doc(eventId)\r\n      .collection(\"services\")\r\n      .get();\r\n    reqServices.forEach((doc) => {\r\n      newEvent.choosedServices = [...newEvent.choosedServices, doc.data()];\r\n    });\r\n    return newEvent;\r\n  }\r\n\r\n  function formateToDate(timestamp) {\r\n    const date = new Date(timestamp);\r\n    const year = date.getUTCFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    return `${day}/${month < 10 ? \"0\" : \"\"}${month}/${year}`;\r\n  }\r\n\r\n  function formateToDateWithWords(timestamp) {\r\n    const date = new Date(\r\n      timestamp.seconds ? timestamp.seconds * 1000 : timestamp\r\n    );\r\n    const year = date.getUTCFullYear();\r\n    let month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    month =\r\n      month === 1\r\n        ? \"janv\"\r\n        : month === 2\r\n        ? \"févr\"\r\n        : month === 3\r\n        ? \"mars\"\r\n        : month === 4\r\n        ? \"avril\"\r\n        : month === 5\r\n        ? \"mai\"\r\n        : month === 6\r\n        ? \"juin\"\r\n        : month === 7\r\n        ? \"juil\"\r\n        : month === 8\r\n        ? \"aout\"\r\n        : month === 9\r\n        ? \"sept\"\r\n        : month === 10\r\n        ? \"oct\"\r\n        : month === 11\r\n        ? \"nov\"\r\n        : month === 12 && \"déc\";\r\n    return `${day} ${month} ${year}`;\r\n  }\r\n\r\n  function formateToDateWithFullWords(timestamp) {\r\n    const date = new Date(timestamp);\r\n    const year = date.getUTCFullYear();\r\n    let month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    month =\r\n      month === 1\r\n        ? \"janvier\"\r\n        : month === 2\r\n        ? \"février\"\r\n        : month === 3\r\n        ? \"mars\"\r\n        : month === 4\r\n        ? \"avril\"\r\n        : month === 5\r\n        ? \"mai\"\r\n        : month === 6\r\n        ? \"juin\"\r\n        : month === 7\r\n        ? \"juillet\"\r\n        : month === 8\r\n        ? \"aout\"\r\n        : month === 9\r\n        ? \"septembre\"\r\n        : month === 10\r\n        ? \"octobre\"\r\n        : month === 11\r\n        ? \"novembre\"\r\n        : month === 12 && \"décembre\";\r\n    return `${day} ${month} ${year}`;\r\n  }\r\n\r\n  async function updateSaleStatusInDB(saleID, sellerID, status) {\r\n    const req = await refSales\r\n      .where(\"sellerID\", \"==\", sellerID)\r\n      .where(\"id\", \"==\", saleID)\r\n      .get();\r\n    let saleUID;\r\n    let userID;\r\n    let sale;\r\n    req.forEach((doc) => {\r\n      sale = doc.data();\r\n      saleUID = doc.id;\r\n      userID = sale.userID;\r\n    });\r\n    const req2 = await refUsers.doc(userID).get();\r\n    const user = req2.data();\r\n    await refSales.doc(saleUID).update({ status });\r\n    sendInBlue_sendNotificationToUserOfSaleStatus(\r\n      user,\r\n      seller.companyName,\r\n      sale\r\n    );\r\n  }\r\n\r\n  async function updateSaleNote(saleID, note) {\r\n    const req = await refSales\r\n      .where(\"sellerID\", \"==\", auth.currentUser.uid)\r\n      .where(\"id\", \"==\", saleID)\r\n      .get();\r\n    let saleUID;\r\n    req.forEach((doc) => (saleUID = doc.id));\r\n    await refSales.doc(saleUID).update({ note });\r\n    return;\r\n  }\r\n\r\n  function dateTodayMinusByDay(day) {\r\n    const date = new Date();\r\n    date.setHours(date.getHours() - 24 * day);\r\n    return date;\r\n  }\r\n\r\n  async function addViewsOfSeller(sellerID) {\r\n    const visitorIP = await publicIp.v4();\r\n    const reqViews = await refSellers.doc(sellerID).collection(\"views\").get();\r\n\r\n    let recentViews = [];\r\n\r\n    reqViews.forEach(async (doc) => {\r\n      const view = doc.data();\r\n      if (\r\n        view.ip === visitorIP &&\r\n        view.date.seconds * 1000 > dateTodayMinusByDay(1)\r\n      ) {\r\n        recentViews = [...recentViews, view];\r\n      }\r\n    });\r\n    if (recentViews.length === 0) {\r\n      await refSellers\r\n        .doc(sellerID)\r\n        .collection(\"views\")\r\n        .add({\r\n          date: new Date(Date.now()),\r\n          ip: visitorIP,\r\n        });\r\n    }\r\n  }\r\n\r\n  async function getViewsOfSeller(sellerID) {\r\n    const reqViews = await refSellers.doc(sellerID).collection(\"views\").get();\r\n    let res = [];\r\n    reqViews.forEach((doc) => res.push(doc.data()));\r\n    return res;\r\n  }\r\n\r\n  async function isSellerAllowedToModifyAndDeleteService(serviceID) {\r\n    const req = await refSales\r\n      .where(\"sellerID\", \"==\", auth.currentUser.uid)\r\n      .get();\r\n    let sellerSales = [];\r\n    req.forEach((doc) => sellerSales.push(doc.data()));\r\n\r\n    let isAllowed = true;\r\n    sellerSales.forEach((sale) => {\r\n      if (sale.status !== \"passed\" && sale.status !== \"rejected\") {\r\n        sale.choosedServices.forEach((service) => {\r\n          if (service.id === serviceID) isAllowed = false;\r\n        });\r\n      }\r\n    });\r\n    return isAllowed;\r\n  }\r\n\r\n  async function deleteServiceOfSeller(serviceID) {\r\n    return await refSellers\r\n      .doc(auth.currentUser.uid)\r\n      .collection(\"services\")\r\n      .doc(serviceID)\r\n      .delete();\r\n  }\r\n\r\n  async function updateSellerProfil(data) {\r\n    await auth.currentUser.updateProfile({\r\n      displayName: data.firstName,\r\n    });\r\n    await refSellers.doc(auth.currentUser.uid).update({\r\n      companyName: data.companyName,\r\n      website: data.website,\r\n      firstName: data.firstName,\r\n      lastName: data.lastName,\r\n      phone: data.phone,\r\n    });\r\n    return setSeller({\r\n      ...seller,\r\n      companyName: data.companyName,\r\n      website: data.website,\r\n      firstName: data.firstName,\r\n      lastName: data.lastName,\r\n      phone: data.phone,\r\n    });\r\n  }\r\n\r\n  async function getSellerReferralCountFromDB() {\r\n    const res = await refSellers\r\n      .doc(auth.currentUser.uid)\r\n      .collection(\"referral\")\r\n      .get();\r\n    let newArray = [];\r\n    res.forEach((doc) => newArray.push(doc.data()));\r\n\r\n    let finalArray = [];\r\n    for (const item of newArray) {\r\n      const req = await refSellers.doc(item.newSeller).get();\r\n      const res = req.data();\r\n      if (res.status === \"opened\") finalArray = [...finalArray, res];\r\n    }\r\n    return finalArray.length;\r\n  }\r\n\r\n  async function getEventFromUid(uid) {\r\n    const req = await refEvents.doc(uid).get();\r\n    return req.data();\r\n  }\r\n\r\n  async function getReviewsOfSellerUid(uid) {\r\n    const req = await refSellers.doc(uid).collection(\"reviews\").get();\r\n    let reviews = [];\r\n    req.forEach((doc) => reviews.push(doc.data()));\r\n    return reviews;\r\n  }\r\n\r\n  async function addReviewOfSellerUid(sellerUID, eventID, note, comment, name) {\r\n    return await refSellers\r\n      .doc(sellerUID)\r\n      .collection(\"reviews\")\r\n      .add({\r\n        eventID: eventID,\r\n        note: note,\r\n        comment: comment,\r\n        name: name,\r\n        date: new Date(),\r\n        eventDate: event.date,\r\n      })\r\n      .then((res) => {\r\n        setTotalNoteOfSeller(sellerUID);\r\n        return true;\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }\r\n\r\n  async function setTotalNoteOfSeller(sellerUID) {\r\n    const reqReviews = await refSellers\r\n      .doc(sellerUID)\r\n      .collection(\"reviews\")\r\n      .get();\r\n    const reviewsCount = reqReviews.docs.length;\r\n    let totalNote = 0;\r\n    reqReviews.forEach((doc) => {\r\n      const data = doc.data();\r\n      totalNote += data.note;\r\n    });\r\n    let sellerNote = totalNote / reviewsCount;\r\n    sellerNote = sellerNote.toFixed();\r\n    await refSellers.doc(sellerUID).update({\r\n      note: sellerNote,\r\n    });\r\n    return true;\r\n  }\r\n\r\n  async function getSellerPosition(sellerUID) {\r\n    const reqSellers = await refSellers.get();\r\n    let sellersWithNote = [];\r\n    reqSellers.forEach((doc) => {\r\n      const data = doc.data();\r\n      if (data.note === undefined) return;\r\n      const seller = { note: data.note, id: doc.id };\r\n      sellersWithNote.push(seller);\r\n    });\r\n\r\n    sellersWithNote.sort((a, b) => {\r\n      if (a.note > b.note) return -1;\r\n      if (a.note < b.note) return 1;\r\n      return 0;\r\n    });\r\n    const index = sellersWithNote.findIndex((item) => item.id === sellerUID);\r\n    return index + 1;\r\n  }\r\n\r\n  async function getSellersCount() {\r\n    const req = await refSellers.get();\r\n    return req.docs.length;\r\n  }\r\n\r\n  async function sendInBlue_addContactSubscribe(\r\n    email,\r\n    firstName,\r\n    lastName,\r\n    uid\r\n  ) {\r\n    createContact = {\r\n      email: email,\r\n      listIds: [4],\r\n      attributes: {\r\n        PRENOM: firstName,\r\n        NOM: lastName && lastName,\r\n        UID: uid ? uid : 0,\r\n      },\r\n    };\r\n\r\n    apiInstance.createContact(createContact).then(\r\n      function (data) {\r\n        console.log(\"API called successfully.\");\r\n      },\r\n      function (error) {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  async function sendInBlue_sendRecapToUserAfterPayment(email, sales, event) {\r\n    let newSales = [];\r\n    let paid = 0;\r\n    let total = 0;\r\n    sales.forEach((sale) => {\r\n      refSellers\r\n        .doc(sale.sellerID)\r\n        .get()\r\n        .then((doc) => {\r\n          const seller = doc.data();\r\n          const newSale = { ...sale, name: seller.companyName };\r\n          newSales = [...newSales, newSale];\r\n\r\n          total = total + sale.total;\r\n          paid = paid + sale.paid;\r\n        });\r\n    });\r\n\r\n    sendSmtpEmail = {\r\n      to: [\r\n        {\r\n          email: email,\r\n        },\r\n      ],\r\n      params: {\r\n        sales: newSales,\r\n        event: event,\r\n        paid: paid,\r\n        total: total,\r\n      },\r\n      templateId: 10,\r\n      headers: {\r\n        \"X-Mailin-custom\":\r\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\r\n      },\r\n    };\r\n\r\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\r\n      function (data) {\r\n        console.log(\"API called successfully. Returned data: \");\r\n      },\r\n      function (error) {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  async function sendInBlue_sendNewSaleToSeller(email, services, event) {\r\n    sendSmtpEmail = {\r\n      to: [\r\n        {\r\n          email: email,\r\n        },\r\n      ],\r\n      params: {\r\n        services: services,\r\n        event: event,\r\n      },\r\n      templateId: 12,\r\n      headers: {\r\n        \"X-Mailin-custom\":\r\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\r\n      },\r\n    };\r\n\r\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\r\n      function (data) {\r\n        console.log(\"API called successfully. Returned data: \");\r\n      },\r\n      function (error) {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  async function sendInBlue_sendNotificationToSellerOfReview(email, name) {\r\n    sendSmtpEmail = {\r\n      to: [\r\n        {\r\n          email: email,\r\n        },\r\n      ],\r\n      params: {\r\n        name: name,\r\n      },\r\n      templateId: 4,\r\n      headers: {\r\n        \"X-Mailin-custom\":\r\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\r\n      },\r\n    };\r\n\r\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\r\n      function (data) {\r\n        console.log(\"API called successfully. Returned data: \");\r\n      },\r\n      function (error) {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  async function sendInBlue_sendNotificationToUserOfSaleStatus(\r\n    user,\r\n    prestName,\r\n    sale\r\n  ) {\r\n    sendSmtpEmail = {\r\n      to: [\r\n        {\r\n          email: user.email,\r\n        },\r\n      ],\r\n      params: {\r\n        prestName: prestName,\r\n        userName: user.firstName,\r\n        services: sale.choosedServices,\r\n      },\r\n      templateId:\r\n        sale.status === \"rejected\" ? 8 : sale.status === \"validated\" && 9,\r\n      headers: {\r\n        \"X-Mailin-custom\":\r\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\r\n      },\r\n    };\r\n\r\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\r\n      function (data) {\r\n        console.log(\"API called successfully. Returned data: \");\r\n      },\r\n      function (error) {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  async function getTotalAmountDueToSeller(sellerId) {\r\n    const req = await refSales\r\n      .where(\r\n        \"sellerID\",\r\n        \"==\",\r\n        sellerId !== undefined ? sellerId : auth.currentUser.uid\r\n      )\r\n      .get();\r\n    let salesOfSeller = [];\r\n    req.forEach((doc) => {\r\n      salesOfSeller = [...salesOfSeller, doc.data()];\r\n    });\r\n    const validSales = salesOfSeller.filter(\r\n      (sale) => sale.total === sale.paid && sale.status === \"validated\"\r\n    ); // à mettre en passed je pense\r\n    const prices = validSales.map((sale) => sale.price);\r\n    let finalAmount = 0;\r\n    prices.forEach((price) => {\r\n      finalAmount = finalAmount + price;\r\n    });\r\n    return finalAmount;\r\n  }\r\n\r\n  async function sendInBlue_sendPaymentRequestToAdmin(sellerId) {\r\n    const amount = await getTotalAmountDueToSeller(sellerId);\r\n\r\n    sendSmtpEmail = {\r\n      to: [\r\n        {\r\n          email: process.env.REACT_APP_ADMIN_EMAIL,\r\n        },\r\n      ],\r\n      params: {\r\n        sellerId: sellerId,\r\n        amount: amount,\r\n      },\r\n      templateId: 16,\r\n      headers: {\r\n        \"X-Mailin-custom\":\r\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\r\n      },\r\n    };\r\n\r\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\r\n      function (data) {\r\n        console.log(\"API called successfully. Returned data: \");\r\n      },\r\n      function (error) {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  async function sendInBlue_sendBillRequestToAdmin(transactionID, sellerID) {\r\n    sendSmtpEmail = {\r\n      to: [\r\n        {\r\n          email: process.env.REACT_APP_ADMIN_EMAIL,\r\n        },\r\n      ],\r\n      params: {\r\n        sellerId: sellerID,\r\n        transactionId: transactionID,\r\n      },\r\n      templateId: 17,\r\n      headers: {\r\n        \"X-Mailin-custom\":\r\n          \"Content-Type:application/json|custom_header_2:custom_value_2\",\r\n      },\r\n    };\r\n\r\n    return apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\r\n      function (data) {\r\n        console.log(\"API called successfully. Returned data: \");\r\n        return true;\r\n      },\r\n      function (error) {\r\n        console.error(error);\r\n        return false;\r\n      }\r\n    );\r\n  }\r\n\r\n  async function sendInBlue_addContactToNewsletter(email) {\r\n    createContact = {\r\n      email: email,\r\n      listIds: [5],\r\n    };\r\n\r\n    return apiInstance.createContact(createContact).then(\r\n      function (data) {\r\n        return true;\r\n      },\r\n      function (error) {\r\n        console.log(error);\r\n        return false;\r\n      }\r\n    );\r\n  }\r\n\r\n  async function sendInBlue_sendInvitations(emails, message, user, event) {\r\n    let emailsArray = [];\r\n    let emailsArrayWithList = [];\r\n    emails.forEach((email) => {\r\n      const newEntry = { email: email };\r\n      const newEntryList = {\r\n        email: email,\r\n        listIds: [6],\r\n        attributes: {\r\n          EVENT_DATE: new Date(event.date),\r\n        },\r\n      };\r\n      emailsArray = [...emailsArray, newEntry];\r\n      emailsArrayWithList = [...emailsArrayWithList, newEntryList];\r\n    });\r\n\r\n    const eventDate = formateToDateWithFullWords(event.date);\r\n    const startAt = formatLabelTimePicker(event.startAt);\r\n    const endAt = formatLabelTimePicker(event.endAt);\r\n    const creneaux = startAt + \" et \" + endAt;\r\n\r\n    sendSmtpEmail = {\r\n      to: emailsArray,\r\n      params: {\r\n        prenom: user.displayName,\r\n        message: message,\r\n        nomEvent: event.name,\r\n        adresse: event.place,\r\n        invites: event.people,\r\n        date: eventDate,\r\n        creneaux: creneaux,\r\n      },\r\n      templateId: 7,\r\n      headers: {\r\n        \"X-Mailin-custom\":\r\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\r\n      },\r\n    };\r\n\r\n    return apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\r\n      function (data) {\r\n        return true;\r\n      },\r\n      function (error) {\r\n        return false;\r\n      }\r\n    );\r\n  }\r\n\r\n  async function getWishList(userID) {\r\n    const req = await refUsers.doc(userID).get();\r\n    const res = req.data();\r\n    return res.wishlist || [];\r\n  }\r\n\r\n  async function deleteItemFromWishList(sellerID) {\r\n    let newWishList = await getWishList(auth.currentUser.uid);\r\n    newWishList = newWishList.filter((item) => item !== sellerID);\r\n    await refUsers.doc(auth.currentUser.uid).update({\r\n      wishlist: newWishList,\r\n    });\r\n    return newWishList;\r\n  }\r\n\r\n  async function addItemToWishListOfUser(sellerID) {\r\n    let newWishList = await getWishList(auth.currentUser.uid);\r\n    newWishList = [...newWishList, sellerID];\r\n    refUsers.doc(auth.currentUser.uid).update({\r\n      wishlist: newWishList,\r\n    });\r\n    return;\r\n  }\r\n\r\n  async function getWishListCountOfSeller(sellerID) {\r\n    const users = await refUsers\r\n      .where(\"wishlist\", \"array-contains\", sellerID)\r\n      .get();\r\n    return users.docs.length;\r\n  }\r\n\r\n  async function isSellerInWishListOfUser(id) {\r\n    const currentWishList = await getWishList(auth.currentUser.uid);\r\n    const isSellerInList = currentWishList.filter((item) => item === id);\r\n\r\n    return isSellerInList.length > 0 ? true : false;\r\n  }\r\n\r\n  async function getEmailOfSellerWithUid(sellerID) {\r\n    const query = await refSellers.doc(sellerID).get();\r\n    const result = query.data();\r\n    return result.email;\r\n  }\r\n\r\n  async function sendInBlue_sendToParrainAboutNewReferral(referralCode) {\r\n    // Aller choper en bdd le seller correspondant au referral code\r\n    const query = await refSellers\r\n      .where(\"referralToken\", \"==\", referralCode)\r\n      .get();\r\n    const result = query[0].data();\r\n    const email = result.email;\r\n\r\n    // Puis envoyer à ce seller le mail de new referral\r\n    sendSmtpEmail = {\r\n      to: [\r\n        {\r\n          email: email,\r\n        },\r\n      ],\r\n      params: {\r\n        name: \"a\",\r\n      },\r\n      templateId: 14,\r\n      headers: {\r\n        \"X-Mailin-custom\":\r\n          \"custom_header_1:custom_value_1|custom_header_2:custom_value_2\",\r\n      },\r\n    };\r\n\r\n    apiInstanceSend.sendTransacEmail(sendSmtpEmail).then(\r\n      function (data) {\r\n        console.log(\"API called successfully. Returned data: \");\r\n      },\r\n      function (error) {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  function checkoutStart(price) {\r\n    const saleToken =\r\n      Date.now().toString().substr(0, 9) +\r\n      Math.random().toString().substr(2, 9);\r\n    refEvents.doc(event.id).update({\r\n      saleToken: saleToken,\r\n    });\r\n    createStripeCheckout({\r\n      price: price,\r\n      eventId: event.id,\r\n      saleToken: saleToken,\r\n    })\r\n      .then((response) => {\r\n        const sessionId = response.data.id;\r\n        stripe.redirectToCheckout({ sessionId: sessionId });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }\r\n\r\n  function checkoutSubscription() {\r\n    const saleToken =\r\n      Date.now().toString().substr(0, 9) +\r\n      Math.random().toString().substr(2, 9);\r\n    refSellers.doc(seller.uid).update({\r\n      saleToken: saleToken,\r\n    });\r\n    createStripeSubscribe({\r\n      sellerID: seller.uid,\r\n      saleToken: saleToken,\r\n    })\r\n      .then((response) => {\r\n        const sessionId = response.data.id;\r\n        stripe.redirectToCheckout({ sessionId: sessionId });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }\r\n\r\n  async function getSaleTokenOfEventFromDb() {\r\n    const req = await refEvents.doc(event.id).get();\r\n    const res = req.data();\r\n    return res.saleToken;\r\n  }\r\n\r\n  async function checkoutCheck(session_id) {\r\n    return checkStripeReturn({ session_id: session_id }).then((result) => {\r\n      return {\r\n        status: result.data.payment_status,\r\n        amount: result.data.amount_total,\r\n        id: result.data.payment_intent || result.data.subscription,\r\n      };\r\n    });\r\n  }\r\n\r\n  async function addFoodTypeToSeller(type) {\r\n    if (type === \"Aucun\") return;\r\n    let newSeller = { ...seller };\r\n    let newFoodTypes = [];\r\n    if (seller.foodTypes === undefined) {\r\n      newFoodTypes.push(type);\r\n    } else {\r\n      newFoodTypes = seller.foodTypes;\r\n      newFoodTypes.push(type);\r\n    }\r\n    newSeller[\"foodTypes\"] = newFoodTypes;\r\n    await refSellers.doc(auth.currentUser.uid).update({\r\n      foodTypes: newFoodTypes,\r\n    });\r\n    setSeller(newSeller);\r\n  }\r\n\r\n  async function deleteFoodTypeToSeller(serviceID) {\r\n    const req = await refSellers\r\n      .doc(auth.currentUser.uid)\r\n      .collection(\"services\")\r\n      .doc(serviceID)\r\n      .get();\r\n    const data = req.data();\r\n    const type = data.foodType;\r\n\r\n    if (type === \"Aucun\") return;\r\n    let newSeller = { ...seller };\r\n    let newFoodTypes = [];\r\n    if (seller.foodTypes === undefined) return;\r\n    else {\r\n      newFoodTypes = seller.foodTypes;\r\n      let indexes = seller.foodTypes\r\n        .map((item, index) => (item === type ? index : \"\"))\r\n        .filter(String);\r\n      if (indexes[0] === -1) return;\r\n      else if (newFoodTypes.length > 1) {\r\n        newFoodTypes.splice(indexes[0], 1);\r\n      } else newFoodTypes = [];\r\n\r\n      newSeller[\"foodTypes\"] = newFoodTypes;\r\n      await refSellers.doc(auth.currentUser.uid).update({\r\n        foodTypes: newFoodTypes,\r\n      });\r\n      setSeller(newSeller);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <UserContext.Provider\r\n      value={{\r\n        login,\r\n        subscribe,\r\n        sellerSubscribe,\r\n        logout,\r\n        user,\r\n        seller,\r\n        event,\r\n        setUser,\r\n        setSeller,\r\n        addEvent,\r\n        addToCard,\r\n        getServiceQuantityInCard,\r\n        loadingButtonAddToCard,\r\n        setLoadingButtonAddToCard,\r\n        setCurrentStepProcess,\r\n        currentStepProcess,\r\n        formatLabelTimePicker,\r\n        getAuthUserFromHisEmail,\r\n        updateUserEmail,\r\n        updateQuantityService,\r\n        signInWithGoogle,\r\n        getCurrentUserProfil,\r\n        verifyLogin,\r\n        updateCurrentUserProfil,\r\n        addSellerDescription,\r\n        setImageSellerDB,\r\n        addSellerServices,\r\n        addOneSellerService,\r\n        getServicesOfCurrentSellerFromDB,\r\n        addSellerDocuments,\r\n        getSellerDocumentsFromDB,\r\n        setSellerStatus,\r\n        updateSellerDocumentsStatus,\r\n        getSellersInDbWithUids,\r\n        deleteOldSellerPicture,\r\n        addSalesInDB,\r\n        updateEventStatus,\r\n        getSalesOfEventIdFromDB,\r\n        clearEvent,\r\n        getSalesOfSellerIdFromDB,\r\n        getEventOfSaleFromDB,\r\n        formateToDate,\r\n        formateToDateWithWords,\r\n        updateSaleStatusInDB,\r\n        updateSaleNote,\r\n        addViewsOfSeller,\r\n        getViewsOfSeller,\r\n        isSellerAllowedToModifyAndDeleteService,\r\n        deleteServiceOfSeller,\r\n        updateSellerProfil,\r\n        getSellerReferralCountFromDB,\r\n        getEventFromUid,\r\n        getReviewsOfSellerUid,\r\n        addReviewOfSellerUid,\r\n        sendInBlue_sendNotificationToSellerOfReview,\r\n        sendInBlue_addContactToNewsletter,\r\n        sendInBlue_sendInvitations,\r\n        sendInBlue_sendRecapToUserAfterPayment,\r\n        sendInBlue_sendNewSaleToSeller,\r\n        sendInBlue_sendToParrainAboutNewReferral,\r\n        sendInBlue_sendPaymentRequestToAdmin,\r\n        getWishList,\r\n        deleteItemFromWishList,\r\n        addItemToWishListOfUser,\r\n        isSellerInWishListOfUser,\r\n        getEmailOfSellerWithUid,\r\n        checkoutStart,\r\n        getSaleTokenOfEventFromDb,\r\n        checkoutCheck,\r\n        getTotalAmountDueToSeller,\r\n        homeSellersDisplay,\r\n        setHomeSellersDisplay,\r\n        getWishListCountOfSeller,\r\n        getSellerPosition,\r\n        getSellersCount,\r\n        sendInBlue_sendBillRequestToAdmin,\r\n        addFoodTypeToSeller,\r\n        deleteFoodTypeToSeller,\r\n        isCardWidgetOpen,\r\n        setIsCardWidgetOpen,\r\n        checkoutSubscription,\r\n        refSellers,\r\n      }}\r\n    >\r\n      {!loading && children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/CreateModel', 'model/CreateSmsCampaign', 'model/CreatedProcessId', 'model/ErrorModel', 'model/GetSmsCampaign', 'model/GetSmsCampaigns', 'model/PostSendSmsTestFailed', 'model/RequestSmsRecipientExport', 'model/SendReport', 'model/SendTestSms', 'model/UpdateCampaignStatus', 'model/UpdateSmsCampaign'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/CreateModel'), require('../model/CreateSmsCampaign'), require('../model/CreatedProcessId'), require('../model/ErrorModel'), require('../model/GetSmsCampaign'), require('../model/GetSmsCampaigns'), require('../model/PostSendSmsTestFailed'), require('../model/RequestSmsRecipientExport'), require('../model/SendReport'), require('../model/SendTestSms'), require('../model/UpdateCampaignStatus'), require('../model/UpdateSmsCampaign'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n\n    root.SibApiV3Sdk.SMSCampaignsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateSmsCampaign, root.SibApiV3Sdk.CreatedProcessId, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetSmsCampaign, root.SibApiV3Sdk.GetSmsCampaigns, root.SibApiV3Sdk.PostSendSmsTestFailed, root.SibApiV3Sdk.RequestSmsRecipientExport, root.SibApiV3Sdk.SendReport, root.SibApiV3Sdk.SendTestSms, root.SibApiV3Sdk.UpdateCampaignStatus, root.SibApiV3Sdk.UpdateSmsCampaign);\n  }\n})(this, function (ApiClient, CreateModel, CreateSmsCampaign, CreatedProcessId, ErrorModel, GetSmsCampaign, GetSmsCampaigns, PostSendSmsTestFailed, RequestSmsRecipientExport, SendReport, SendTestSms, UpdateCampaignStatus, UpdateSmsCampaign) {\n  'use strict';\n  /**\n   * SMSCampaigns service.\n   * @module api/SMSCampaignsApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new SMSCampaignsApi. \n   * @alias module:api/SMSCampaignsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n\n  var exports = function (apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n    /**\n     * Creates an SMS campaign\n     * @param {module:model/CreateSmsCampaign} createSmsCampaign Values to create an SMS Campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n\n    this.createSmsCampaignWithHttpInfo = function (createSmsCampaign) {\n      var postBody = createSmsCampaign; // verify the required parameter 'createSmsCampaign' is set\n\n      if (createSmsCampaign === undefined || createSmsCampaign === null) {\n        throw new Error(\"Missing the required parameter 'createSmsCampaign' when calling createSmsCampaign\");\n      }\n\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n      return this.apiClient.callApi('/smsCampaigns', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Creates an SMS campaign\n     * @param {module:model/CreateSmsCampaign} createSmsCampaign Values to create an SMS Campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n\n\n    this.createSmsCampaign = function (createSmsCampaign) {\n      return this.createSmsCampaignWithHttpInfo(createSmsCampaign).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteSmsCampaignWithHttpInfo = function (campaignId) {\n      var postBody = null; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling deleteSmsCampaign\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smsCampaigns/{campaignId}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteSmsCampaign = function (campaignId) {\n      return this.deleteSmsCampaignWithHttpInfo(campaignId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmsCampaign} and HTTP response\n     */\n\n\n    this.getSmsCampaignWithHttpInfo = function (campaignId) {\n      var postBody = null; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling getSmsCampaign\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmsCampaign;\n      return this.apiClient.callApi('/smsCampaigns/{campaignId}', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmsCampaign}\n     */\n\n\n    this.getSmsCampaign = function (campaignId) {\n      return this.getSmsCampaignWithHttpInfo(campaignId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Returns the information for all your created SMS campaigns\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.status Status of campaign.\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Number} opts.limit Number limitation for the result returned (default to 500)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmsCampaigns} and HTTP response\n     */\n\n\n    this.getSmsCampaignsWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'status': opts['status'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmsCampaigns;\n      return this.apiClient.callApi('/smsCampaigns', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Returns the information for all your created SMS campaigns\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.status Status of campaign.\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Number} opts.limit Number limitation for the result returned (default to 500)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmsCampaigns}\n     */\n\n\n    this.getSmsCampaigns = function (opts) {\n      return this.getSmsCampaignsWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Export an SMS campaign&#39;s recipients\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input.\n     * @param {Number} campaignId id of the campaign\n     * @param {Object} opts Optional parameters\n     * @param {module:model/RequestSmsRecipientExport} opts.recipientExport Values to send for a recipient export request\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response\n     */\n\n\n    this.requestSmsRecipientExportWithHttpInfo = function (campaignId, opts) {\n      opts = opts || {};\n      var postBody = opts['recipientExport']; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling requestSmsRecipientExport\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreatedProcessId;\n      return this.apiClient.callApi('/smsCampaigns/{campaignId}/exportRecipients', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Export an SMS campaign&#39;s recipients\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input.\n     * @param {Number} campaignId id of the campaign\n     * @param {Object} opts Optional parameters\n     * @param {module:model/RequestSmsRecipientExport} opts.recipientExport Values to send for a recipient export request\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}\n     */\n\n\n    this.requestSmsRecipientExport = function (campaignId, opts) {\n      return this.requestSmsRecipientExportWithHttpInfo(campaignId, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Send your SMS campaign immediately\n     * @param {Number} campaignId id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.sendSmsCampaignNowWithHttpInfo = function (campaignId) {\n      var postBody = null; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendSmsCampaignNow\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smsCampaigns/{campaignId}/sendNow', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Send your SMS campaign immediately\n     * @param {Number} campaignId id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.sendSmsCampaignNow = function (campaignId) {\n      return this.sendSmsCampaignNowWithHttpInfo(campaignId).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Send an SMS campaign&#39;s report\n     * Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.\n     * @param {Number} campaignId id of the campaign\n     * @param {module:model/SendReport} sendReport Values for send a report\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.sendSmsReportWithHttpInfo = function (campaignId, sendReport) {\n      var postBody = sendReport; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendSmsReport\");\n      } // verify the required parameter 'sendReport' is set\n\n\n      if (sendReport === undefined || sendReport === null) {\n        throw new Error(\"Missing the required parameter 'sendReport' when calling sendSmsReport\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smsCampaigns/{campaignId}/sendReport', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Send an SMS campaign&#39;s report\n     * Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.\n     * @param {Number} campaignId id of the campaign\n     * @param {module:model/SendReport} sendReport Values for send a report\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.sendSmsReport = function (campaignId, sendReport) {\n      return this.sendSmsReportWithHttpInfo(campaignId, sendReport).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Send a test SMS campaign\n     * @param {Number} campaignId Id of the SMS campaign\n     * @param {module:model/SendTestSms} phoneNumber Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.sendTestSmsWithHttpInfo = function (campaignId, phoneNumber) {\n      var postBody = phoneNumber; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendTestSms\");\n      } // verify the required parameter 'phoneNumber' is set\n\n\n      if (phoneNumber === undefined || phoneNumber === null) {\n        throw new Error(\"Missing the required parameter 'phoneNumber' when calling sendTestSms\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smsCampaigns/{campaignId}/sendTest', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Send a test SMS campaign\n     * @param {Number} campaignId Id of the SMS campaign\n     * @param {module:model/SendTestSms} phoneNumber Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.sendTestSms = function (campaignId, phoneNumber) {\n      return this.sendTestSmsWithHttpInfo(campaignId, phoneNumber).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @param {module:model/UpdateSmsCampaign} updateSmsCampaign Values to update an SMS Campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateSmsCampaignWithHttpInfo = function (campaignId, updateSmsCampaign) {\n      var postBody = updateSmsCampaign; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling updateSmsCampaign\");\n      } // verify the required parameter 'updateSmsCampaign' is set\n\n\n      if (updateSmsCampaign === undefined || updateSmsCampaign === null) {\n        throw new Error(\"Missing the required parameter 'updateSmsCampaign' when calling updateSmsCampaign\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smsCampaigns/{campaignId}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @param {module:model/UpdateSmsCampaign} updateSmsCampaign Values to update an SMS Campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateSmsCampaign = function (campaignId, updateSmsCampaign) {\n      return this.updateSmsCampaignWithHttpInfo(campaignId, updateSmsCampaign).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update a campaign&#39;s status\n     * @param {Number} campaignId id of the campaign\n     * @param {module:model/UpdateCampaignStatus} status Status of the campaign.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateSmsCampaignStatusWithHttpInfo = function (campaignId, status) {\n      var postBody = status; // verify the required parameter 'campaignId' is set\n\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling updateSmsCampaignStatus\");\n      } // verify the required parameter 'status' is set\n\n\n      if (status === undefined || status === null) {\n        throw new Error(\"Missing the required parameter 'status' when calling updateSmsCampaignStatus\");\n      }\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/smsCampaigns/{campaignId}/status', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update a campaign&#39;s status\n     * @param {Number} campaignId id of the campaign\n     * @param {module:model/UpdateCampaignStatus} status Status of the campaign.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateSmsCampaignStatus = function (campaignId, status) {\n      return this.updateSmsCampaignStatusWithHttpInfo(campaignId, status).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n  };\n\n  return exports;\n});","map":{"version":3,"sources":["F:/My Project/Copie de Nivid/Copie de Nivid (1)/node_modules/sib-api-v3-sdk/src/api/SMSCampaignsApi.js"],"names":["root","factory","define","amd","module","exports","require","SibApiV3Sdk","SMSCampaignsApi","ApiClient","CreateModel","CreateSmsCampaign","CreatedProcessId","ErrorModel","GetSmsCampaign","GetSmsCampaigns","PostSendSmsTestFailed","RequestSmsRecipientExport","SendReport","SendTestSms","UpdateCampaignStatus","UpdateSmsCampaign","apiClient","instance","createSmsCampaignWithHttpInfo","createSmsCampaign","postBody","undefined","Error","pathParams","queryParams","collectionQueryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","then","response_and_data","data","deleteSmsCampaignWithHttpInfo","campaignId","deleteSmsCampaign","getSmsCampaignWithHttpInfo","getSmsCampaign","getSmsCampaignsWithHttpInfo","opts","getSmsCampaigns","requestSmsRecipientExportWithHttpInfo","requestSmsRecipientExport","sendSmsCampaignNowWithHttpInfo","sendSmsCampaignNow","sendSmsReportWithHttpInfo","sendReport","sendSmsReport","sendTestSmsWithHttpInfo","phoneNumber","sendTestSms","updateSmsCampaignWithHttpInfo","updateSmsCampaign","updateSmsCampaignStatusWithHttpInfo","status","updateSmsCampaignStatus"],"mappings":"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","sourcesContent":["/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/CreateModel', 'model/CreateSmsCampaign', 'model/CreatedProcessId', 'model/ErrorModel', 'model/GetSmsCampaign', 'model/GetSmsCampaigns', 'model/PostSendSmsTestFailed', 'model/RequestSmsRecipientExport', 'model/SendReport', 'model/SendTestSms', 'model/UpdateCampaignStatus', 'model/UpdateSmsCampaign'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/CreateModel'), require('../model/CreateSmsCampaign'), require('../model/CreatedProcessId'), require('../model/ErrorModel'), require('../model/GetSmsCampaign'), require('../model/GetSmsCampaigns'), require('../model/PostSendSmsTestFailed'), require('../model/RequestSmsRecipientExport'), require('../model/SendReport'), require('../model/SendTestSms'), require('../model/UpdateCampaignStatus'), require('../model/UpdateSmsCampaign'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.SMSCampaignsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateSmsCampaign, root.SibApiV3Sdk.CreatedProcessId, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetSmsCampaign, root.SibApiV3Sdk.GetSmsCampaigns, root.SibApiV3Sdk.PostSendSmsTestFailed, root.SibApiV3Sdk.RequestSmsRecipientExport, root.SibApiV3Sdk.SendReport, root.SibApiV3Sdk.SendTestSms, root.SibApiV3Sdk.UpdateCampaignStatus, root.SibApiV3Sdk.UpdateSmsCampaign);\n  }\n}(this, function(ApiClient, CreateModel, CreateSmsCampaign, CreatedProcessId, ErrorModel, GetSmsCampaign, GetSmsCampaigns, PostSendSmsTestFailed, RequestSmsRecipientExport, SendReport, SendTestSms, UpdateCampaignStatus, UpdateSmsCampaign) {\n  'use strict';\n\n  /**\n   * SMSCampaigns service.\n   * @module api/SMSCampaignsApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new SMSCampaignsApi. \n   * @alias module:api/SMSCampaignsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Creates an SMS campaign\n     * @param {module:model/CreateSmsCampaign} createSmsCampaign Values to create an SMS Campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createSmsCampaignWithHttpInfo = function(createSmsCampaign) {\n      var postBody = createSmsCampaign;\n\n      // verify the required parameter 'createSmsCampaign' is set\n      if (createSmsCampaign === undefined || createSmsCampaign === null) {\n        throw new Error(\"Missing the required parameter 'createSmsCampaign' when calling createSmsCampaign\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Creates an SMS campaign\n     * @param {module:model/CreateSmsCampaign} createSmsCampaign Values to create an SMS Campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createSmsCampaign = function(createSmsCampaign) {\n      return this.createSmsCampaignWithHttpInfo(createSmsCampaign)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteSmsCampaignWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling deleteSmsCampaign\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteSmsCampaign = function(campaignId) {\n      return this.deleteSmsCampaignWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmsCampaign} and HTTP response\n     */\n    this.getSmsCampaignWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling getSmsCampaign\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmsCampaign;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmsCampaign}\n     */\n    this.getSmsCampaign = function(campaignId) {\n      return this.getSmsCampaignWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Returns the information for all your created SMS campaigns\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.status Status of campaign.\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Number} opts.limit Number limitation for the result returned (default to 500)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmsCampaigns} and HTTP response\n     */\n    this.getSmsCampaignsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'status': opts['status'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmsCampaigns;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Returns the information for all your created SMS campaigns\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.status Status of campaign.\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )\n     * @param {Number} opts.limit Number limitation for the result returned (default to 500)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmsCampaigns}\n     */\n    this.getSmsCampaigns = function(opts) {\n      return this.getSmsCampaignsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Export an SMS campaign&#39;s recipients\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input.\n     * @param {Number} campaignId id of the campaign\n     * @param {Object} opts Optional parameters\n     * @param {module:model/RequestSmsRecipientExport} opts.recipientExport Values to send for a recipient export request\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response\n     */\n    this.requestSmsRecipientExportWithHttpInfo = function(campaignId, opts) {\n      opts = opts || {};\n      var postBody = opts['recipientExport'];\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling requestSmsRecipientExport\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreatedProcessId;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}/exportRecipients', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Export an SMS campaign&#39;s recipients\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input.\n     * @param {Number} campaignId id of the campaign\n     * @param {Object} opts Optional parameters\n     * @param {module:model/RequestSmsRecipientExport} opts.recipientExport Values to send for a recipient export request\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}\n     */\n    this.requestSmsRecipientExport = function(campaignId, opts) {\n      return this.requestSmsRecipientExportWithHttpInfo(campaignId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send your SMS campaign immediately\n     * @param {Number} campaignId id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendSmsCampaignNowWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendSmsCampaignNow\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}/sendNow', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send your SMS campaign immediately\n     * @param {Number} campaignId id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendSmsCampaignNow = function(campaignId) {\n      return this.sendSmsCampaignNowWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send an SMS campaign&#39;s report\n     * Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.\n     * @param {Number} campaignId id of the campaign\n     * @param {module:model/SendReport} sendReport Values for send a report\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendSmsReportWithHttpInfo = function(campaignId, sendReport) {\n      var postBody = sendReport;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendSmsReport\");\n      }\n\n      // verify the required parameter 'sendReport' is set\n      if (sendReport === undefined || sendReport === null) {\n        throw new Error(\"Missing the required parameter 'sendReport' when calling sendSmsReport\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}/sendReport', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send an SMS campaign&#39;s report\n     * Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.\n     * @param {Number} campaignId id of the campaign\n     * @param {module:model/SendReport} sendReport Values for send a report\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendSmsReport = function(campaignId, sendReport) {\n      return this.sendSmsReportWithHttpInfo(campaignId, sendReport)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send a test SMS campaign\n     * @param {Number} campaignId Id of the SMS campaign\n     * @param {module:model/SendTestSms} phoneNumber Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendTestSmsWithHttpInfo = function(campaignId, phoneNumber) {\n      var postBody = phoneNumber;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendTestSms\");\n      }\n\n      // verify the required parameter 'phoneNumber' is set\n      if (phoneNumber === undefined || phoneNumber === null) {\n        throw new Error(\"Missing the required parameter 'phoneNumber' when calling sendTestSms\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}/sendTest', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send a test SMS campaign\n     * @param {Number} campaignId Id of the SMS campaign\n     * @param {module:model/SendTestSms} phoneNumber Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendTestSms = function(campaignId, phoneNumber) {\n      return this.sendTestSmsWithHttpInfo(campaignId, phoneNumber)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @param {module:model/UpdateSmsCampaign} updateSmsCampaign Values to update an SMS Campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateSmsCampaignWithHttpInfo = function(campaignId, updateSmsCampaign) {\n      var postBody = updateSmsCampaign;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling updateSmsCampaign\");\n      }\n\n      // verify the required parameter 'updateSmsCampaign' is set\n      if (updateSmsCampaign === undefined || updateSmsCampaign === null) {\n        throw new Error(\"Missing the required parameter 'updateSmsCampaign' when calling updateSmsCampaign\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @param {module:model/UpdateSmsCampaign} updateSmsCampaign Values to update an SMS Campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateSmsCampaign = function(campaignId, updateSmsCampaign) {\n      return this.updateSmsCampaignWithHttpInfo(campaignId, updateSmsCampaign)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a campaign&#39;s status\n     * @param {Number} campaignId id of the campaign\n     * @param {module:model/UpdateCampaignStatus} status Status of the campaign.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateSmsCampaignStatusWithHttpInfo = function(campaignId, status) {\n      var postBody = status;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling updateSmsCampaignStatus\");\n      }\n\n      // verify the required parameter 'status' is set\n      if (status === undefined || status === null) {\n        throw new Error(\"Missing the required parameter 'status' when calling updateSmsCampaignStatus\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}/status', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a campaign&#39;s status\n     * @param {Number} campaignId id of the campaign\n     * @param {module:model/UpdateCampaignStatus} status Status of the campaign.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateSmsCampaignStatus = function(campaignId, status) {\n      return this.updateSmsCampaignStatusWithHttpInfo(campaignId, status)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"]},"metadata":{},"sourceType":"script"}
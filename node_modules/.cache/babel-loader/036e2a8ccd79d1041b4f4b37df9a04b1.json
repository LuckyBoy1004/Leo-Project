{"ast":null,"code":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar react = require('react');\n/**\n * Hook used to detect clicks outside a component (or an escape key press). onTriggered function is triggered on `click` or escape `keyup` event.\n *\n */\n\n\nfunction useDetectClickOutside(_a) {\n  var onTriggered = _a.onTriggered,\n      disableClick = _a.disableClick,\n      disableKeys = _a.disableKeys,\n      allowAnyKey = _a.allowAnyKey,\n      triggerKeys = _a.triggerKeys;\n  var ref = react.useRef(null);\n  var keyListener = react.useCallback(function (e) {\n    if (allowAnyKey) {\n      onTriggered();\n    } else if (triggerKeys) {\n      if (triggerKeys.includes(e.key)) {\n        onTriggered();\n      }\n    } else {\n      if (e.key === 'Escape') {\n        onTriggered();\n      }\n    }\n  }, []);\n  var clickListener = react.useCallback(function (e) {\n    if (ref && ref.current) {\n      if (!ref.current.contains(e.target)) {\n        onTriggered === null || onTriggered === void 0 ? void 0 : onTriggered();\n      }\n    }\n  }, [ref.current]);\n  react.useEffect(function () {\n    !disableClick && document.addEventListener('click', clickListener);\n    !disableKeys && document.addEventListener('keyup', keyListener);\n    return function () {\n      !disableClick && document.removeEventListener('click', clickListener);\n      !disableKeys && document.removeEventListener('keyup', keyListener);\n    };\n  }, []);\n  return ref;\n}\n\nexports.useDetectClickOutside = useDetectClickOutside;","map":{"version":3,"sources":["../src/useDetectClickOutside.tsx"],"names":["useRef","useEffect"],"mappings":";;;;;AAUA;;;;;;SAIgB,qB,CAAsB,E,EAM9B;MALN,WAAA,GAAW,EAAA,CAAA,W;MAMX,YAAYA,GAAAA,EAAAA,CAAAA,Y;MAEZ,WAAM,GAAA,EAAW,CAAA,W;MACf,WAAI,GAAA,EAAA,CAAA,W;MACF,WAAA,GAAA,EAAA,CAAA,W;SACD,GAAA,KAAA,CAAA,MAAA,CAAA,IAAA,C;MAAM,WAAI,GAAA,KAAA,CAAA,WAAA,CAAa,UAAA,CAAA,EAAA;QACtB,W,EAAI;AACF,MAAA,WAAA;WACD,IAAA,WAAA,EAAA;AACF,UAAA,WAAA,CAAA,QAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA;AAAM,QAAA,WAAA;AACL;KAFC,MAGC;YACD,G,KAAA,Q,EAAA;AACF,QAAA,WAAA;AACA;AAEH;GAXa,EAaT,EAbS,C;MAcP,aAAM,GAAI,KAAA,CAAgB,WAAhB,C,UACR,C,EAAA;WACD,IAAA,GAAA,CAAA,O,EAAA;AACF,UAAA,CAAA,GAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,CAAA,MAAA,CAAA,EAAA;AAEF,QAAA,WACF,KAAC,IADC,IACD,WAAA,KAAA,KAAA,CADC,GAGHC,KAAS,CAHN,GAIA,WAAgB,EAJhB;AAKA;AACD;AACE,GAZY,E,KAaZ,O,CAbY,C;AAef,EAAA,KAAE,CAAA,SAAF,CAAM,YAAA;AAEP,KAAA,YAAA,IAAW,QAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,aAAA,CAAX;AACF,KAAA,WAAA,IAAA,QAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,WAAA,CAAA;;;;;GAHG,E,EAAA","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\n\ninterface Props {\n  onTriggered: () => void;\n  disableClick?: boolean;\n  disableKeys?: boolean;\n  allowAnyKey?: boolean;\n  triggerKeys?: string[];\n}\n\n/**\n * Hook used to detect clicks outside a component (or an escape key press). onTriggered function is triggered on `click` or escape `keyup` event.\n *\n */\nexport function useDetectClickOutside({\n  onTriggered,\n  disableClick,\n  disableKeys,\n  allowAnyKey,\n  triggerKeys,\n}: Props) {\n  const ref = useRef(null);\n\n  const keyListener = useCallback((e: KeyboardEvent) => {\n    if (allowAnyKey) {\n      onTriggered();\n    } else if (triggerKeys) {\n      if (triggerKeys.includes(e.key)) {\n        onTriggered();\n      }\n    } else {\n      if (e.key === 'Escape') {\n        onTriggered();\n      }\n    }\n  }, []);\n\n  const clickListener = useCallback(\n    (e: MouseEvent) => {\n      if (ref && ref.current) {\n        if (!(ref.current! as any).contains(e.target)) {\n          onTriggered?.();\n        }\n      }\n    },\n    [ref.current]\n  );\n\n  useEffect(() => {\n    !disableClick && document.addEventListener('click', clickListener);\n    !disableKeys && document.addEventListener('keyup', keyListener);\n    return () => {\n      !disableClick && document.removeEventListener('click', clickListener);\n      !disableKeys && document.removeEventListener('keyup', keyListener);\n    };\n  }, []);\n\n  return ref;\n}\n"]},"metadata":{},"sourceType":"script"}
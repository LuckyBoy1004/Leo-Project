{"ast":null,"code":"/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/AddChildDomain', 'model/AddCredits', 'model/CreateChild', 'model/CreateReseller', 'model/ErrorModel', 'model/GetChildAccountCreationStatus', 'model/GetChildDomains', 'model/GetChildInfo', 'model/GetChildrenList', 'model/GetSsoToken', 'model/ManageIp', 'model/RemainingCreditModel', 'model/RemoveCredits', 'model/UpdateChild', 'model/UpdateChildAccountStatus', 'model/UpdateChildDomain'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/AddChildDomain'), require('../model/AddCredits'), require('../model/CreateChild'), require('../model/CreateReseller'), require('../model/ErrorModel'), require('../model/GetChildAccountCreationStatus'), require('../model/GetChildDomains'), require('../model/GetChildInfo'), require('../model/GetChildrenList'), require('../model/GetSsoToken'), require('../model/ManageIp'), require('../model/RemainingCreditModel'), require('../model/RemoveCredits'), require('../model/UpdateChild'), require('../model/UpdateChildAccountStatus'), require('../model/UpdateChildDomain'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n\n    root.SibApiV3Sdk.ResellerApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AddChildDomain, root.SibApiV3Sdk.AddCredits, root.SibApiV3Sdk.CreateChild, root.SibApiV3Sdk.CreateReseller, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetChildAccountCreationStatus, root.SibApiV3Sdk.GetChildDomains, root.SibApiV3Sdk.GetChildInfo, root.SibApiV3Sdk.GetChildrenList, root.SibApiV3Sdk.GetSsoToken, root.SibApiV3Sdk.ManageIp, root.SibApiV3Sdk.RemainingCreditModel, root.SibApiV3Sdk.RemoveCredits, root.SibApiV3Sdk.UpdateChild, root.SibApiV3Sdk.UpdateChildAccountStatus, root.SibApiV3Sdk.UpdateChildDomain);\n  }\n})(this, function (ApiClient, AddChildDomain, AddCredits, CreateChild, CreateReseller, ErrorModel, GetChildAccountCreationStatus, GetChildDomains, GetChildInfo, GetChildrenList, GetSsoToken, ManageIp, RemainingCreditModel, RemoveCredits, UpdateChild, UpdateChildAccountStatus, UpdateChildDomain) {\n  'use strict';\n  /**\n   * Reseller service.\n   * @module api/ResellerApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new ResellerApi. \n   * @alias module:api/ResellerApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n\n  var exports = function exports(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n    /**\n     * Add Email and/or SMS credits to a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/AddCredits} addCredits Values to post to add credit to a specific child account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RemainingCreditModel} and HTTP response\n     */\n\n    this.addCreditsWithHttpInfo = function (childIdentifier, addCredits) {\n      var postBody = addCredits; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling addCredits\");\n      } // verify the required parameter 'addCredits' is set\n\n\n      if (addCredits === undefined || addCredits === null) {\n        throw new Error(\"Missing the required parameter 'addCredits' when calling addCredits\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = RemainingCreditModel;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}/credits/add', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Add Email and/or SMS credits to a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/AddCredits} addCredits Values to post to add credit to a specific child account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RemainingCreditModel}\n     */\n\n\n    this.addCredits = function (childIdentifier, addCredits) {\n      return this.addCreditsWithHttpInfo(childIdentifier, addCredits).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Associate a dedicated IP to the child\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/ManageIp} ip IP to associate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.associateIpToChildWithHttpInfo = function (childIdentifier, ip) {\n      var postBody = ip; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling associateIpToChild\");\n      } // verify the required parameter 'ip' is set\n\n\n      if (ip === undefined || ip === null) {\n        throw new Error(\"Missing the required parameter 'ip' when calling associateIpToChild\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}/ips/associate', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Associate a dedicated IP to the child\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/ManageIp} ip IP to associate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.associateIpToChild = function (childIdentifier, ip) {\n      return this.associateIpToChildWithHttpInfo(childIdentifier, ip).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Create a domain for a child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/AddChildDomain} addChildDomain Sender domain to add for a specific child account. This will not be displayed to the parent account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.createChildDomainWithHttpInfo = function (childIdentifier, addChildDomain) {\n      var postBody = addChildDomain; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling createChildDomain\");\n      } // verify the required parameter 'addChildDomain' is set\n\n\n      if (addChildDomain === undefined || addChildDomain === null) {\n        throw new Error(\"Missing the required parameter 'addChildDomain' when calling createChildDomain\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}/domains', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Create a domain for a child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/AddChildDomain} addChildDomain Sender domain to add for a specific child account. This will not be displayed to the parent account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.createChildDomain = function (childIdentifier, addChildDomain) {\n      return this.createChildDomainWithHttpInfo(childIdentifier, addChildDomain).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Creates a reseller child\n     * @param {Object} opts Optional parameters\n     * @param {module:model/CreateChild} opts.resellerChild reseller child to add\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateReseller} and HTTP response\n     */\n\n\n    this.createResellerChildWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = opts['resellerChild'];\n      var pathParams = {};\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateReseller;\n      return this.apiClient.callApi('/reseller/children', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Creates a reseller child\n     * @param {Object} opts Optional parameters\n     * @param {module:model/CreateChild} opts.resellerChild reseller child to add\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateReseller}\n     */\n\n\n    this.createResellerChild = function (opts) {\n      return this.createResellerChildWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete the sender domain of the reseller child based on the childIdentifier and domainName passed\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {String} domainName Pass the existing domain that needs to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteChildDomainWithHttpInfo = function (childIdentifier, domainName) {\n      var postBody = null; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling deleteChildDomain\");\n      } // verify the required parameter 'domainName' is set\n\n\n      if (domainName === undefined || domainName === null) {\n        throw new Error(\"Missing the required parameter 'domainName' when calling deleteChildDomain\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier,\n        'domainName': domainName\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}/domains/{domainName}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete the sender domain of the reseller child based on the childIdentifier and domainName passed\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {String} domainName Pass the existing domain that needs to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteChildDomain = function (childIdentifier, domainName) {\n      return this.deleteChildDomainWithHttpInfo(childIdentifier, domainName).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Delete a single reseller child based on the child identifier supplied\n     * @param {String} childIdentifier Either auth key or child id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.deleteResellerChildWithHttpInfo = function (childIdentifier) {\n      var postBody = null; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling deleteResellerChild\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}', 'DELETE', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Delete a single reseller child based on the child identifier supplied\n     * @param {String} childIdentifier Either auth key or child id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.deleteResellerChild = function (childIdentifier) {\n      return this.deleteResellerChildWithHttpInfo(childIdentifier).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Dissociate a dedicated IP to the child\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/ManageIp} ip IP to dissociate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.dissociateIpFromChildWithHttpInfo = function (childIdentifier, ip) {\n      var postBody = ip; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling dissociateIpFromChild\");\n      } // verify the required parameter 'ip' is set\n\n\n      if (ip === undefined || ip === null) {\n        throw new Error(\"Missing the required parameter 'ip' when calling dissociateIpFromChild\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}/ips/dissociate', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Dissociate a dedicated IP to the child\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/ManageIp} ip IP to dissociate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.dissociateIpFromChild = function (childIdentifier, ip) {\n      return this.dissociateIpFromChildWithHttpInfo(childIdentifier, ip).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get the status of a reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the identifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChildAccountCreationStatus} and HTTP response\n     */\n\n\n    this.getChildAccountCreationStatusWithHttpInfo = function (childIdentifier) {\n      var postBody = null; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling getChildAccountCreationStatus\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetChildAccountCreationStatus;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}/accountCreationStatus', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get the status of a reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the identifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChildAccountCreationStatus}\n     */\n\n\n    this.getChildAccountCreationStatus = function (childIdentifier) {\n      return this.getChildAccountCreationStatusWithHttpInfo(childIdentifier).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get all sender domains for a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChildDomains} and HTTP response\n     */\n\n\n    this.getChildDomainsWithHttpInfo = function (childIdentifier) {\n      var postBody = null; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling getChildDomains\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetChildDomains;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}/domains', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get all sender domains for a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChildDomains}\n     */\n\n\n    this.getChildDomains = function (childIdentifier) {\n      return this.getChildDomainsWithHttpInfo(childIdentifier).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get a child account&#39;s details\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChildInfo} and HTTP response\n     */\n\n\n    this.getChildInfoWithHttpInfo = function (childIdentifier) {\n      var postBody = null; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling getChildInfo\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetChildInfo;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get a child account&#39;s details\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChildInfo}\n     */\n\n\n    this.getChildInfo = function (childIdentifier) {\n      return this.getChildInfoWithHttpInfo(childIdentifier).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get the list of all children accounts\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents for child accounts information per page (default to 10)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChildrenList} and HTTP response\n     */\n\n\n    this.getResellerChildsWithHttpInfo = function (opts) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset']\n      };\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetChildrenList;\n      return this.apiClient.callApi('/reseller/children', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get the list of all children accounts\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents for child accounts information per page (default to 10)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChildrenList}\n     */\n\n\n    this.getResellerChilds = function (opts) {\n      return this.getResellerChildsWithHttpInfo(opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Get session token to access Sendinblue (SSO)\n     * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSsoToken} and HTTP response\n     */\n\n\n    this.getSsoTokenWithHttpInfo = function (childIdentifier) {\n      var postBody = null; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling getSsoToken\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSsoToken;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}/auth', 'GET', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Get session token to access Sendinblue (SSO)\n     * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSsoToken}\n     */\n\n\n    this.getSsoToken = function (childIdentifier) {\n      return this.getSsoTokenWithHttpInfo(childIdentifier).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Remove Email and/or SMS credits from a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/RemoveCredits} removeCredits Values to post to remove email or SMS credits from a specific child account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RemainingCreditModel} and HTTP response\n     */\n\n\n    this.removeCreditsWithHttpInfo = function (childIdentifier, removeCredits) {\n      var postBody = removeCredits; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling removeCredits\");\n      } // verify the required parameter 'removeCredits' is set\n\n\n      if (removeCredits === undefined || removeCredits === null) {\n        throw new Error(\"Missing the required parameter 'removeCredits' when calling removeCredits\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = RemainingCreditModel;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}/credits/remove', 'POST', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Remove Email and/or SMS credits from a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/RemoveCredits} removeCredits Values to post to remove email or SMS credits from a specific child account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RemainingCreditModel}\n     */\n\n\n    this.removeCredits = function (childIdentifier, removeCredits) {\n      return this.removeCreditsWithHttpInfo(childIdentifier, removeCredits).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update info of reseller&#39;s child account status based on the childIdentifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/UpdateChildAccountStatus} updateChildAccountStatus values to update in child account status\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateChildAccountStatusWithHttpInfo = function (childIdentifier, updateChildAccountStatus) {\n      var postBody = updateChildAccountStatus; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling updateChildAccountStatus\");\n      } // verify the required parameter 'updateChildAccountStatus' is set\n\n\n      if (updateChildAccountStatus === undefined || updateChildAccountStatus === null) {\n        throw new Error(\"Missing the required parameter 'updateChildAccountStatus' when calling updateChildAccountStatus\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}/accountStatus', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update info of reseller&#39;s child account status based on the childIdentifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/UpdateChildAccountStatus} updateChildAccountStatus values to update in child account status\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateChildAccountStatus = function (childIdentifier, updateChildAccountStatus) {\n      return this.updateChildAccountStatusWithHttpInfo(childIdentifier, updateChildAccountStatus).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update the sender domain of reseller&#39;s child based on the childIdentifier and domainName passed\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {String} domainName Pass the existing domain that needs to be updated\n     * @param {module:model/UpdateChildDomain} updateChildDomain value to update for sender domain\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateChildDomainWithHttpInfo = function (childIdentifier, domainName, updateChildDomain) {\n      var postBody = updateChildDomain; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling updateChildDomain\");\n      } // verify the required parameter 'domainName' is set\n\n\n      if (domainName === undefined || domainName === null) {\n        throw new Error(\"Missing the required parameter 'domainName' when calling updateChildDomain\");\n      } // verify the required parameter 'updateChildDomain' is set\n\n\n      if (updateChildDomain === undefined || updateChildDomain === null) {\n        throw new Error(\"Missing the required parameter 'updateChildDomain' when calling updateChildDomain\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier,\n        'domainName': domainName\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}/domains/{domainName}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update the sender domain of reseller&#39;s child based on the childIdentifier and domainName passed\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {String} domainName Pass the existing domain that needs to be updated\n     * @param {module:model/UpdateChildDomain} updateChildDomain value to update for sender domain\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateChildDomain = function (childIdentifier, domainName, updateChildDomain) {\n      return this.updateChildDomainWithHttpInfo(childIdentifier, domainName, updateChildDomain).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n    /**\n     * Update info of reseller&#39;s child based on the child identifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/UpdateChild} resellerChild values to update in child profile\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n\n    this.updateResellerChildWithHttpInfo = function (childIdentifier, resellerChild) {\n      var postBody = resellerChild; // verify the required parameter 'childIdentifier' is set\n\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling updateResellerChild\");\n      } // verify the required parameter 'resellerChild' is set\n\n\n      if (resellerChild === undefined || resellerChild === null) {\n        throw new Error(\"Missing the required parameter 'resellerChild' when calling updateResellerChild\");\n      }\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {};\n      var collectionQueryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n      return this.apiClient.callApi('/reseller/children/{childIdentifier}', 'PUT', pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);\n    };\n    /**\n     * Update info of reseller&#39;s child based on the child identifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/UpdateChild} resellerChild values to update in child profile\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n\n    this.updateResellerChild = function (childIdentifier, resellerChild) {\n      return this.updateResellerChildWithHttpInfo(childIdentifier, resellerChild).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    };\n  };\n\n  return exports;\n});","map":{"version":3,"sources":["/Users/bc/Desktop/New Nivid/Leo-Project/node_modules/sib-api-v3-sdk/src/api/ResellerApi.js"],"names":["root","factory","define","amd","module","exports","require","SibApiV3Sdk","ResellerApi","ApiClient","AddChildDomain","AddCredits","CreateChild","CreateReseller","ErrorModel","GetChildAccountCreationStatus","GetChildDomains","GetChildInfo","GetChildrenList","GetSsoToken","ManageIp","RemainingCreditModel","RemoveCredits","UpdateChild","UpdateChildAccountStatus","UpdateChildDomain","apiClient","instance","addCreditsWithHttpInfo","childIdentifier","addCredits","postBody","undefined","Error","pathParams","queryParams","collectionQueryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","then","response_and_data","data","associateIpToChildWithHttpInfo","ip","associateIpToChild","createChildDomainWithHttpInfo","addChildDomain","createChildDomain","createResellerChildWithHttpInfo","opts","createResellerChild","deleteChildDomainWithHttpInfo","domainName","deleteChildDomain","deleteResellerChildWithHttpInfo","deleteResellerChild","dissociateIpFromChildWithHttpInfo","dissociateIpFromChild","getChildAccountCreationStatusWithHttpInfo","getChildAccountCreationStatus","getChildDomainsWithHttpInfo","getChildDomains","getChildInfoWithHttpInfo","getChildInfo","getResellerChildsWithHttpInfo","getResellerChilds","getSsoTokenWithHttpInfo","getSsoToken","removeCreditsWithHttpInfo","removeCredits","updateChildAccountStatusWithHttpInfo","updateChildAccountStatus","updateChildDomainWithHttpInfo","updateChildDomain","updateResellerChildWithHttpInfo","resellerChild","updateResellerChild"],"mappings":"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","sourcesContent":["/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/AddChildDomain', 'model/AddCredits', 'model/CreateChild', 'model/CreateReseller', 'model/ErrorModel', 'model/GetChildAccountCreationStatus', 'model/GetChildDomains', 'model/GetChildInfo', 'model/GetChildrenList', 'model/GetSsoToken', 'model/ManageIp', 'model/RemainingCreditModel', 'model/RemoveCredits', 'model/UpdateChild', 'model/UpdateChildAccountStatus', 'model/UpdateChildDomain'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/AddChildDomain'), require('../model/AddCredits'), require('../model/CreateChild'), require('../model/CreateReseller'), require('../model/ErrorModel'), require('../model/GetChildAccountCreationStatus'), require('../model/GetChildDomains'), require('../model/GetChildInfo'), require('../model/GetChildrenList'), require('../model/GetSsoToken'), require('../model/ManageIp'), require('../model/RemainingCreditModel'), require('../model/RemoveCredits'), require('../model/UpdateChild'), require('../model/UpdateChildAccountStatus'), require('../model/UpdateChildDomain'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.ResellerApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AddChildDomain, root.SibApiV3Sdk.AddCredits, root.SibApiV3Sdk.CreateChild, root.SibApiV3Sdk.CreateReseller, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetChildAccountCreationStatus, root.SibApiV3Sdk.GetChildDomains, root.SibApiV3Sdk.GetChildInfo, root.SibApiV3Sdk.GetChildrenList, root.SibApiV3Sdk.GetSsoToken, root.SibApiV3Sdk.ManageIp, root.SibApiV3Sdk.RemainingCreditModel, root.SibApiV3Sdk.RemoveCredits, root.SibApiV3Sdk.UpdateChild, root.SibApiV3Sdk.UpdateChildAccountStatus, root.SibApiV3Sdk.UpdateChildDomain);\n  }\n}(this, function(ApiClient, AddChildDomain, AddCredits, CreateChild, CreateReseller, ErrorModel, GetChildAccountCreationStatus, GetChildDomains, GetChildInfo, GetChildrenList, GetSsoToken, ManageIp, RemainingCreditModel, RemoveCredits, UpdateChild, UpdateChildAccountStatus, UpdateChildDomain) {\n  'use strict';\n\n  /**\n   * Reseller service.\n   * @module api/ResellerApi\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new ResellerApi. \n   * @alias module:api/ResellerApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Add Email and/or SMS credits to a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/AddCredits} addCredits Values to post to add credit to a specific child account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RemainingCreditModel} and HTTP response\n     */\n    this.addCreditsWithHttpInfo = function(childIdentifier, addCredits) {\n      var postBody = addCredits;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling addCredits\");\n      }\n\n      // verify the required parameter 'addCredits' is set\n      if (addCredits === undefined || addCredits === null) {\n        throw new Error(\"Missing the required parameter 'addCredits' when calling addCredits\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = RemainingCreditModel;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/credits/add', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Add Email and/or SMS credits to a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/AddCredits} addCredits Values to post to add credit to a specific child account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RemainingCreditModel}\n     */\n    this.addCredits = function(childIdentifier, addCredits) {\n      return this.addCreditsWithHttpInfo(childIdentifier, addCredits)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Associate a dedicated IP to the child\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/ManageIp} ip IP to associate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.associateIpToChildWithHttpInfo = function(childIdentifier, ip) {\n      var postBody = ip;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling associateIpToChild\");\n      }\n\n      // verify the required parameter 'ip' is set\n      if (ip === undefined || ip === null) {\n        throw new Error(\"Missing the required parameter 'ip' when calling associateIpToChild\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/ips/associate', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Associate a dedicated IP to the child\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/ManageIp} ip IP to associate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.associateIpToChild = function(childIdentifier, ip) {\n      return this.associateIpToChildWithHttpInfo(childIdentifier, ip)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a domain for a child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/AddChildDomain} addChildDomain Sender domain to add for a specific child account. This will not be displayed to the parent account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.createChildDomainWithHttpInfo = function(childIdentifier, addChildDomain) {\n      var postBody = addChildDomain;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling createChildDomain\");\n      }\n\n      // verify the required parameter 'addChildDomain' is set\n      if (addChildDomain === undefined || addChildDomain === null) {\n        throw new Error(\"Missing the required parameter 'addChildDomain' when calling createChildDomain\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/domains', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a domain for a child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/AddChildDomain} addChildDomain Sender domain to add for a specific child account. This will not be displayed to the parent account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.createChildDomain = function(childIdentifier, addChildDomain) {\n      return this.createChildDomainWithHttpInfo(childIdentifier, addChildDomain)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Creates a reseller child\n     * @param {Object} opts Optional parameters\n     * @param {module:model/CreateChild} opts.resellerChild reseller child to add\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateReseller} and HTTP response\n     */\n    this.createResellerChildWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = opts['resellerChild'];\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateReseller;\n\n      return this.apiClient.callApi(\n        '/reseller/children', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Creates a reseller child\n     * @param {Object} opts Optional parameters\n     * @param {module:model/CreateChild} opts.resellerChild reseller child to add\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateReseller}\n     */\n    this.createResellerChild = function(opts) {\n      return this.createResellerChildWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete the sender domain of the reseller child based on the childIdentifier and domainName passed\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {String} domainName Pass the existing domain that needs to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteChildDomainWithHttpInfo = function(childIdentifier, domainName) {\n      var postBody = null;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling deleteChildDomain\");\n      }\n\n      // verify the required parameter 'domainName' is set\n      if (domainName === undefined || domainName === null) {\n        throw new Error(\"Missing the required parameter 'domainName' when calling deleteChildDomain\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier,\n        'domainName': domainName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/domains/{domainName}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete the sender domain of the reseller child based on the childIdentifier and domainName passed\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {String} domainName Pass the existing domain that needs to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteChildDomain = function(childIdentifier, domainName) {\n      return this.deleteChildDomainWithHttpInfo(childIdentifier, domainName)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a single reseller child based on the child identifier supplied\n     * @param {String} childIdentifier Either auth key or child id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteResellerChildWithHttpInfo = function(childIdentifier) {\n      var postBody = null;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling deleteResellerChild\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a single reseller child based on the child identifier supplied\n     * @param {String} childIdentifier Either auth key or child id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteResellerChild = function(childIdentifier) {\n      return this.deleteResellerChildWithHttpInfo(childIdentifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Dissociate a dedicated IP to the child\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/ManageIp} ip IP to dissociate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.dissociateIpFromChildWithHttpInfo = function(childIdentifier, ip) {\n      var postBody = ip;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling dissociateIpFromChild\");\n      }\n\n      // verify the required parameter 'ip' is set\n      if (ip === undefined || ip === null) {\n        throw new Error(\"Missing the required parameter 'ip' when calling dissociateIpFromChild\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/ips/dissociate', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Dissociate a dedicated IP to the child\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/ManageIp} ip IP to dissociate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.dissociateIpFromChild = function(childIdentifier, ip) {\n      return this.dissociateIpFromChildWithHttpInfo(childIdentifier, ip)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the status of a reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the identifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChildAccountCreationStatus} and HTTP response\n     */\n    this.getChildAccountCreationStatusWithHttpInfo = function(childIdentifier) {\n      var postBody = null;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling getChildAccountCreationStatus\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetChildAccountCreationStatus;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/accountCreationStatus', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the status of a reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the identifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChildAccountCreationStatus}\n     */\n    this.getChildAccountCreationStatus = function(childIdentifier) {\n      return this.getChildAccountCreationStatusWithHttpInfo(childIdentifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all sender domains for a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChildDomains} and HTTP response\n     */\n    this.getChildDomainsWithHttpInfo = function(childIdentifier) {\n      var postBody = null;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling getChildDomains\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetChildDomains;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/domains', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all sender domains for a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChildDomains}\n     */\n    this.getChildDomains = function(childIdentifier) {\n      return this.getChildDomainsWithHttpInfo(childIdentifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a child account&#39;s details\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChildInfo} and HTTP response\n     */\n    this.getChildInfoWithHttpInfo = function(childIdentifier) {\n      var postBody = null;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling getChildInfo\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetChildInfo;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a child account&#39;s details\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChildInfo}\n     */\n    this.getChildInfo = function(childIdentifier) {\n      return this.getChildInfoWithHttpInfo(childIdentifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of all children accounts\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents for child accounts information per page (default to 10)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChildrenList} and HTTP response\n     */\n    this.getResellerChildsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetChildrenList;\n\n      return this.apiClient.callApi(\n        '/reseller/children', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of all children accounts\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents for child accounts information per page (default to 10)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChildrenList}\n     */\n    this.getResellerChilds = function(opts) {\n      return this.getResellerChildsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get session token to access Sendinblue (SSO)\n     * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSsoToken} and HTTP response\n     */\n    this.getSsoTokenWithHttpInfo = function(childIdentifier) {\n      var postBody = null;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling getSsoToken\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSsoToken;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/auth', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get session token to access Sendinblue (SSO)\n     * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSsoToken}\n     */\n    this.getSsoToken = function(childIdentifier) {\n      return this.getSsoTokenWithHttpInfo(childIdentifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Remove Email and/or SMS credits from a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/RemoveCredits} removeCredits Values to post to remove email or SMS credits from a specific child account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RemainingCreditModel} and HTTP response\n     */\n    this.removeCreditsWithHttpInfo = function(childIdentifier, removeCredits) {\n      var postBody = removeCredits;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling removeCredits\");\n      }\n\n      // verify the required parameter 'removeCredits' is set\n      if (removeCredits === undefined || removeCredits === null) {\n        throw new Error(\"Missing the required parameter 'removeCredits' when calling removeCredits\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = RemainingCreditModel;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/credits/remove', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Remove Email and/or SMS credits from a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/RemoveCredits} removeCredits Values to post to remove email or SMS credits from a specific child account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RemainingCreditModel}\n     */\n    this.removeCredits = function(childIdentifier, removeCredits) {\n      return this.removeCreditsWithHttpInfo(childIdentifier, removeCredits)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update info of reseller&#39;s child account status based on the childIdentifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/UpdateChildAccountStatus} updateChildAccountStatus values to update in child account status\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateChildAccountStatusWithHttpInfo = function(childIdentifier, updateChildAccountStatus) {\n      var postBody = updateChildAccountStatus;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling updateChildAccountStatus\");\n      }\n\n      // verify the required parameter 'updateChildAccountStatus' is set\n      if (updateChildAccountStatus === undefined || updateChildAccountStatus === null) {\n        throw new Error(\"Missing the required parameter 'updateChildAccountStatus' when calling updateChildAccountStatus\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/accountStatus', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update info of reseller&#39;s child account status based on the childIdentifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/UpdateChildAccountStatus} updateChildAccountStatus values to update in child account status\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateChildAccountStatus = function(childIdentifier, updateChildAccountStatus) {\n      return this.updateChildAccountStatusWithHttpInfo(childIdentifier, updateChildAccountStatus)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update the sender domain of reseller&#39;s child based on the childIdentifier and domainName passed\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {String} domainName Pass the existing domain that needs to be updated\n     * @param {module:model/UpdateChildDomain} updateChildDomain value to update for sender domain\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateChildDomainWithHttpInfo = function(childIdentifier, domainName, updateChildDomain) {\n      var postBody = updateChildDomain;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling updateChildDomain\");\n      }\n\n      // verify the required parameter 'domainName' is set\n      if (domainName === undefined || domainName === null) {\n        throw new Error(\"Missing the required parameter 'domainName' when calling updateChildDomain\");\n      }\n\n      // verify the required parameter 'updateChildDomain' is set\n      if (updateChildDomain === undefined || updateChildDomain === null) {\n        throw new Error(\"Missing the required parameter 'updateChildDomain' when calling updateChildDomain\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier,\n        'domainName': domainName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/domains/{domainName}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update the sender domain of reseller&#39;s child based on the childIdentifier and domainName passed\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {String} domainName Pass the existing domain that needs to be updated\n     * @param {module:model/UpdateChildDomain} updateChildDomain value to update for sender domain\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateChildDomain = function(childIdentifier, domainName, updateChildDomain) {\n      return this.updateChildDomainWithHttpInfo(childIdentifier, domainName, updateChildDomain)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update info of reseller&#39;s child based on the child identifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/UpdateChild} resellerChild values to update in child profile\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateResellerChildWithHttpInfo = function(childIdentifier, resellerChild) {\n      var postBody = resellerChild;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling updateResellerChild\");\n      }\n\n      // verify the required parameter 'resellerChild' is set\n      if (resellerChild === undefined || resellerChild === null) {\n        throw new Error(\"Missing the required parameter 'resellerChild' when calling updateResellerChild\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update info of reseller&#39;s child based on the child identifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller&#39;s child\n     * @param {module:model/UpdateChild} resellerChild values to update in child profile\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateResellerChild = function(childIdentifier, resellerChild) {\n      return this.updateResellerChildWithHttpInfo(childIdentifier, resellerChild)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"]},"metadata":{},"sourceType":"script"}
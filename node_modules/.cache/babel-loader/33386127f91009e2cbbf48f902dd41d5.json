{"ast":null,"code":"/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/SendSmtpEmailAttachment', 'model/SendSmtpEmailBcc', 'model/SendSmtpEmailCc', 'model/SendSmtpEmailMessageVersions', 'model/SendSmtpEmailReplyTo', 'model/SendSmtpEmailSender', 'model/SendSmtpEmailTo'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./SendSmtpEmailAttachment'), require('./SendSmtpEmailBcc'), require('./SendSmtpEmailCc'), require('./SendSmtpEmailMessageVersions'), require('./SendSmtpEmailReplyTo'), require('./SendSmtpEmailSender'), require('./SendSmtpEmailTo'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n\n    root.SibApiV3Sdk.SendSmtpEmail = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.SendSmtpEmailAttachment, root.SibApiV3Sdk.SendSmtpEmailBcc, root.SibApiV3Sdk.SendSmtpEmailCc, root.SibApiV3Sdk.SendSmtpEmailMessageVersions, root.SibApiV3Sdk.SendSmtpEmailReplyTo, root.SibApiV3Sdk.SendSmtpEmailSender, root.SibApiV3Sdk.SendSmtpEmailTo);\n  }\n})(this, function (ApiClient, SendSmtpEmailAttachment, SendSmtpEmailBcc, SendSmtpEmailCc, SendSmtpEmailMessageVersions, SendSmtpEmailReplyTo, SendSmtpEmailSender, SendSmtpEmailTo) {\n  'use strict';\n  /**\n   * The SendSmtpEmail model module.\n   * @module model/SendSmtpEmail\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new <code>SendSmtpEmail</code>.\n   * @alias module:model/SendSmtpEmail\n   * @class\n   */\n\n  var exports = function () {\n    var _this = this;\n  };\n  /**\n   * Constructs a <code>SendSmtpEmail</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SendSmtpEmail} obj Optional instance to populate.\n   * @return {module:model/SendSmtpEmail} The populated <code>SendSmtpEmail</code> instance.\n   */\n\n\n  exports.constructFromObject = function (data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('sender')) {\n        obj['sender'] = SendSmtpEmailSender.constructFromObject(data['sender']);\n      }\n\n      if (data.hasOwnProperty('to')) {\n        obj['to'] = ApiClient.convertToType(data['to'], [SendSmtpEmailTo]);\n      }\n\n      if (data.hasOwnProperty('bcc')) {\n        obj['bcc'] = ApiClient.convertToType(data['bcc'], [SendSmtpEmailBcc]);\n      }\n\n      if (data.hasOwnProperty('cc')) {\n        obj['cc'] = ApiClient.convertToType(data['cc'], [SendSmtpEmailCc]);\n      }\n\n      if (data.hasOwnProperty('htmlContent')) {\n        obj['htmlContent'] = ApiClient.convertToType(data['htmlContent'], 'String');\n      }\n\n      if (data.hasOwnProperty('textContent')) {\n        obj['textContent'] = ApiClient.convertToType(data['textContent'], 'String');\n      }\n\n      if (data.hasOwnProperty('subject')) {\n        obj['subject'] = ApiClient.convertToType(data['subject'], 'String');\n      }\n\n      if (data.hasOwnProperty('replyTo')) {\n        obj['replyTo'] = SendSmtpEmailReplyTo.constructFromObject(data['replyTo']);\n      }\n\n      if (data.hasOwnProperty('attachment')) {\n        obj['attachment'] = ApiClient.convertToType(data['attachment'], [SendSmtpEmailAttachment]);\n      }\n\n      if (data.hasOwnProperty('headers')) {\n        obj['headers'] = ApiClient.convertToType(data['headers'], Object);\n      }\n\n      if (data.hasOwnProperty('templateId')) {\n        obj['templateId'] = ApiClient.convertToType(data['templateId'], 'Number');\n      }\n\n      if (data.hasOwnProperty('params')) {\n        obj['params'] = ApiClient.convertToType(data['params'], Object);\n      }\n\n      if (data.hasOwnProperty('messageVersions')) {\n        obj['messageVersions'] = ApiClient.convertToType(data['messageVersions'], [SendSmtpEmailMessageVersions]);\n      }\n\n      if (data.hasOwnProperty('tags')) {\n        obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);\n      }\n    }\n\n    return obj;\n  };\n  /**\n   * @member {module:model/SendSmtpEmailSender} sender\n   */\n\n\n  exports.prototype['sender'] = undefined;\n  /**\n   * Mandatory if messageVersions are not passed, ignored if messageVersions are passed. List of email addresses and names (optional) of the recipients. For example, [{\\\"name\\\":\\\"Jimmy\\\", \\\"email\\\":\\\"jimmy98@example.com\\\"}, {\\\"name\\\":\\\"Joe\\\", \\\"email\\\":\\\"joe@example.com\\\"}]\n   * @member {Array.<module:model/SendSmtpEmailTo>} to\n   */\n\n  exports.prototype['to'] = undefined;\n  /**\n   * List of email addresses and names (optional) of the recipients in bcc\n   * @member {Array.<module:model/SendSmtpEmailBcc>} bcc\n   */\n\n  exports.prototype['bcc'] = undefined;\n  /**\n   * List of email addresses and names (optional) of the recipients in cc\n   * @member {Array.<module:model/SendSmtpEmailCc>} cc\n   */\n\n  exports.prototype['cc'] = undefined;\n  /**\n   * HTML body of the message ( Mandatory if 'templateId' is not passed, ignored if 'templateId' is passed )\n   * @member {String} htmlContent\n   */\n\n  exports.prototype['htmlContent'] = undefined;\n  /**\n   * Plain Text body of the message ( Ignored if 'templateId' is passed )\n   * @member {String} textContent\n   */\n\n  exports.prototype['textContent'] = undefined;\n  /**\n   * Subject of the message. Mandatory if 'templateId' is not passed\n   * @member {String} subject\n   */\n\n  exports.prototype['subject'] = undefined;\n  /**\n   * @member {module:model/SendSmtpEmailReplyTo} replyTo\n   */\n\n  exports.prototype['replyTo'] = undefined;\n  /**\n   * Pass the absolute URL (no local file) or the base64 content of the attachment along with the attachment name (Mandatory if attachment content is passed). For example, `[{\\\"url\\\":\\\"https://attachment.domain.com/myAttachmentFromUrl.jpg\\\", \\\"name\\\":\\\"myAttachmentFromUrl.jpg\\\"}, {\\\"content\\\":\\\"base64 example content\\\", \\\"name\\\":\\\"myAttachmentFromBase64.jpg\\\"}]`. Allowed extensions for attachment file: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg and wmv ( If 'templateId' is passed and is in New Template Language format then both attachment url and content are accepted. If template is in Old template Language format, then 'attachment' is ignored )\n   * @member {Array.<module:model/SendSmtpEmailAttachment>} attachment\n   */\n\n  exports.prototype['attachment'] = undefined;\n  /**\n   * Pass the set of custom headers (not the standard headers) that shall be sent along the mail headers in the original email. 'sender.ip' header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in `This-Case-Only` (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, `{\\\"sender.ip\\\":\\\"1.2.3.4\\\", \\\"X-Mailin-custom\\\":\\\"some_custom_header\\\"}`.\n   * @member {Object} headers\n   */\n\n  exports.prototype['headers'] = undefined;\n  /**\n   * Id of the template. Mandatory if messageVersions are passed\n   * @member {Number} templateId\n   */\n\n  exports.prototype['templateId'] = undefined;\n  /**\n   * Pass the set of attributes to customize the template. For example, {\\\"FNAME\\\":\\\"Joe\\\", \\\"LNAME\\\":\\\"Doe\\\"}. It's considered only if template is in New Template Language format.\n   * @member {Object} params\n   */\n\n  exports.prototype['params'] = undefined;\n  /**\n   * You can customize and send out multiple versions of a templateId. Some global parameters such as **to(mandatory), bcc, cc, replyTo, subject** can also be customized specific to each version. The size of individual params in all the messageVersions shall not exceed 100 KB limit and that of cumulative params shall not exceed 1000 KB. This feature is currently in its beta version. You can follow this **step-by-step guide** on how to use **messageVersions** to batch send emails - https://developers.sendinblue.com/docs/batch-send-transactional-emails\n   * @member {Array.<module:model/SendSmtpEmailMessageVersions>} messageVersions\n   */\n\n  exports.prototype['messageVersions'] = undefined;\n  /**\n   * Tag your emails to find them more easily\n   * @member {Array.<String>} tags\n   */\n\n  exports.prototype['tags'] = undefined;\n  return exports;\n});","map":{"version":3,"sources":["/Users/bc/Desktop/Nivid/node_modules/sib-api-v3-sdk/src/model/SendSmtpEmail.js"],"names":["root","factory","define","amd","module","exports","require","SibApiV3Sdk","SendSmtpEmail","ApiClient","SendSmtpEmailAttachment","SendSmtpEmailBcc","SendSmtpEmailCc","SendSmtpEmailMessageVersions","SendSmtpEmailReplyTo","SendSmtpEmailSender","SendSmtpEmailTo","_this","constructFromObject","data","obj","hasOwnProperty","convertToType","Object","prototype","undefined"],"mappings":"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","sourcesContent":["/**\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.3.1\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/SendSmtpEmailAttachment', 'model/SendSmtpEmailBcc', 'model/SendSmtpEmailCc', 'model/SendSmtpEmailMessageVersions', 'model/SendSmtpEmailReplyTo', 'model/SendSmtpEmailSender', 'model/SendSmtpEmailTo'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./SendSmtpEmailAttachment'), require('./SendSmtpEmailBcc'), require('./SendSmtpEmailCc'), require('./SendSmtpEmailMessageVersions'), require('./SendSmtpEmailReplyTo'), require('./SendSmtpEmailSender'), require('./SendSmtpEmailTo'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.SendSmtpEmail = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.SendSmtpEmailAttachment, root.SibApiV3Sdk.SendSmtpEmailBcc, root.SibApiV3Sdk.SendSmtpEmailCc, root.SibApiV3Sdk.SendSmtpEmailMessageVersions, root.SibApiV3Sdk.SendSmtpEmailReplyTo, root.SibApiV3Sdk.SendSmtpEmailSender, root.SibApiV3Sdk.SendSmtpEmailTo);\n  }\n}(this, function(ApiClient, SendSmtpEmailAttachment, SendSmtpEmailBcc, SendSmtpEmailCc, SendSmtpEmailMessageVersions, SendSmtpEmailReplyTo, SendSmtpEmailSender, SendSmtpEmailTo) {\n  'use strict';\n\n\n\n\n  /**\n   * The SendSmtpEmail model module.\n   * @module model/SendSmtpEmail\n   * @version 8.2.0\n   */\n\n  /**\n   * Constructs a new <code>SendSmtpEmail</code>.\n   * @alias module:model/SendSmtpEmail\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>SendSmtpEmail</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/SendSmtpEmail} obj Optional instance to populate.\n   * @return {module:model/SendSmtpEmail} The populated <code>SendSmtpEmail</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('sender')) {\n        obj['sender'] = SendSmtpEmailSender.constructFromObject(data['sender']);\n      }\n      if (data.hasOwnProperty('to')) {\n        obj['to'] = ApiClient.convertToType(data['to'], [SendSmtpEmailTo]);\n      }\n      if (data.hasOwnProperty('bcc')) {\n        obj['bcc'] = ApiClient.convertToType(data['bcc'], [SendSmtpEmailBcc]);\n      }\n      if (data.hasOwnProperty('cc')) {\n        obj['cc'] = ApiClient.convertToType(data['cc'], [SendSmtpEmailCc]);\n      }\n      if (data.hasOwnProperty('htmlContent')) {\n        obj['htmlContent'] = ApiClient.convertToType(data['htmlContent'], 'String');\n      }\n      if (data.hasOwnProperty('textContent')) {\n        obj['textContent'] = ApiClient.convertToType(data['textContent'], 'String');\n      }\n      if (data.hasOwnProperty('subject')) {\n        obj['subject'] = ApiClient.convertToType(data['subject'], 'String');\n      }\n      if (data.hasOwnProperty('replyTo')) {\n        obj['replyTo'] = SendSmtpEmailReplyTo.constructFromObject(data['replyTo']);\n      }\n      if (data.hasOwnProperty('attachment')) {\n        obj['attachment'] = ApiClient.convertToType(data['attachment'], [SendSmtpEmailAttachment]);\n      }\n      if (data.hasOwnProperty('headers')) {\n        obj['headers'] = ApiClient.convertToType(data['headers'], Object);\n      }\n      if (data.hasOwnProperty('templateId')) {\n        obj['templateId'] = ApiClient.convertToType(data['templateId'], 'Number');\n      }\n      if (data.hasOwnProperty('params')) {\n        obj['params'] = ApiClient.convertToType(data['params'], Object);\n      }\n      if (data.hasOwnProperty('messageVersions')) {\n        obj['messageVersions'] = ApiClient.convertToType(data['messageVersions'], [SendSmtpEmailMessageVersions]);\n      }\n      if (data.hasOwnProperty('tags')) {\n        obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {module:model/SendSmtpEmailSender} sender\n   */\n  exports.prototype['sender'] = undefined;\n  /**\n   * Mandatory if messageVersions are not passed, ignored if messageVersions are passed. List of email addresses and names (optional) of the recipients. For example, [{\\\"name\\\":\\\"Jimmy\\\", \\\"email\\\":\\\"jimmy98@example.com\\\"}, {\\\"name\\\":\\\"Joe\\\", \\\"email\\\":\\\"joe@example.com\\\"}]\n   * @member {Array.<module:model/SendSmtpEmailTo>} to\n   */\n  exports.prototype['to'] = undefined;\n  /**\n   * List of email addresses and names (optional) of the recipients in bcc\n   * @member {Array.<module:model/SendSmtpEmailBcc>} bcc\n   */\n  exports.prototype['bcc'] = undefined;\n  /**\n   * List of email addresses and names (optional) of the recipients in cc\n   * @member {Array.<module:model/SendSmtpEmailCc>} cc\n   */\n  exports.prototype['cc'] = undefined;\n  /**\n   * HTML body of the message ( Mandatory if 'templateId' is not passed, ignored if 'templateId' is passed )\n   * @member {String} htmlContent\n   */\n  exports.prototype['htmlContent'] = undefined;\n  /**\n   * Plain Text body of the message ( Ignored if 'templateId' is passed )\n   * @member {String} textContent\n   */\n  exports.prototype['textContent'] = undefined;\n  /**\n   * Subject of the message. Mandatory if 'templateId' is not passed\n   * @member {String} subject\n   */\n  exports.prototype['subject'] = undefined;\n  /**\n   * @member {module:model/SendSmtpEmailReplyTo} replyTo\n   */\n  exports.prototype['replyTo'] = undefined;\n  /**\n   * Pass the absolute URL (no local file) or the base64 content of the attachment along with the attachment name (Mandatory if attachment content is passed). For example, `[{\\\"url\\\":\\\"https://attachment.domain.com/myAttachmentFromUrl.jpg\\\", \\\"name\\\":\\\"myAttachmentFromUrl.jpg\\\"}, {\\\"content\\\":\\\"base64 example content\\\", \\\"name\\\":\\\"myAttachmentFromBase64.jpg\\\"}]`. Allowed extensions for attachment file: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg and wmv ( If 'templateId' is passed and is in New Template Language format then both attachment url and content are accepted. If template is in Old template Language format, then 'attachment' is ignored )\n   * @member {Array.<module:model/SendSmtpEmailAttachment>} attachment\n   */\n  exports.prototype['attachment'] = undefined;\n  /**\n   * Pass the set of custom headers (not the standard headers) that shall be sent along the mail headers in the original email. 'sender.ip' header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in `This-Case-Only` (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, `{\\\"sender.ip\\\":\\\"1.2.3.4\\\", \\\"X-Mailin-custom\\\":\\\"some_custom_header\\\"}`.\n   * @member {Object} headers\n   */\n  exports.prototype['headers'] = undefined;\n  /**\n   * Id of the template. Mandatory if messageVersions are passed\n   * @member {Number} templateId\n   */\n  exports.prototype['templateId'] = undefined;\n  /**\n   * Pass the set of attributes to customize the template. For example, {\\\"FNAME\\\":\\\"Joe\\\", \\\"LNAME\\\":\\\"Doe\\\"}. It's considered only if template is in New Template Language format.\n   * @member {Object} params\n   */\n  exports.prototype['params'] = undefined;\n  /**\n   * You can customize and send out multiple versions of a templateId. Some global parameters such as **to(mandatory), bcc, cc, replyTo, subject** can also be customized specific to each version. The size of individual params in all the messageVersions shall not exceed 100 KB limit and that of cumulative params shall not exceed 1000 KB. This feature is currently in its beta version. You can follow this **step-by-step guide** on how to use **messageVersions** to batch send emails - https://developers.sendinblue.com/docs/batch-send-transactional-emails\n   * @member {Array.<module:model/SendSmtpEmailMessageVersions>} messageVersions\n   */\n  exports.prototype['messageVersions'] = undefined;\n  /**\n   * Tag your emails to find them more easily\n   * @member {Array.<String>} tags\n   */\n  exports.prototype['tags'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n"]},"metadata":{},"sourceType":"script"}